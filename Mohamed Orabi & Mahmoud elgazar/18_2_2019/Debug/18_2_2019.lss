
18_2_2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  000033c4  00003438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000035a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a45  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b9  00000000  00000000  000051e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001792  00000000  00000000  00005b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00007330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000621  00000000  00000000  000077c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d4  00000000  00000000  00007de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <main>
      7a:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BCDSevegments_init>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include "BCDSevSegment.h"

void BCDSevegments_init(){
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	timer_init();
      8a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <timer_init>
	DIO_SetPinDirection(P0,OUTPUT);
      8e:	61 e0       	ldi	r22, 0x01	; 1
      90:	88 e0       	ldi	r24, 0x08	; 8
      92:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(P1,OUTPUT);
      96:	61 e0       	ldi	r22, 0x01	; 1
      98:	89 e0       	ldi	r24, 0x09	; 9
      9a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(P2,OUTPUT);
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	8a e0       	ldi	r24, 0x0A	; 10
      a2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(P3,OUTPUT);
      a6:	61 e0       	ldi	r22, 0x01	; 1
      a8:	8b e0       	ldi	r24, 0x0B	; 11
      aa:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>

	switch(NO_work_seg)
	{
		case 1:
			DIO_SetPinDirection(SEG_EN1,OUTPUT);
      ae:	61 e0       	ldi	r22, 0x01	; 1
      b0:	8a e1       	ldi	r24, 0x1A	; 26
      b2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
			break;
      b6:	00 00       	nop
			DIO_SetPinDirection(SEG_EN4,OUTPUT);
			break;
	}
	

}
      b8:	00 00       	nop
      ba:	df 91       	pop	r29
      bc:	cf 91       	pop	r28
      be:	08 95       	ret

000000c0 <BCDSevegments_enable>:


void BCDSevegments_enable (uint8 no_seg)
{
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	1f 92       	push	r1
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	89 83       	std	Y+1, r24	; 0x01
			
	DIO_WritePin(no_seg,SET);
      cc:	61 e0       	ldi	r22, 0x01	; 1
      ce:	89 81       	ldd	r24, Y+1	; 0x01
      d0:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
}
      d4:	00 00       	nop
      d6:	0f 90       	pop	r0
      d8:	df 91       	pop	r29
      da:	cf 91       	pop	r28
      dc:	08 95       	ret

000000de <BCDSevegments_disable>:
void BCDSevegments_disable(uint8 no_seg)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	1f 92       	push	r1
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(no_seg,RESET);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
}
      f2:	00 00       	nop
      f4:	0f 90       	pop	r0
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <BCDSevegments_displayNo>:


void BCDSevegments_displayNo(uint16 num1)
{
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	60 97       	sbiw	r28, 0x10	; 16
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	f8 94       	cli
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	0f be       	out	0x3f, r0	; 63
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	98 8b       	std	Y+16, r25	; 0x10
     112:	8f 87       	std	Y+15, r24	; 0x0f

	
	uint16 disp_num=num1,num,i,x[4]={0,0,0,0};
     114:	8f 85       	ldd	r24, Y+15	; 0x0f
     116:	98 89       	ldd	r25, Y+16	; 0x10
     118:	9c 83       	std	Y+4, r25	; 0x04
     11a:	8b 83       	std	Y+3, r24	; 0x03
     11c:	28 e0       	ldi	r18, 0x08	; 8
     11e:	ce 01       	movw	r24, r28
     120:	07 96       	adiw	r24, 0x07	; 7
     122:	fc 01       	movw	r30, r24
     124:	32 2f       	mov	r19, r18
     126:	11 92       	st	Z+, r1
     128:	3a 95       	dec	r19
     12a:	e9 f7       	brne	.-6      	; 0x126 <BCDSevegments_displayNo+0x2a>
	for (i=0;i<10;i++)
     12c:	1a 82       	std	Y+2, r1	; 0x02
     12e:	19 82       	std	Y+1, r1	; 0x01
     130:	85 c0       	rjmp	.+266    	; 0x23c <BCDSevegments_displayNo+0x140>
	{
		num=num1;
     132:	8f 85       	ldd	r24, Y+15	; 0x0f
     134:	98 89       	ldd	r25, Y+16	; 0x10
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	8d 83       	std	Y+5, r24	; 0x05
	
		BCDSevegments_enable (SEG_EN1);
     13a:	8a e1       	ldi	r24, 0x1A	; 26
     13c:	0e 94 60 00 	call	0xc0	; 0xc0 <BCDSevegments_enable>
		BCDSevegments_disable(SEG_EN2);
     140:	8b e1       	ldi	r24, 0x1B	; 27
     142:	0e 94 6f 00 	call	0xde	; 0xde <BCDSevegments_disable>
		BCDSevegments_disable(SEG_EN3);
     146:	8e e1       	ldi	r24, 0x1E	; 30
     148:	0e 94 6f 00 	call	0xde	; 0xde <BCDSevegments_disable>
		BCDSevegments_disable(SEG_EN4);
     14c:	8f e1       	ldi	r24, 0x1F	; 31
     14e:	0e 94 6f 00 	call	0xde	; 0xde <BCDSevegments_disable>
		disp_num=num%10;
     152:	4d 81       	ldd	r20, Y+5	; 0x05
     154:	5e 81       	ldd	r21, Y+6	; 0x06
     156:	9a 01       	movw	r18, r20
     158:	ad ec       	ldi	r26, 0xCD	; 205
     15a:	bc ec       	ldi	r27, 0xCC	; 204
     15c:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__umulhisi3>
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	96 95       	lsr	r25
     166:	87 95       	ror	r24
     168:	96 95       	lsr	r25
     16a:	87 95       	ror	r24
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	9c 01       	movw	r18, r24
     172:	22 0f       	add	r18, r18
     174:	33 1f       	adc	r19, r19
     176:	22 0f       	add	r18, r18
     178:	33 1f       	adc	r19, r19
     17a:	82 0f       	add	r24, r18
     17c:	93 1f       	adc	r25, r19
     17e:	fa 01       	movw	r30, r20
     180:	e8 1b       	sub	r30, r24
     182:	f9 0b       	sbc	r31, r25
     184:	cf 01       	movw	r24, r30
     186:	9c 83       	std	Y+4, r25	; 0x04
     188:	8b 83       	std	Y+3, r24	; 0x03
		num=num/10;
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	9e 81       	ldd	r25, Y+6	; 0x06
     18e:	9c 01       	movw	r18, r24
     190:	ad ec       	ldi	r26, 0xCD	; 205
     192:	bc ec       	ldi	r27, 0xCC	; 204
     194:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__umulhisi3>
     198:	96 95       	lsr	r25
     19a:	87 95       	ror	r24
     19c:	96 95       	lsr	r25
     19e:	87 95       	ror	r24
     1a0:	96 95       	lsr	r25
     1a2:	87 95       	ror	r24
     1a4:	9e 83       	std	Y+6, r25	; 0x06
     1a6:	8d 83       	std	Y+5, r24	; 0x05
		x[0]=disp_num & 0b00000001;
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	9c 81       	ldd	r25, Y+4	; 0x04
     1ac:	81 70       	andi	r24, 0x01	; 1
     1ae:	99 27       	eor	r25, r25
     1b0:	98 87       	std	Y+8, r25	; 0x08
     1b2:	8f 83       	std	Y+7, r24	; 0x07
		x[1]=(char)((disp_num & 0b00000010)>>1);
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	9c 81       	ldd	r25, Y+4	; 0x04
     1b8:	82 70       	andi	r24, 0x02	; 2
     1ba:	99 27       	eor	r25, r25
     1bc:	96 95       	lsr	r25
     1be:	87 95       	ror	r24
     1c0:	99 27       	eor	r25, r25
     1c2:	9a 87       	std	Y+10, r25	; 0x0a
     1c4:	89 87       	std	Y+9, r24	; 0x09
		x[2]=(char)((disp_num & 0b00000100)>>2);
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ca:	84 70       	andi	r24, 0x04	; 4
     1cc:	99 27       	eor	r25, r25
     1ce:	96 95       	lsr	r25
     1d0:	87 95       	ror	r24
     1d2:	96 95       	lsr	r25
     1d4:	87 95       	ror	r24
     1d6:	99 27       	eor	r25, r25
     1d8:	9c 87       	std	Y+12, r25	; 0x0c
     1da:	8b 87       	std	Y+11, r24	; 0x0b
		x[3]=(char)((disp_num & 0b00001000)>>3);
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	88 70       	andi	r24, 0x08	; 8
     1e2:	99 27       	eor	r25, r25
     1e4:	96 95       	lsr	r25
     1e6:	87 95       	ror	r24
     1e8:	96 95       	lsr	r25
     1ea:	87 95       	ror	r24
     1ec:	96 95       	lsr	r25
     1ee:	87 95       	ror	r24
     1f0:	99 27       	eor	r25, r25
     1f2:	9e 87       	std	Y+14, r25	; 0x0e
     1f4:	8d 87       	std	Y+13, r24	; 0x0d
		DIO_WritePin(P0,x[0]);//((char)(disp_num	& 1)));
     1f6:	8f 81       	ldd	r24, Y+7	; 0x07
     1f8:	98 85       	ldd	r25, Y+8	; 0x08
     1fa:	68 2f       	mov	r22, r24
     1fc:	88 e0       	ldi	r24, 0x08	; 8
     1fe:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(P1,x[1]);//((char)(disp_num	& 2)>>1));
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	68 2f       	mov	r22, r24
     208:	89 e0       	ldi	r24, 0x09	; 9
     20a:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(P2,x[2]);//((char)(disp_num	& 4)>>2));
     20e:	8b 85       	ldd	r24, Y+11	; 0x0b
     210:	9c 85       	ldd	r25, Y+12	; 0x0c
     212:	68 2f       	mov	r22, r24
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(P3,x[3]);//((char)(disp_num	& 8)>>3));
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	68 2f       	mov	r22, r24
     220:	8b e0       	ldi	r24, 0x0B	; 11
     222:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		timer_delay(1);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <timer_delay>
void BCDSevegments_displayNo(uint16 num1)
{

	
	uint16 disp_num=num1,num,i,x[4]={0,0,0,0};
	for (i=0;i<10;i++)
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	9a 83       	std	Y+2, r25	; 0x02
     23a:	89 83       	std	Y+1, r24	; 0x01
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	9a 81       	ldd	r25, Y+2	; 0x02
     240:	0a 97       	sbiw	r24, 0x0a	; 10
     242:	08 f4       	brcc	.+2      	; 0x246 <BCDSevegments_displayNo+0x14a>
     244:	76 cf       	rjmp	.-276    	; 0x132 <BCDSevegments_displayNo+0x36>
		DIO_WritePin(P2,x[2]);
		DIO_WritePin(P3,x[3]);
		timer_delay(1);*/
	}
	
     246:	00 00       	nop
     248:	60 96       	adiw	r28, 0x10	; 16
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <Keypad_init>:
 * Created: 2/18/2019 4:58:18 PM
 *  Author: AVE-LAP-025
 */ 
#include "keybad.h"
void Keypad_init()
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(C_0,OUTPUT);/*determine direction of bin*/
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	85 e1       	ldi	r24, 0x15	; 21
     266:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(C_1,OUTPUT);
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	86 e1       	ldi	r24, 0x16	; 22
     26e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(C_2,OUTPUT);
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	87 e1       	ldi	r24, 0x17	; 23
     276:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(R_0,INPUT);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	82 e1       	ldi	r24, 0x12	; 18
     27e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(R_1,INPUT);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	83 e1       	ldi	r24, 0x13	; 19
     286:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(R_2,INPUT);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	84 e1       	ldi	r24, 0x14	; 20
     28e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	
	DIO_WritePin(C_0,SET);/*OUTPUT on pin 1*/
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	85 e1       	ldi	r24, 0x15	; 21
     296:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(C_1,SET);
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	86 e1       	ldi	r24, 0x16	; 22
     29e:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(C_2,SET);
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	87 e1       	ldi	r24, 0x17	; 23
     2a6:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	
	DIO_WritePin(R_0,SET);/*pull up*/
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	82 e1       	ldi	r24, 0x12	; 18
     2ae:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(R_1,SET);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	83 e1       	ldi	r24, 0x13	; 19
     2b6:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(R_2,SET);
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	84 e1       	ldi	r24, 0x14	; 20
     2be:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
}
     2c2:	00 00       	nop
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <Keypad_getPressedKey>:
uint8 Keypad_getPressedKey()
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	29 97       	sbiw	r28, 0x09	; 9
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
	uint8 row[no_row]={R_0,R_1,R_2};
     2de:	82 e1       	ldi	r24, 0x12	; 18
     2e0:	8c 83       	std	Y+4, r24	; 0x04
     2e2:	83 e1       	ldi	r24, 0x13	; 19
     2e4:	8d 83       	std	Y+5, r24	; 0x05
     2e6:	84 e1       	ldi	r24, 0x14	; 20
     2e8:	8e 83       	std	Y+6, r24	; 0x06
	uint8 col[no_col]={C_0,C_1,C_2};
     2ea:	85 e1       	ldi	r24, 0x15	; 21
     2ec:	8f 83       	std	Y+7, r24	; 0x07
     2ee:	86 e1       	ldi	r24, 0x16	; 22
     2f0:	88 87       	std	Y+8, r24	; 0x08
     2f2:	87 e1       	ldi	r24, 0x17	; 23
     2f4:	89 87       	std	Y+9, r24	; 0x09
	uint8 i,j;
	uint8 val =ZERO;
     2f6:	1b 82       	std	Y+3, r1	; 0x03
	for(i=0;i<no_col;i++)/*check Rows and column */
     2f8:	19 82       	std	Y+1, r1	; 0x01
     2fa:	89 c0       	rjmp	.+274    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{	
		DIO_WritePin(col[ZERO],SET);/*set all pin*/
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(col[ONE],SET);
     304:	88 85       	ldd	r24, Y+8	; 0x08
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(col[TWO],SET);
     30c:	89 85       	ldd	r24, Y+9	; 0x09
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
		DIO_WritePin(col[i],RESET);/*reset one pin only*/
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9e 01       	movw	r18, r28
     31c:	29 5f       	subi	r18, 0xF9	; 249
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
     320:	82 0f       	add	r24, r18
     322:	93 1f       	adc	r25, r19
     324:	fc 01       	movw	r30, r24
     326:	80 81       	ld	r24, Z
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
		for (j=0;j<no_row;j++)
     32e:	1a 82       	std	Y+2, r1	; 0x02
     330:	67 c0       	rjmp	.+206    	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			if(!DIO_ReadPin(row[j]))
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	9e 01       	movw	r18, r28
     33a:	2c 5f       	subi	r18, 0xFC	; 252
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	82 0f       	add	r24, r18
     340:	93 1f       	adc	r25, r19
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_ReadPin>
     34a:	88 23       	and	r24, r24
     34c:	09 f0       	breq	.+2      	; 0x350 <Keypad_getPressedKey+0x86>
     34e:	55 c0       	rjmp	.+170    	; 0x3fa <Keypad_getPressedKey+0x130>
			{
				
				while(!DIO_ReadPin(row[j]));
     350:	00 00       	nop
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9e 01       	movw	r18, r28
     35a:	2c 5f       	subi	r18, 0xFC	; 252
     35c:	3f 4f       	sbci	r19, 0xFF	; 255
     35e:	82 0f       	add	r24, r18
     360:	93 1f       	adc	r25, r19
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_ReadPin>
     36a:	88 23       	and	r24, r24
     36c:	91 f3       	breq	.-28     	; 0x352 <Keypad_getPressedKey+0x88>
				switch(i)
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	88 2f       	mov	r24, r24
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	91 05       	cpc	r25, r1
     378:	b9 f0       	breq	.+46     	; 0x3a8 <Keypad_getPressedKey+0xde>
     37a:	82 30       	cpi	r24, 0x02	; 2
     37c:	91 05       	cpc	r25, r1
     37e:	31 f1       	breq	.+76     	; 0x3cc <Keypad_getPressedKey+0x102>
     380:	89 2b       	or	r24, r25
     382:	d9 f5       	brne	.+118    	; 0x3fa <Keypad_getPressedKey+0x130>
				{
					case ZERO:
						if(j==ZERO){
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	88 23       	and	r24, r24
     388:	19 f4       	brne	.+6      	; 0x390 <Keypad_getPressedKey+0xc6>
							val= ONE;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= SEVEN;
						}
						break;
     38e:	30 c0       	rjmp	.+96     	; 0x3f0 <Keypad_getPressedKey+0x126>
					case ZERO:
						if(j==ZERO){
							val= ONE;
							
						}
						else if (j==ONE)
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	19 f4       	brne	.+6      	; 0x39c <Keypad_getPressedKey+0xd2>
						{
							val= FOUR;
     396:	84 e0       	ldi	r24, 0x04	; 4
     398:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= SEVEN;
						}
						break;
     39a:	2a c0       	rjmp	.+84     	; 0x3f0 <Keypad_getPressedKey+0x126>
						}
						else if (j==ONE)
						{
							val= FOUR;
						}
						else if (j==TWO)
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	39 f5       	brne	.+78     	; 0x3f0 <Keypad_getPressedKey+0x126>
						{
							val= SEVEN;
     3a2:	87 e0       	ldi	r24, 0x07	; 7
     3a4:	8b 83       	std	Y+3, r24	; 0x03
						}
						break;
     3a6:	24 c0       	rjmp	.+72     	; 0x3f0 <Keypad_getPressedKey+0x126>
					case 1:
						if(j==ZERO){
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	88 23       	and	r24, r24
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <Keypad_getPressedKey+0xea>
							val= TWO;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= EIGHT;
						}
						break;
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <Keypad_getPressedKey+0x12a>
						break;
					case 1:
						if(j==ZERO){
							val= TWO;
						}
						else if (j==ONE)
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <Keypad_getPressedKey+0xf6>
						{
							val= FIVE;
     3ba:	85 e0       	ldi	r24, 0x05	; 5
     3bc:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= EIGHT;
						}
						break;
     3be:	1a c0       	rjmp	.+52     	; 0x3f4 <Keypad_getPressedKey+0x12a>
						}
						else if (j==ONE)
						{
							val= FIVE;
						}
						else if (j==TWO)
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	b9 f4       	brne	.+46     	; 0x3f4 <Keypad_getPressedKey+0x12a>
						{
							val= EIGHT;
     3c6:	88 e0       	ldi	r24, 0x08	; 8
     3c8:	8b 83       	std	Y+3, r24	; 0x03
						}
						break;
     3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <Keypad_getPressedKey+0x12a>
					case 2:
						if(j==ZERO){
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	88 23       	and	r24, r24
     3d0:	19 f4       	brne	.+6      	; 0x3d8 <Keypad_getPressedKey+0x10e>
							val= THREE;
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= NINE;
						}
						break;
     3d6:	10 c0       	rjmp	.+32     	; 0x3f8 <Keypad_getPressedKey+0x12e>
						break;
					case 2:
						if(j==ZERO){
							val= THREE;
						}
						else if (j==ONE)
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <Keypad_getPressedKey+0x11a>
						{
							val= SIX;
     3de:	86 e0       	ldi	r24, 0x06	; 6
     3e0:	8b 83       	std	Y+3, r24	; 0x03
						}
						else if (j==TWO)
						{
							val= NINE;
						}
						break;
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <Keypad_getPressedKey+0x12e>
						}
						else if (j==ONE)
						{
							val= SIX;
						}
						else if (j==TWO)
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	39 f4       	brne	.+14     	; 0x3f8 <Keypad_getPressedKey+0x12e>
						{
							val= NINE;
     3ea:	89 e0       	ldi	r24, 0x09	; 9
     3ec:	8b 83       	std	Y+3, r24	; 0x03
						}
						break;
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <Keypad_getPressedKey+0x12e>
						}
						else if (j==TWO)
						{
							val= SEVEN;
						}
						break;
     3f0:	00 00       	nop
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <Keypad_getPressedKey+0x130>
						}
						else if (j==TWO)
						{
							val= EIGHT;
						}
						break;
     3f4:	00 00       	nop
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <Keypad_getPressedKey+0x130>
						}
						else if (j==TWO)
						{
							val= NINE;
						}
						break;
     3f8:	00 00       	nop
		DIO_WritePin(col[ONE],SET);
		DIO_WritePin(col[TWO],SET);
		
		DIO_WritePin(col[i],RESET);/*reset one pin only*/
		
		for (j=0;j<no_row;j++)
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	8f 5f       	subi	r24, 0xFF	; 255
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	08 f4       	brcc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	95 cf       	rjmp	.-214    	; 0x332 <Keypad_getPressedKey+0x68>
{
	uint8 row[no_row]={R_0,R_1,R_2};
	uint8 col[no_col]={C_0,C_1,C_2};
	uint8 i,j;
	uint8 val =ZERO;
	for(i=0;i<no_col;i++)/*check Rows and column */
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	08 f4       	brcc	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	73 cf       	rjmp	.-282    	; 0x2fc <Keypad_getPressedKey+0x32>
						break;
				}
			}
		}
	}
	return val;
     416:	8b 81       	ldd	r24, Y+3	; 0x03
	
     418:	29 96       	adiw	r28, 0x09	; 9
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <LCD_init>:
*/



void LCD_init(uint8 mode)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	1f 92       	push	r1
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	89 83       	std	Y+1, r24	; 0x01
	
	DIO_SetPinDirection(LCD_RS,OUTPUT);/*detect direction of control pin*/
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW,OUTPUT);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_E,OUTPUT);
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	
	if(mode==EIGHT_BIT_MODE)/*detect direction of data bit*/
	{
		/*//define direction of 1st 4 bit*/
	}
	DIO_SetPinDirection(LCD_DATA_PIN4,OUTPUT);
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PIN5,OUTPUT);
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PIN6,OUTPUT);
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	86 e0       	ldi	r24, 0x06	; 6
     462:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_DATA_PIN7,OUTPUT);
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DIO_SetPinDirection>

	
	
	DIO_WritePin(LCD_E,RESET);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	
	LCD_sendCommand(mode,LCD_CMD_CLR);					/*initialization of LCD */
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
	LCD_sendCommand(mode,LCD_CMD_DISP_ON_CURSOR_BLINK);
     47e:	6e e0       	ldi	r22, 0x0E	; 14
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
	if(mode==EIGHT_BIT_MODE)
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	88 23       	and	r24, r24
     48a:	79 f0       	breq	.+30     	; 0x4aa <LCD_init+0x80>
	{
		/*define direction of 1st 4 bit*/
	}
	else if (mode==FOUR_BIT_MODE)
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	61 f4       	brne	.+24     	; 0x4aa <LCD_init+0x80>
	{
		LCD_sendCommand(mode,LCD_CMD_INIT1_4_BIT);
     492:	63 e3       	ldi	r22, 0x33	; 51
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
		LCD_sendCommand(mode,LCD_CMD_INIT2_4_BIT);
     49a:	62 e3       	ldi	r22, 0x32	; 50
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
		LCD_sendCommand(mode,LCD_CMD_4_BIT_MODE);
     4a2:	68 e2       	ldi	r22, 0x28	; 40
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
	}
	LCD_sendCommand(mode,LCD_CMD_INCREMNT_CURSER);
     4aa:	66 e0       	ldi	r22, 0x06	; 6
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
}
     4b2:	00 00       	nop
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <LCD_sendCommand>:
void LCD_sendCommand(uint8 mode,uint8 command)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	ce 55       	subi	r28, 0x5E	; 94
     4ca:	d1 09       	sbc	r29, r1
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	9e 01       	movw	r18, r28
     4d8:	23 5a       	subi	r18, 0xA3	; 163
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	f9 01       	movw	r30, r18
     4de:	80 83       	st	Z, r24
     4e0:	ce 01       	movw	r24, r28
     4e2:	82 5a       	subi	r24, 0xA2	; 162
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	fc 01       	movw	r30, r24
     4e8:	60 83       	st	Z, r22
	DIO_WritePin(LCD_RS,RESET);/*detect command mode*/
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(LCD_RW,RESET);/*write command*/
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	if (mode==EIGHT_BIT_MODE)
     4fa:	ce 01       	movw	r24, r28
     4fc:	83 5a       	subi	r24, 0xA3	; 163
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	88 23       	and	r24, r24
     506:	09 f4       	brne	.+2      	; 0x50a <LCD_sendCommand+0x4e>
     508:	17 c2       	rjmp	.+1070   	; 0x938 <__stack+0xd9>
	{
		//write in all port directly
	}
	else if(mode==FOUR_BIT_MODE)
     50a:	ce 01       	movw	r24, r28
     50c:	83 5a       	subi	r24, 0xA3	; 163
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	09 f0       	breq	.+2      	; 0x51a <LCD_sendCommand+0x5e>
     518:	0f c2       	rjmp	.+1054   	; 0x938 <__stack+0xd9>
	{
																		/*send 4 high nibble pin*/
		DIO_WritePin(LCD_DATA_PIN4,(char)((command & SET_4)>>SHIFT_4));
     51a:	ce 01       	movw	r24, r28
     51c:	82 5a       	subi	r24, 0xA2	; 162
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	fc 01       	movw	r30, r24
     522:	80 81       	ld	r24, Z
     524:	88 2f       	mov	r24, r24
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	80 71       	andi	r24, 0x10	; 16
     52a:	99 27       	eor	r25, r25
     52c:	95 95       	asr	r25
     52e:	87 95       	ror	r24
     530:	95 95       	asr	r25
     532:	87 95       	ror	r24
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	95 95       	asr	r25
     53a:	87 95       	ror	r24
     53c:	68 2f       	mov	r22, r24
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN5,(char)((command & SET_5)>>SHIFT_5));
     544:	ce 01       	movw	r24, r28
     546:	82 5a       	subi	r24, 0xA2	; 162
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	80 72       	andi	r24, 0x20	; 32
     554:	99 27       	eor	r25, r25
     556:	95 95       	asr	r25
     558:	87 95       	ror	r24
     55a:	95 95       	asr	r25
     55c:	87 95       	ror	r24
     55e:	95 95       	asr	r25
     560:	87 95       	ror	r24
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	68 2f       	mov	r22, r24
     56c:	85 e0       	ldi	r24, 0x05	; 5
     56e:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN6,(char)((command & SET_6)>>SHIFT_6));
     572:	ce 01       	movw	r24, r28
     574:	82 5a       	subi	r24, 0xA2	; 162
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	fc 01       	movw	r30, r24
     57a:	80 81       	ld	r24, Z
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	80 74       	andi	r24, 0x40	; 64
     582:	99 27       	eor	r25, r25
     584:	08 2e       	mov	r0, r24
     586:	89 2f       	mov	r24, r25
     588:	00 0c       	add	r0, r0
     58a:	88 1f       	adc	r24, r24
     58c:	99 0b       	sbc	r25, r25
     58e:	00 0c       	add	r0, r0
     590:	88 1f       	adc	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	68 2f       	mov	r22, r24
     596:	86 e0       	ldi	r24, 0x06	; 6
     598:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN7,(char)((command & SET_7)>>SHIFT_7));
     59c:	ce 01       	movw	r24, r28
     59e:	82 5a       	subi	r24, 0xA2	; 162
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	fc 01       	movw	r30, r24
     5a4:	80 81       	ld	r24, Z
     5a6:	88 1f       	adc	r24, r24
     5a8:	88 27       	eor	r24, r24
     5aa:	88 1f       	adc	r24, r24
     5ac:	68 2f       	mov	r22, r24
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
		DIO_WritePin(LCD_E,SET);	/*send latch*/
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b0 e4       	ldi	r27, 0x40	; 64
     5c4:	8d 83       	std	Y+5, r24	; 0x05
     5c6:	9e 83       	std	Y+6, r25	; 0x06
     5c8:	af 83       	std	Y+7, r26	; 0x07
     5ca:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	4a ef       	ldi	r20, 0xFA	; 250
     5d2:	54 e4       	ldi	r21, 0x44	; 68
     5d4:	6d 81       	ldd	r22, Y+5	; 0x05
     5d6:	7e 81       	ldd	r23, Y+6	; 0x06
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	8d a7       	std	Y+45, r24	; 0x2d
     5e6:	9e a7       	std	Y+46, r25	; 0x2e
     5e8:	af a7       	std	Y+47, r26	; 0x2f
     5ea:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	6d a5       	ldd	r22, Y+45	; 0x2d
     5f6:	7e a5       	ldd	r23, Y+46	; 0x2e
     5f8:	8f a5       	ldd	r24, Y+47	; 0x2f
     5fa:	98 a9       	ldd	r25, Y+48	; 0x30
     5fc:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     600:	88 23       	and	r24, r24
     602:	2c f4       	brge	.+10     	; 0x60e <LCD_sendCommand+0x152>
		__ticks = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9a ab       	std	Y+50, r25	; 0x32
     60a:	89 ab       	std	Y+49, r24	; 0x31
     60c:	3f c0       	rjmp	.+126    	; 0x68c <LCD_sendCommand+0x1d0>
	else if (__tmp > 65535)
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	3f ef       	ldi	r19, 0xFF	; 255
     612:	4f e7       	ldi	r20, 0x7F	; 127
     614:	57 e4       	ldi	r21, 0x47	; 71
     616:	6d a5       	ldd	r22, Y+45	; 0x2d
     618:	7e a5       	ldd	r23, Y+46	; 0x2e
     61a:	8f a5       	ldd	r24, Y+47	; 0x2f
     61c:	98 a9       	ldd	r25, Y+48	; 0x30
     61e:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     622:	18 16       	cp	r1, r24
     624:	4c f5       	brge	.+82     	; 0x678 <LCD_sendCommand+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e2       	ldi	r20, 0x20	; 32
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	6d 81       	ldd	r22, Y+5	; 0x05
     630:	7e 81       	ldd	r23, Y+6	; 0x06
     632:	8f 81       	ldd	r24, Y+7	; 0x07
     634:	98 85       	ldd	r25, Y+8	; 0x08
     636:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	9a ab       	std	Y+50, r25	; 0x32
     64c:	89 ab       	std	Y+49, r24	; 0x31
     64e:	0f c0       	rjmp	.+30     	; 0x66e <LCD_sendCommand+0x1b2>
     650:	88 ec       	ldi	r24, 0xC8	; 200
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	9c ab       	std	Y+52, r25	; 0x34
     656:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     658:	8b a9       	ldd	r24, Y+51	; 0x33
     65a:	9c a9       	ldd	r25, Y+52	; 0x34
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_sendCommand+0x1a0>
     660:	9c ab       	std	Y+52, r25	; 0x34
     662:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     664:	89 a9       	ldd	r24, Y+49	; 0x31
     666:	9a a9       	ldd	r25, Y+50	; 0x32
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	9a ab       	std	Y+50, r25	; 0x32
     66c:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66e:	89 a9       	ldd	r24, Y+49	; 0x31
     670:	9a a9       	ldd	r25, Y+50	; 0x32
     672:	89 2b       	or	r24, r25
     674:	69 f7       	brne	.-38     	; 0x650 <LCD_sendCommand+0x194>
     676:	14 c0       	rjmp	.+40     	; 0x6a0 <LCD_sendCommand+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     678:	6d a5       	ldd	r22, Y+45	; 0x2d
     67a:	7e a5       	ldd	r23, Y+46	; 0x2e
     67c:	8f a5       	ldd	r24, Y+47	; 0x2f
     67e:	98 a9       	ldd	r25, Y+48	; 0x30
     680:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	9a ab       	std	Y+50, r25	; 0x32
     68a:	89 ab       	std	Y+49, r24	; 0x31
     68c:	89 a9       	ldd	r24, Y+49	; 0x31
     68e:	9a a9       	ldd	r25, Y+50	; 0x32
     690:	9e ab       	std	Y+54, r25	; 0x36
     692:	8d ab       	std	Y+53, r24	; 0x35
     694:	8d a9       	ldd	r24, Y+53	; 0x35
     696:	9e a9       	ldd	r25, Y+54	; 0x36
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_sendCommand+0x1dc>
     69c:	9e ab       	std	Y+54, r25	; 0x36
     69e:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(2*ONE_MILE_SECOUND_ms);
		DIO_WritePin(LCD_E,RESET);
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a8 ec       	ldi	r26, 0xC8	; 200
     6ae:	b2 e4       	ldi	r27, 0x42	; 66
     6b0:	8d 87       	std	Y+13, r24	; 0x0d
     6b2:	9e 87       	std	Y+14, r25	; 0x0e
     6b4:	af 87       	std	Y+15, r26	; 0x0f
     6b6:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     6b8:	2b ea       	ldi	r18, 0xAB	; 171
     6ba:	3a ea       	ldi	r19, 0xAA	; 170
     6bc:	4a e2       	ldi	r20, 0x2A	; 42
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	6d 85       	ldd	r22, Y+13	; 0x0d
     6c2:	7e 85       	ldd	r23, Y+14	; 0x0e
     6c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6c6:	98 89       	ldd	r25, Y+16	; 0x10
     6c8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	89 8b       	std	Y+17, r24	; 0x11
     6d2:	9a 8b       	std	Y+18, r25	; 0x12
     6d4:	ab 8b       	std	Y+19, r26	; 0x13
     6d6:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
     6d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6da:	9e 85       	ldd	r25, Y+14	; 0x0e
     6dc:	af 85       	ldd	r26, Y+15	; 0x0f
     6de:	b8 89       	ldd	r27, Y+16	; 0x10
     6e0:	9c 01       	movw	r18, r24
     6e2:	ad 01       	movw	r20, r26
     6e4:	bc 01       	movw	r22, r24
     6e6:	cd 01       	movw	r24, r26
     6e8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__addsf3>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	8d 8b       	std	Y+21, r24	; 0x15
     6f2:	9e 8b       	std	Y+22, r25	; 0x16
     6f4:	af 8b       	std	Y+23, r26	; 0x17
     6f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e8       	ldi	r20, 0x80	; 128
     6fe:	5f e3       	ldi	r21, 0x3F	; 63
     700:	69 89       	ldd	r22, Y+17	; 0x11
     702:	7a 89       	ldd	r23, Y+18	; 0x12
     704:	8b 89       	ldd	r24, Y+19	; 0x13
     706:	9c 89       	ldd	r25, Y+20	; 0x14
     708:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     70c:	88 23       	and	r24, r24
     70e:	1c f4       	brge	.+6      	; 0x716 <LCD_sendCommand+0x25a>
		__ticks = 1;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	89 8f       	std	Y+25, r24	; 0x19
     714:	b2 c0       	rjmp	.+356    	; 0x87a <__stack+0x1b>
	else if (__tmp2 > 65535)
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	3f ef       	ldi	r19, 0xFF	; 255
     71a:	4f e7       	ldi	r20, 0x7F	; 127
     71c:	57 e4       	ldi	r21, 0x47	; 71
     71e:	6d 89       	ldd	r22, Y+21	; 0x15
     720:	7e 89       	ldd	r23, Y+22	; 0x16
     722:	8f 89       	ldd	r24, Y+23	; 0x17
     724:	98 8d       	ldd	r25, Y+24	; 0x18
     726:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     72a:	18 16       	cp	r1, r24
     72c:	0c f0       	brlt	.+2      	; 0x730 <LCD_sendCommand+0x274>
     72e:	7b c0       	rjmp	.+246    	; 0x826 <LCD_sendCommand+0x36a>
	{
		_delay_ms(__us / 1000.0);
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4a e7       	ldi	r20, 0x7A	; 122
     736:	54 e4       	ldi	r21, 0x44	; 68
     738:	6d 85       	ldd	r22, Y+13	; 0x0d
     73a:	7e 85       	ldd	r23, Y+14	; 0x0e
     73c:	8f 85       	ldd	r24, Y+15	; 0x0f
     73e:	98 89       	ldd	r25, Y+16	; 0x10
     740:	0e 94 49 18 	call	0x3092	; 0x3092 <__divsf3>
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	8a 8f       	std	Y+26, r24	; 0x1a
     74a:	9b 8f       	std	Y+27, r25	; 0x1b
     74c:	ac 8f       	std	Y+28, r26	; 0x1c
     74e:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	4a ef       	ldi	r20, 0xFA	; 250
     756:	54 e4       	ldi	r21, 0x44	; 68
     758:	6a 8d       	ldd	r22, Y+26	; 0x1a
     75a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     75c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     75e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     760:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     764:	dc 01       	movw	r26, r24
     766:	cb 01       	movw	r24, r22
     768:	8e 8f       	std	Y+30, r24	; 0x1e
     76a:	9f 8f       	std	Y+31, r25	; 0x1f
     76c:	a8 a3       	std	Y+32, r26	; 0x20
     76e:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	40 e8       	ldi	r20, 0x80	; 128
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	6e 8d       	ldd	r22, Y+30	; 0x1e
     77a:	7f 8d       	ldd	r23, Y+31	; 0x1f
     77c:	88 a1       	ldd	r24, Y+32	; 0x20
     77e:	99 a1       	ldd	r25, Y+33	; 0x21
     780:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     784:	88 23       	and	r24, r24
     786:	2c f4       	brge	.+10     	; 0x792 <LCD_sendCommand+0x2d6>
		__ticks = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9b a3       	std	Y+35, r25	; 0x23
     78e:	8a a3       	std	Y+34, r24	; 0x22
     790:	3f c0       	rjmp	.+126    	; 0x810 <LCD_sendCommand+0x354>
	else if (__tmp > 65535)
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	3f ef       	ldi	r19, 0xFF	; 255
     796:	4f e7       	ldi	r20, 0x7F	; 127
     798:	57 e4       	ldi	r21, 0x47	; 71
     79a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     79c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     79e:	88 a1       	ldd	r24, Y+32	; 0x20
     7a0:	99 a1       	ldd	r25, Y+33	; 0x21
     7a2:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     7a6:	18 16       	cp	r1, r24
     7a8:	4c f5       	brge	.+82     	; 0x7fc <LCD_sendCommand+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e2       	ldi	r20, 0x20	; 32
     7b0:	51 e4       	ldi	r21, 0x41	; 65
     7b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     7b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     7b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7ba:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	bc 01       	movw	r22, r24
     7c4:	cd 01       	movw	r24, r26
     7c6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	9b a3       	std	Y+35, r25	; 0x23
     7d0:	8a a3       	std	Y+34, r24	; 0x22
     7d2:	0f c0       	rjmp	.+30     	; 0x7f2 <LCD_sendCommand+0x336>
     7d4:	88 ec       	ldi	r24, 0xC8	; 200
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9d a3       	std	Y+37, r25	; 0x25
     7da:	8c a3       	std	Y+36, r24	; 0x24
     7dc:	8c a1       	ldd	r24, Y+36	; 0x24
     7de:	9d a1       	ldd	r25, Y+37	; 0x25
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_sendCommand+0x324>
     7e4:	9d a3       	std	Y+37, r25	; 0x25
     7e6:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e8:	8a a1       	ldd	r24, Y+34	; 0x22
     7ea:	9b a1       	ldd	r25, Y+35	; 0x23
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	9b a3       	std	Y+35, r25	; 0x23
     7f0:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f2:	8a a1       	ldd	r24, Y+34	; 0x22
     7f4:	9b a1       	ldd	r25, Y+35	; 0x23
     7f6:	89 2b       	or	r24, r25
     7f8:	69 f7       	brne	.-38     	; 0x7d4 <LCD_sendCommand+0x318>
     7fa:	3f c0       	rjmp	.+126    	; 0x87a <__stack+0x1b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fc:	6e 8d       	ldd	r22, Y+30	; 0x1e
     7fe:	7f 8d       	ldd	r23, Y+31	; 0x1f
     800:	88 a1       	ldd	r24, Y+32	; 0x20
     802:	99 a1       	ldd	r25, Y+33	; 0x21
     804:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     808:	dc 01       	movw	r26, r24
     80a:	cb 01       	movw	r24, r22
     80c:	9b a3       	std	Y+35, r25	; 0x23
     80e:	8a a3       	std	Y+34, r24	; 0x22
     810:	8a a1       	ldd	r24, Y+34	; 0x22
     812:	9b a1       	ldd	r25, Y+35	; 0x23
     814:	9f a3       	std	Y+39, r25	; 0x27
     816:	8e a3       	std	Y+38, r24	; 0x26
     818:	8e a1       	ldd	r24, Y+38	; 0x26
     81a:	9f a1       	ldd	r25, Y+39	; 0x27
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_sendCommand+0x360>
     820:	9f a3       	std	Y+39, r25	; 0x27
     822:	8e a3       	std	Y+38, r24	; 0x26
     824:	2a c0       	rjmp	.+84     	; 0x87a <__stack+0x1b>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	69 89       	ldd	r22, Y+17	; 0x11
     830:	7a 89       	ldd	r23, Y+18	; 0x12
     832:	8b 89       	ldd	r24, Y+19	; 0x13
     834:	9c 89       	ldd	r25, Y+20	; 0x14
     836:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     83a:	18 16       	cp	r1, r24
     83c:	ac f4       	brge	.+42     	; 0x868 <__stack+0x9>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     83e:	6d 89       	ldd	r22, Y+21	; 0x15
     840:	7e 89       	ldd	r23, Y+22	; 0x16
     842:	8f 89       	ldd	r24, Y+23	; 0x17
     844:	98 8d       	ldd	r25, Y+24	; 0x18
     846:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	99 a7       	std	Y+41, r25	; 0x29
     850:	88 a7       	std	Y+40, r24	; 0x28
     852:	88 a5       	ldd	r24, Y+40	; 0x28
     854:	99 a5       	ldd	r25, Y+41	; 0x29
     856:	9b a7       	std	Y+43, r25	; 0x2b
     858:	8a a7       	std	Y+42, r24	; 0x2a
     85a:	8a a5       	ldd	r24, Y+42	; 0x2a
     85c:	9b a5       	ldd	r25, Y+43	; 0x2b
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <LCD_sendCommand+0x3a2>
     862:	9b a7       	std	Y+43, r25	; 0x2b
     864:	8a a7       	std	Y+42, r24	; 0x2a
     866:	0f c0       	rjmp	.+30     	; 0x886 <__stack+0x27>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     868:	69 89       	ldd	r22, Y+17	; 0x11
     86a:	7a 89       	ldd	r23, Y+18	; 0x12
     86c:	8b 89       	ldd	r24, Y+19	; 0x13
     86e:	9c 89       	ldd	r25, Y+20	; 0x14
     870:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	89 8f       	std	Y+25, r24	; 0x19
     87a:	89 8d       	ldd	r24, Y+25	; 0x19
     87c:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     87e:	8c a5       	ldd	r24, Y+44	; 0x2c
     880:	8a 95       	dec	r24
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
     884:	8c a7       	std	Y+44, r24	; 0x2c
		_delay_us(100*ONE_MICRO_SECOUND);
		
		command=(char)((command&0x0f)<<SHIFT_4);	/*send 4 low nibble pin*/
     886:	ce 01       	movw	r24, r28
     888:	82 5a       	subi	r24, 0xA2	; 162
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	9e 01       	movw	r18, r28
     88e:	22 5a       	subi	r18, 0xA2	; 162
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	f9 01       	movw	r30, r18
     894:	20 81       	ld	r18, Z
     896:	22 95       	swap	r18
     898:	20 7f       	andi	r18, 0xF0	; 240
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
		
		DIO_WritePin(LCD_DATA_PIN4,(char)((command & SET_4)>>SHIFT_4));
     89e:	ce 01       	movw	r24, r28
     8a0:	82 5a       	subi	r24, 0xA2	; 162
     8a2:	9f 4f       	sbci	r25, 0xFF	; 255
     8a4:	fc 01       	movw	r30, r24
     8a6:	80 81       	ld	r24, Z
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	80 71       	andi	r24, 0x10	; 16
     8ae:	99 27       	eor	r25, r25
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	95 95       	asr	r25
     8b6:	87 95       	ror	r24
     8b8:	95 95       	asr	r25
     8ba:	87 95       	ror	r24
     8bc:	95 95       	asr	r25
     8be:	87 95       	ror	r24
     8c0:	68 2f       	mov	r22, r24
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN5,(char)((command & SET_5)>>SHIFT_5));
     8c8:	ce 01       	movw	r24, r28
     8ca:	82 5a       	subi	r24, 0xA2	; 162
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	80 72       	andi	r24, 0x20	; 32
     8d8:	99 27       	eor	r25, r25
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	95 95       	asr	r25
     8e0:	87 95       	ror	r24
     8e2:	95 95       	asr	r25
     8e4:	87 95       	ror	r24
     8e6:	95 95       	asr	r25
     8e8:	87 95       	ror	r24
     8ea:	95 95       	asr	r25
     8ec:	87 95       	ror	r24
     8ee:	68 2f       	mov	r22, r24
     8f0:	85 e0       	ldi	r24, 0x05	; 5
     8f2:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN6,(char)((command & SET_6)>>SHIFT_6));
     8f6:	ce 01       	movw	r24, r28
     8f8:	82 5a       	subi	r24, 0xA2	; 162
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	88 2f       	mov	r24, r24
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	80 74       	andi	r24, 0x40	; 64
     906:	99 27       	eor	r25, r25
     908:	08 2e       	mov	r0, r24
     90a:	89 2f       	mov	r24, r25
     90c:	00 0c       	add	r0, r0
     90e:	88 1f       	adc	r24, r24
     910:	99 0b       	sbc	r25, r25
     912:	00 0c       	add	r0, r0
     914:	88 1f       	adc	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	68 2f       	mov	r22, r24
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN7,(char)((command & SET_7)>>SHIFT_7));
     920:	ce 01       	movw	r24, r28
     922:	82 5a       	subi	r24, 0xA2	; 162
     924:	9f 4f       	sbci	r25, 0xFF	; 255
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	88 1f       	adc	r24, r24
     92c:	88 27       	eor	r24, r24
     92e:	88 1f       	adc	r24, r24
     930:	68 2f       	mov	r22, r24
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
	}
	DIO_WritePin(LCD_E,SET);		/*send latch*/
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a0 e0       	ldi	r26, 0x00	; 0
     946:	b0 e4       	ldi	r27, 0x40	; 64
     948:	89 87       	std	Y+9, r24	; 0x09
     94a:	9a 87       	std	Y+10, r25	; 0x0a
     94c:	ab 87       	std	Y+11, r26	; 0x0b
     94e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     950:	8e 01       	movw	r16, r28
     952:	0d 5a       	subi	r16, 0xAD	; 173
     954:	1f 4f       	sbci	r17, 0xFF	; 255
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	4a ef       	ldi	r20, 0xFA	; 250
     95c:	54 e4       	ldi	r21, 0x44	; 68
     95e:	69 85       	ldd	r22, Y+9	; 0x09
     960:	7a 85       	ldd	r23, Y+10	; 0x0a
     962:	8b 85       	ldd	r24, Y+11	; 0x0b
     964:	9c 85       	ldd	r25, Y+12	; 0x0c
     966:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	f8 01       	movw	r30, r16
     970:	80 83       	st	Z, r24
     972:	91 83       	std	Z+1, r25	; 0x01
     974:	a2 83       	std	Z+2, r26	; 0x02
     976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     978:	ce 01       	movw	r24, r28
     97a:	8d 5a       	subi	r24, 0xAD	; 173
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e8       	ldi	r20, 0x80	; 128
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	fc 01       	movw	r30, r24
     988:	60 81       	ld	r22, Z
     98a:	71 81       	ldd	r23, Z+1	; 0x01
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	4c f4       	brge	.+18     	; 0x9aa <__stack+0x14b>
		__ticks = 1;
     998:	ce 01       	movw	r24, r28
     99a:	89 5a       	subi	r24, 0xA9	; 169
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	fc 01       	movw	r30, r24
     9a4:	31 83       	std	Z+1, r19	; 0x01
     9a6:	20 83       	st	Z, r18
     9a8:	69 c0       	rjmp	.+210    	; 0xa7c <__stack+0x21d>
	else if (__tmp > 65535)
     9aa:	ce 01       	movw	r24, r28
     9ac:	8d 5a       	subi	r24, 0xAD	; 173
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	4f e7       	ldi	r20, 0x7F	; 127
     9b6:	57 e4       	ldi	r21, 0x47	; 71
     9b8:	fc 01       	movw	r30, r24
     9ba:	60 81       	ld	r22, Z
     9bc:	71 81       	ldd	r23, Z+1	; 0x01
     9be:	82 81       	ldd	r24, Z+2	; 0x02
     9c0:	93 81       	ldd	r25, Z+3	; 0x03
     9c2:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     9c6:	18 16       	cp	r1, r24
     9c8:	0c f0       	brlt	.+2      	; 0x9cc <__stack+0x16d>
     9ca:	46 c0       	rjmp	.+140    	; 0xa58 <__stack+0x1f9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e2       	ldi	r20, 0x20	; 32
     9d2:	51 e4       	ldi	r21, 0x41	; 65
     9d4:	69 85       	ldd	r22, Y+9	; 0x09
     9d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9da:	9c 85       	ldd	r25, Y+12	; 0x0c
     9dc:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	8e 01       	movw	r16, r28
     9e6:	09 5a       	subi	r16, 0xA9	; 169
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	bc 01       	movw	r22, r24
     9ec:	cd 01       	movw	r24, r26
     9ee:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	f8 01       	movw	r30, r16
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
     9fc:	24 c0       	rjmp	.+72     	; 0xa46 <__stack+0x1e7>
     9fe:	ce 01       	movw	r24, r28
     a00:	87 5a       	subi	r24, 0xA7	; 167
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	28 ec       	ldi	r18, 0xC8	; 200
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	fc 01       	movw	r30, r24
     a0a:	31 83       	std	Z+1, r19	; 0x01
     a0c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a0e:	ce 01       	movw	r24, r28
     a10:	87 5a       	subi	r24, 0xA7	; 167
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <__stack+0x1bb>
     a1e:	9e 01       	movw	r18, r28
     a20:	27 5a       	subi	r18, 0xA7	; 167
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	f9 01       	movw	r30, r18
     a26:	91 83       	std	Z+1, r25	; 0x01
     a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a2a:	ce 01       	movw	r24, r28
     a2c:	89 5a       	subi	r24, 0xA9	; 169
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	9e 01       	movw	r18, r28
     a32:	29 5a       	subi	r18, 0xA9	; 169
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	31 81       	ldd	r19, Z+1	; 0x01
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	31 09       	sbc	r19, r1
     a40:	fc 01       	movw	r30, r24
     a42:	31 83       	std	Z+1, r19	; 0x01
     a44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a46:	ce 01       	movw	r24, r28
     a48:	89 5a       	subi	r24, 0xA9	; 169
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	89 2b       	or	r24, r25
     a54:	a1 f6       	brne	.-88     	; 0x9fe <__stack+0x19f>
     a56:	2c c0       	rjmp	.+88     	; 0xab0 <__stack+0x251>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a58:	8e 01       	movw	r16, r28
     a5a:	09 5a       	subi	r16, 0xA9	; 169
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	ce 01       	movw	r24, r28
     a60:	8d 5a       	subi	r24, 0xAD	; 173
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	fc 01       	movw	r30, r24
     a66:	60 81       	ld	r22, Z
     a68:	71 81       	ldd	r23, Z+1	; 0x01
     a6a:	82 81       	ldd	r24, Z+2	; 0x02
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	f8 01       	movw	r30, r16
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	85 5a       	subi	r24, 0xA5	; 165
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	29 5a       	subi	r18, 0xA9	; 169
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	fc 01       	movw	r30, r24
     a90:	31 83       	std	Z+1, r19	; 0x01
     a92:	20 83       	st	Z, r18
     a94:	ce 01       	movw	r24, r28
     a96:	85 5a       	subi	r24, 0xA5	; 165
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	fc 01       	movw	r30, r24
     a9c:	80 81       	ld	r24, Z
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <__stack+0x241>
     aa4:	9e 01       	movw	r18, r28
     aa6:	25 5a       	subi	r18, 0xA5	; 165
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	f9 01       	movw	r30, r18
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
	_delay_ms(2*ONE_MILE_SECOUND_ms);
	DIO_WritePin(LCD_E,RESET);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a8 ec       	ldi	r26, 0xC8	; 200
     abe:	b2 e4       	ldi	r27, 0x42	; 66
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	ab 83       	std	Y+3, r26	; 0x03
     ac6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ac8:	2b ea       	ldi	r18, 0xAB	; 171
     aca:	3a ea       	ldi	r19, 0xAA	; 170
     acc:	4a e2       	ldi	r20, 0x2A	; 42
     ace:	50 e4       	ldi	r21, 0x40	; 64
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	7a 81       	ldd	r23, Y+2	; 0x02
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	8f ab       	std	Y+55, r24	; 0x37
     ae2:	98 af       	std	Y+56, r25	; 0x38
     ae4:	a9 af       	std	Y+57, r26	; 0x39
     ae6:	ba af       	std	Y+58, r27	; 0x3a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	ab 81       	ldd	r26, Y+3	; 0x03
     aee:	bc 81       	ldd	r27, Y+4	; 0x04
     af0:	9c 01       	movw	r18, r24
     af2:	ad 01       	movw	r20, r26
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__addsf3>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	8b af       	std	Y+59, r24	; 0x3b
     b02:	9c af       	std	Y+60, r25	; 0x3c
     b04:	ad af       	std	Y+61, r26	; 0x3d
     b06:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	6f a9       	ldd	r22, Y+55	; 0x37
     b12:	78 ad       	ldd	r23, Y+56	; 0x38
     b14:	89 ad       	ldd	r24, Y+57	; 0x39
     b16:	9a ad       	ldd	r25, Y+58	; 0x3a
     b18:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     b1c:	88 23       	and	r24, r24
     b1e:	1c f4       	brge	.+6      	; 0xb26 <__stack+0x2c7>
		__ticks = 1;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	8f af       	std	Y+63, r24	; 0x3f
     b24:	18 c1       	rjmp	.+560    	; 0xd56 <__stack+0x4f7>
	else if (__tmp2 > 65535)
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	4f e7       	ldi	r20, 0x7F	; 127
     b2c:	57 e4       	ldi	r21, 0x47	; 71
     b2e:	6b ad       	ldd	r22, Y+59	; 0x3b
     b30:	7c ad       	ldd	r23, Y+60	; 0x3c
     b32:	8d ad       	ldd	r24, Y+61	; 0x3d
     b34:	9e ad       	ldd	r25, Y+62	; 0x3e
     b36:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     b3a:	18 16       	cp	r1, r24
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__stack+0x2e1>
     b3e:	cd c0       	rjmp	.+410    	; 0xcda <__stack+0x47b>
	{
		_delay_ms(__us / 1000.0);
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4a e7       	ldi	r20, 0x7A	; 122
     b46:	54 e4       	ldi	r21, 0x44	; 68
     b48:	69 81       	ldd	r22, Y+1	; 0x01
     b4a:	7a 81       	ldd	r23, Y+2	; 0x02
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	0e 94 49 18 	call	0x3092	; 0x3092 <__divsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	9e 01       	movw	r18, r28
     b5a:	20 5c       	subi	r18, 0xC0	; 192
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
     b5e:	f9 01       	movw	r30, r18
     b60:	80 83       	st	Z, r24
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	a2 83       	std	Z+2, r26	; 0x02
     b66:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b68:	8e 01       	movw	r16, r28
     b6a:	0c 5b       	subi	r16, 0xBC	; 188
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	ce 01       	movw	r24, r28
     b70:	80 5c       	subi	r24, 0xC0	; 192
     b72:	9f 4f       	sbci	r25, 0xFF	; 255
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	4a ef       	ldi	r20, 0xFA	; 250
     b7a:	54 e4       	ldi	r21, 0x44	; 68
     b7c:	fc 01       	movw	r30, r24
     b7e:	60 81       	ld	r22, Z
     b80:	71 81       	ldd	r23, Z+1	; 0x01
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	f8 01       	movw	r30, r16
     b90:	80 83       	st	Z, r24
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	a2 83       	std	Z+2, r26	; 0x02
     b96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b98:	ce 01       	movw	r24, r28
     b9a:	8c 5b       	subi	r24, 0xBC	; 188
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	fc 01       	movw	r30, r24
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	4c f4       	brge	.+18     	; 0xbca <__stack+0x36b>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	88 5b       	subi	r24, 0xB8	; 184
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	6d c0       	rjmp	.+218    	; 0xca4 <__stack+0x445>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	8c 5b       	subi	r24, 0xBC	; 188
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	3f ef       	ldi	r19, 0xFF	; 255
     bd4:	4f e7       	ldi	r20, 0x7F	; 127
     bd6:	57 e4       	ldi	r21, 0x47	; 71
     bd8:	fc 01       	movw	r30, r24
     bda:	60 81       	ld	r22, Z
     bdc:	71 81       	ldd	r23, Z+1	; 0x01
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     be6:	18 16       	cp	r1, r24
     be8:	0c f0       	brlt	.+2      	; 0xbec <__stack+0x38d>
     bea:	4a c0       	rjmp	.+148    	; 0xc80 <__stack+0x421>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	ce 01       	movw	r24, r28
     bee:	80 5c       	subi	r24, 0xC0	; 192
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e2       	ldi	r20, 0x20	; 32
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	8e 01       	movw	r16, r28
     c0e:	08 5b       	subi	r16, 0xB8	; 184
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	f8 01       	movw	r30, r16
     c20:	91 83       	std	Z+1, r25	; 0x01
     c22:	80 83       	st	Z, r24
     c24:	24 c0       	rjmp	.+72     	; 0xc6e <__stack+0x40f>
     c26:	ce 01       	movw	r24, r28
     c28:	86 5b       	subi	r24, 0xB6	; 182
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	28 ec       	ldi	r18, 0xC8	; 200
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	31 83       	std	Z+1, r19	; 0x01
     c34:	20 83       	st	Z, r18
     c36:	ce 01       	movw	r24, r28
     c38:	86 5b       	subi	r24, 0xB6	; 182
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <__stack+0x3e3>
     c46:	9e 01       	movw	r18, r28
     c48:	26 5b       	subi	r18, 0xB6	; 182
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	f9 01       	movw	r30, r18
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	ce 01       	movw	r24, r28
     c54:	88 5b       	subi	r24, 0xB8	; 184
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	9e 01       	movw	r18, r28
     c5a:	28 5b       	subi	r18, 0xB8	; 184
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	21 50       	subi	r18, 0x01	; 1
     c66:	31 09       	sbc	r19, r1
     c68:	fc 01       	movw	r30, r24
     c6a:	31 83       	std	Z+1, r19	; 0x01
     c6c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	ce 01       	movw	r24, r28
     c70:	88 5b       	subi	r24, 0xB8	; 184
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	fc 01       	movw	r30, r24
     c76:	80 81       	ld	r24, Z
     c78:	91 81       	ldd	r25, Z+1	; 0x01
     c7a:	89 2b       	or	r24, r25
     c7c:	a1 f6       	brne	.-88     	; 0xc26 <__stack+0x3c7>
     c7e:	6b c0       	rjmp	.+214    	; 0xd56 <__stack+0x4f7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	8e 01       	movw	r16, r28
     c82:	08 5b       	subi	r16, 0xB8	; 184
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	ce 01       	movw	r24, r28
     c88:	8c 5b       	subi	r24, 0xBC	; 188
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	fc 01       	movw	r30, r24
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	f8 01       	movw	r30, r16
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	80 83       	st	Z, r24
     ca4:	ce 01       	movw	r24, r28
     ca6:	84 5b       	subi	r24, 0xB4	; 180
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	9e 01       	movw	r18, r28
     cac:	28 5b       	subi	r18, 0xB8	; 184
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	31 81       	ldd	r19, Z+1	; 0x01
     cb6:	fc 01       	movw	r30, r24
     cb8:	31 83       	std	Z+1, r19	; 0x01
     cba:	20 83       	st	Z, r18
     cbc:	ce 01       	movw	r24, r28
     cbe:	84 5b       	subi	r24, 0xB4	; 180
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <__stack+0x469>
     ccc:	9e 01       	movw	r18, r28
     cce:	24 5b       	subi	r18, 0xB4	; 180
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	f9 01       	movw	r30, r18
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	3e c0       	rjmp	.+124    	; 0xd56 <__stack+0x4f7>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	53 e4       	ldi	r21, 0x43	; 67
     ce2:	6f a9       	ldd	r22, Y+55	; 0x37
     ce4:	78 ad       	ldd	r23, Y+56	; 0x38
     ce6:	89 ad       	ldd	r24, Y+57	; 0x39
     ce8:	9a ad       	ldd	r25, Y+58	; 0x3a
     cea:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     cee:	18 16       	cp	r1, r24
     cf0:	4c f5       	brge	.+82     	; 0xd44 <__stack+0x4e5>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     cf2:	8e 01       	movw	r16, r28
     cf4:	02 5b       	subi	r16, 0xB2	; 178
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	6b ad       	ldd	r22, Y+59	; 0x3b
     cfa:	7c ad       	ldd	r23, Y+60	; 0x3c
     cfc:	8d ad       	ldd	r24, Y+61	; 0x3d
     cfe:	9e ad       	ldd	r25, Y+62	; 0x3e
     d00:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	f8 01       	movw	r30, r16
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	ce 01       	movw	r24, r28
     d10:	80 5b       	subi	r24, 0xB0	; 176
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	9e 01       	movw	r18, r28
     d16:	22 5b       	subi	r18, 0xB2	; 178
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	f9 01       	movw	r30, r18
     d1c:	20 81       	ld	r18, Z
     d1e:	31 81       	ldd	r19, Z+1	; 0x01
     d20:	fc 01       	movw	r30, r24
     d22:	31 83       	std	Z+1, r19	; 0x01
     d24:	20 83       	st	Z, r18
     d26:	ce 01       	movw	r24, r28
     d28:	80 5b       	subi	r24, 0xB0	; 176
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	fc 01       	movw	r30, r24
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <__stack+0x4d3>
     d36:	9e 01       	movw	r18, r28
     d38:	20 5b       	subi	r18, 0xB0	; 176
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	f9 01       	movw	r30, r18
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
	_delay_us(100*ONE_MICRO_SECOUND);
}
     d42:	1c c0       	rjmp	.+56     	; 0xd7c <__stack+0x51d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d44:	6f a9       	ldd	r22, Y+55	; 0x37
     d46:	78 ad       	ldd	r23, Y+56	; 0x38
     d48:	89 ad       	ldd	r24, Y+57	; 0x39
     d4a:	9a ad       	ldd	r25, Y+58	; 0x3a
     d4c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	8f af       	std	Y+63, r24	; 0x3f
     d56:	ce 01       	movw	r24, r28
     d58:	8e 5a       	subi	r24, 0xAE	; 174
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	2f ad       	ldd	r18, Y+63	; 0x3f
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d62:	ce 01       	movw	r24, r28
     d64:	8e 5a       	subi	r24, 0xAE	; 174
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	28 2f       	mov	r18, r24
     d6e:	2a 95       	dec	r18
     d70:	f1 f7       	brne	.-4      	; 0xd6e <__stack+0x50f>
     d72:	ce 01       	movw	r24, r28
     d74:	8e 5a       	subi	r24, 0xAE	; 174
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	00 00       	nop
     d7e:	c2 5a       	subi	r28, 0xA2	; 162
     d80:	df 4f       	sbci	r29, 0xFF	; 255
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <LCD_displayChar>:
void LCD_displayChar(uint8 mode,uint8 Data)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	ee 97       	sbiw	r28, 0x3e	; 62
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	8d af       	std	Y+61, r24	; 0x3d
     dac:	6e af       	std	Y+62, r22	; 0x3e
	DIO_WritePin(LCD_RS,SET);/*data mode*/
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	DIO_WritePin(LCD_RW,RESET);/*write only*/
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	if (mode==EIGHT_BIT_MODE)
     dbe:	8d ad       	ldd	r24, Y+61	; 0x3d
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <LCD_displayChar+0x30>
     dc4:	fc c0       	rjmp	.+504    	; 0xfbe <LCD_displayChar+0x228>
	{
		/*write in all port directly*/
	}
	else if(mode==FOUR_BIT_MODE)/*send 4 high nibble bit*/
     dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f0       	breq	.+2      	; 0xdce <LCD_displayChar+0x38>
     dcc:	f8 c0       	rjmp	.+496    	; 0xfbe <LCD_displayChar+0x228>
	{
		DIO_WritePin(LCD_DATA_PIN4,(char)((Data & SET_4)>>SHIFT_4));
     dce:	8e ad       	ldd	r24, Y+62	; 0x3e
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	80 71       	andi	r24, 0x10	; 16
     dd6:	99 27       	eor	r25, r25
     dd8:	95 95       	asr	r25
     dda:	87 95       	ror	r24
     ddc:	95 95       	asr	r25
     dde:	87 95       	ror	r24
     de0:	95 95       	asr	r25
     de2:	87 95       	ror	r24
     de4:	95 95       	asr	r25
     de6:	87 95       	ror	r24
     de8:	68 2f       	mov	r22, r24
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN5,(char)((Data & SET_5)>>SHIFT_5));
     df0:	8e ad       	ldd	r24, Y+62	; 0x3e
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	80 72       	andi	r24, 0x20	; 32
     df8:	99 27       	eor	r25, r25
     dfa:	95 95       	asr	r25
     dfc:	87 95       	ror	r24
     dfe:	95 95       	asr	r25
     e00:	87 95       	ror	r24
     e02:	95 95       	asr	r25
     e04:	87 95       	ror	r24
     e06:	95 95       	asr	r25
     e08:	87 95       	ror	r24
     e0a:	95 95       	asr	r25
     e0c:	87 95       	ror	r24
     e0e:	68 2f       	mov	r22, r24
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN6,(char)((Data & SET_6)>>SHIFT_6));
     e16:	8e ad       	ldd	r24, Y+62	; 0x3e
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	80 74       	andi	r24, 0x40	; 64
     e1e:	99 27       	eor	r25, r25
     e20:	08 2e       	mov	r0, r24
     e22:	89 2f       	mov	r24, r25
     e24:	00 0c       	add	r0, r0
     e26:	88 1f       	adc	r24, r24
     e28:	99 0b       	sbc	r25, r25
     e2a:	00 0c       	add	r0, r0
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	68 2f       	mov	r22, r24
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN7,(char)((Data & SET_7)>>SHIFT_7));
     e38:	8e ad       	ldd	r24, Y+62	; 0x3e
     e3a:	88 1f       	adc	r24, r24
     e3c:	88 27       	eor	r24, r24
     e3e:	88 1f       	adc	r24, r24
     e40:	68 2f       	mov	r22, r24
     e42:	87 e0       	ldi	r24, 0x07	; 7
     e44:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
		DIO_WritePin(LCD_E,SET);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e4       	ldi	r27, 0x40	; 64
     e58:	89 87       	std	Y+9, r24	; 0x09
     e5a:	9a 87       	std	Y+10, r25	; 0x0a
     e5c:	ab 87       	std	Y+11, r26	; 0x0b
     e5e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	4a ef       	ldi	r20, 0xFA	; 250
     e66:	54 e4       	ldi	r21, 0x44	; 68
     e68:	69 85       	ldd	r22, Y+9	; 0x09
     e6a:	7a 85       	ldd	r23, Y+10	; 0x0a
     e6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e70:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8d 87       	std	Y+13, r24	; 0x0d
     e7a:	9e 87       	std	Y+14, r25	; 0x0e
     e7c:	af 87       	std	Y+15, r26	; 0x0f
     e7e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	6d 85       	ldd	r22, Y+13	; 0x0d
     e8a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	98 89       	ldd	r25, Y+16	; 0x10
     e90:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <LCD_displayChar+0x10c>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9a 8b       	std	Y+18, r25	; 0x12
     e9e:	89 8b       	std	Y+17, r24	; 0x11
     ea0:	3f c0       	rjmp	.+126    	; 0xf20 <LCD_displayChar+0x18a>
	else if (__tmp > 65535)
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f e7       	ldi	r20, 0x7F	; 127
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	6d 85       	ldd	r22, Y+13	; 0x0d
     eac:	7e 85       	ldd	r23, Y+14	; 0x0e
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	98 89       	ldd	r25, Y+16	; 0x10
     eb2:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	4c f5       	brge	.+82     	; 0xf0c <LCD_displayChar+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e2       	ldi	r20, 0x20	; 32
     ec0:	51 e4       	ldi	r21, 0x41	; 65
     ec2:	69 85       	ldd	r22, Y+9	; 0x09
     ec4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eca:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9a 8b       	std	Y+18, r25	; 0x12
     ee0:	89 8b       	std	Y+17, r24	; 0x11
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <LCD_displayChar+0x16c>
     ee4:	88 ec       	ldi	r24, 0xC8	; 200
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <LCD_displayChar+0x15a>
     ef4:	9c 8b       	std	Y+20, r25	; 0x14
     ef6:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef8:	89 89       	ldd	r24, Y+17	; 0x11
     efa:	9a 89       	ldd	r25, Y+18	; 0x12
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	9a 8b       	std	Y+18, r25	; 0x12
     f00:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f02:	89 89       	ldd	r24, Y+17	; 0x11
     f04:	9a 89       	ldd	r25, Y+18	; 0x12
     f06:	89 2b       	or	r24, r25
     f08:	69 f7       	brne	.-38     	; 0xee4 <LCD_displayChar+0x14e>
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <LCD_displayChar+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     f0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     f10:	8f 85       	ldd	r24, Y+15	; 0x0f
     f12:	98 89       	ldd	r25, Y+16	; 0x10
     f14:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	9a 8b       	std	Y+18, r25	; 0x12
     f1e:	89 8b       	std	Y+17, r24	; 0x11
     f20:	89 89       	ldd	r24, Y+17	; 0x11
     f22:	9a 89       	ldd	r25, Y+18	; 0x12
     f24:	9e 8b       	std	Y+22, r25	; 0x16
     f26:	8d 8b       	std	Y+21, r24	; 0x15
     f28:	8d 89       	ldd	r24, Y+21	; 0x15
     f2a:	9e 89       	ldd	r25, Y+22	; 0x16
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <LCD_displayChar+0x196>
     f30:	9e 8b       	std	Y+22, r25	; 0x16
     f32:	8d 8b       	std	Y+21, r24	; 0x15
		_delay_ms(2*ONE_MILE_SECOUND_ms);
		DIO_WritePin(LCD_E,RESET);
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
	
		
		Data=(char)((Data&0x0f)<<SHIFT_4);
     f3c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f3e:	82 95       	swap	r24
     f40:	80 7f       	andi	r24, 0xF0	; 240
     f42:	8e af       	std	Y+62, r24	; 0x3e
																	/*send low nibble bit*/										
		DIO_WritePin(LCD_DATA_PIN4,(char)((Data & SET_4)>>SHIFT_4));
     f44:	8e ad       	ldd	r24, Y+62	; 0x3e
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	80 71       	andi	r24, 0x10	; 16
     f4c:	99 27       	eor	r25, r25
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	95 95       	asr	r25
     f58:	87 95       	ror	r24
     f5a:	95 95       	asr	r25
     f5c:	87 95       	ror	r24
     f5e:	68 2f       	mov	r22, r24
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN5,(char)((Data & SET_5)>>SHIFT_5));
     f66:	8e ad       	ldd	r24, Y+62	; 0x3e
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	80 72       	andi	r24, 0x20	; 32
     f6e:	99 27       	eor	r25, r25
     f70:	95 95       	asr	r25
     f72:	87 95       	ror	r24
     f74:	95 95       	asr	r25
     f76:	87 95       	ror	r24
     f78:	95 95       	asr	r25
     f7a:	87 95       	ror	r24
     f7c:	95 95       	asr	r25
     f7e:	87 95       	ror	r24
     f80:	95 95       	asr	r25
     f82:	87 95       	ror	r24
     f84:	68 2f       	mov	r22, r24
     f86:	85 e0       	ldi	r24, 0x05	; 5
     f88:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN6,(char)((Data & SET_6)>>SHIFT_6));
     f8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 74       	andi	r24, 0x40	; 64
     f94:	99 27       	eor	r25, r25
     f96:	08 2e       	mov	r0, r24
     f98:	89 2f       	mov	r24, r25
     f9a:	00 0c       	add	r0, r0
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 0b       	sbc	r25, r25
     fa0:	00 0c       	add	r0, r0
     fa2:	88 1f       	adc	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	68 2f       	mov	r22, r24
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		DIO_WritePin(LCD_DATA_PIN7,(char)((Data & SET_7)>>SHIFT_7));
     fae:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb0:	88 1f       	adc	r24, r24
     fb2:	88 27       	eor	r24, r24
     fb4:	88 1f       	adc	r24, r24
     fb6:	68 2f       	mov	r22, r24
     fb8:	87 e0       	ldi	r24, 0x07	; 7
     fba:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
		
	}
	DIO_WritePin(LCD_E,SET); /*latch*/
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e4       	ldi	r27, 0x40	; 64
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	af 83       	std	Y+7, r26	; 0x07
     fd4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a ef       	ldi	r20, 0xFA	; 250
     fdc:	54 e4       	ldi	r21, 0x44	; 68
     fde:	6d 81       	ldd	r22, Y+5	; 0x05
     fe0:	7e 81       	ldd	r23, Y+6	; 0x06
     fe2:	8f 81       	ldd	r24, Y+7	; 0x07
     fe4:	98 85       	ldd	r25, Y+8	; 0x08
     fe6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8b ab       	std	Y+51, r24	; 0x33
     ff0:	9c ab       	std	Y+52, r25	; 0x34
     ff2:	ad ab       	std	Y+53, r26	; 0x35
     ff4:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	6b a9       	ldd	r22, Y+51	; 0x33
    1000:	7c a9       	ldd	r23, Y+52	; 0x34
    1002:	8d a9       	ldd	r24, Y+53	; 0x35
    1004:	9e a9       	ldd	r25, Y+54	; 0x36
    1006:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <LCD_displayChar+0x282>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	98 af       	std	Y+56, r25	; 0x38
    1014:	8f ab       	std	Y+55, r24	; 0x37
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <LCD_displayChar+0x300>
	else if (__tmp > 65535)
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	57 e4       	ldi	r21, 0x47	; 71
    1020:	6b a9       	ldd	r22, Y+51	; 0x33
    1022:	7c a9       	ldd	r23, Y+52	; 0x34
    1024:	8d a9       	ldd	r24, Y+53	; 0x35
    1026:	9e a9       	ldd	r25, Y+54	; 0x36
    1028:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <LCD_displayChar+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e2       	ldi	r20, 0x20	; 32
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	6d 81       	ldd	r22, Y+5	; 0x05
    103a:	7e 81       	ldd	r23, Y+6	; 0x06
    103c:	8f 81       	ldd	r24, Y+7	; 0x07
    103e:	98 85       	ldd	r25, Y+8	; 0x08
    1040:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	98 af       	std	Y+56, r25	; 0x38
    1056:	8f ab       	std	Y+55, r24	; 0x37
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <LCD_displayChar+0x2e2>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9a af       	std	Y+58, r25	; 0x3a
    1060:	89 af       	std	Y+57, r24	; 0x39
    1062:	89 ad       	ldd	r24, Y+57	; 0x39
    1064:	9a ad       	ldd	r25, Y+58	; 0x3a
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <LCD_displayChar+0x2d0>
    106a:	9a af       	std	Y+58, r25	; 0x3a
    106c:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8f a9       	ldd	r24, Y+55	; 0x37
    1070:	98 ad       	ldd	r25, Y+56	; 0x38
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	98 af       	std	Y+56, r25	; 0x38
    1076:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8f a9       	ldd	r24, Y+55	; 0x37
    107a:	98 ad       	ldd	r25, Y+56	; 0x38
    107c:	89 2b       	or	r24, r25
    107e:	69 f7       	brne	.-38     	; 0x105a <LCD_displayChar+0x2c4>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <LCD_displayChar+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6b a9       	ldd	r22, Y+51	; 0x33
    1084:	7c a9       	ldd	r23, Y+52	; 0x34
    1086:	8d a9       	ldd	r24, Y+53	; 0x35
    1088:	9e a9       	ldd	r25, Y+54	; 0x36
    108a:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	98 af       	std	Y+56, r25	; 0x38
    1094:	8f ab       	std	Y+55, r24	; 0x37
    1096:	8f a9       	ldd	r24, Y+55	; 0x37
    1098:	98 ad       	ldd	r25, Y+56	; 0x38
    109a:	9c af       	std	Y+60, r25	; 0x3c
    109c:	8b af       	std	Y+59, r24	; 0x3b
    109e:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <LCD_displayChar+0x30c>
    10a6:	9c af       	std	Y+60, r25	; 0x3c
    10a8:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(2*ONE_MILE_SECOUND_ms);
	DIO_WritePin(LCD_E,RESET);
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	0e 94 33 14 	call	0x2866	; 0x2866 <DIO_WritePin>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a8 ec       	ldi	r26, 0xC8	; 200
    10b8:	b2 e4       	ldi	r27, 0x42	; 66
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	ab 83       	std	Y+3, r26	; 0x03
    10c0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    10c2:	2b ea       	ldi	r18, 0xAB	; 171
    10c4:	3a ea       	ldi	r19, 0xAA	; 170
    10c6:	4a e2       	ldi	r20, 0x2A	; 42
    10c8:	50 e4       	ldi	r21, 0x40	; 64
    10ca:	69 81       	ldd	r22, Y+1	; 0x01
    10cc:	7a 81       	ldd	r23, Y+2	; 0x02
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	8f 8b       	std	Y+23, r24	; 0x17
    10dc:	98 8f       	std	Y+24, r25	; 0x18
    10de:	a9 8f       	std	Y+25, r26	; 0x19
    10e0:	ba 8f       	std	Y+26, r27	; 0x1a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	ab 81       	ldd	r26, Y+3	; 0x03
    10e8:	bc 81       	ldd	r27, Y+4	; 0x04
    10ea:	9c 01       	movw	r18, r24
    10ec:	ad 01       	movw	r20, r26
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__addsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	8b 8f       	std	Y+27, r24	; 0x1b
    10fc:	9c 8f       	std	Y+28, r25	; 0x1c
    10fe:	ad 8f       	std	Y+29, r26	; 0x1d
    1100:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	6f 89       	ldd	r22, Y+23	; 0x17
    110c:	78 8d       	ldd	r23, Y+24	; 0x18
    110e:	89 8d       	ldd	r24, Y+25	; 0x19
    1110:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1112:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1116:	88 23       	and	r24, r24
    1118:	1c f4       	brge	.+6      	; 0x1120 <LCD_displayChar+0x38a>
		__ticks = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	8f 8f       	std	Y+31, r24	; 0x1f
    111e:	b2 c0       	rjmp	.+356    	; 0x1284 <LCD_displayChar+0x4ee>
	else if (__tmp2 > 65535)
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	6b 8d       	ldd	r22, Y+27	; 0x1b
    112a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    112c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1130:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <LCD_displayChar+0x3a4>
    1138:	7b c0       	rjmp	.+246    	; 0x1230 <LCD_displayChar+0x49a>
	{
		_delay_ms(__us / 1000.0);
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	4a e7       	ldi	r20, 0x7A	; 122
    1140:	54 e4       	ldi	r21, 0x44	; 68
    1142:	69 81       	ldd	r22, Y+1	; 0x01
    1144:	7a 81       	ldd	r23, Y+2	; 0x02
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	0e 94 49 18 	call	0x3092	; 0x3092 <__divsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	88 a3       	std	Y+32, r24	; 0x20
    1154:	99 a3       	std	Y+33, r25	; 0x21
    1156:	aa a3       	std	Y+34, r26	; 0x22
    1158:	bb a3       	std	Y+35, r27	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a ef       	ldi	r20, 0xFA	; 250
    1160:	54 e4       	ldi	r21, 0x44	; 68
    1162:	68 a1       	ldd	r22, Y+32	; 0x20
    1164:	79 a1       	ldd	r23, Y+33	; 0x21
    1166:	8a a1       	ldd	r24, Y+34	; 0x22
    1168:	9b a1       	ldd	r25, Y+35	; 0x23
    116a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8c a3       	std	Y+36, r24	; 0x24
    1174:	9d a3       	std	Y+37, r25	; 0x25
    1176:	ae a3       	std	Y+38, r26	; 0x26
    1178:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	6c a1       	ldd	r22, Y+36	; 0x24
    1184:	7d a1       	ldd	r23, Y+37	; 0x25
    1186:	8e a1       	ldd	r24, Y+38	; 0x26
    1188:	9f a1       	ldd	r25, Y+39	; 0x27
    118a:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <LCD_displayChar+0x406>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	99 a7       	std	Y+41, r25	; 0x29
    1198:	88 a7       	std	Y+40, r24	; 0x28
    119a:	3f c0       	rjmp	.+126    	; 0x121a <LCD_displayChar+0x484>
	else if (__tmp > 65535)
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	6c a1       	ldd	r22, Y+36	; 0x24
    11a6:	7d a1       	ldd	r23, Y+37	; 0x25
    11a8:	8e a1       	ldd	r24, Y+38	; 0x26
    11aa:	9f a1       	ldd	r25, Y+39	; 0x27
    11ac:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <LCD_displayChar+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	68 a1       	ldd	r22, Y+32	; 0x20
    11be:	79 a1       	ldd	r23, Y+33	; 0x21
    11c0:	8a a1       	ldd	r24, Y+34	; 0x22
    11c2:	9b a1       	ldd	r25, Y+35	; 0x23
    11c4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	99 a7       	std	Y+41, r25	; 0x29
    11da:	88 a7       	std	Y+40, r24	; 0x28
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <LCD_displayChar+0x466>
    11de:	88 ec       	ldi	r24, 0xC8	; 200
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9b a7       	std	Y+43, r25	; 0x2b
    11e4:	8a a7       	std	Y+42, r24	; 0x2a
    11e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    11e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <LCD_displayChar+0x454>
    11ee:	9b a7       	std	Y+43, r25	; 0x2b
    11f0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	88 a5       	ldd	r24, Y+40	; 0x28
    11f4:	99 a5       	ldd	r25, Y+41	; 0x29
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	99 a7       	std	Y+41, r25	; 0x29
    11fa:	88 a7       	std	Y+40, r24	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	88 a5       	ldd	r24, Y+40	; 0x28
    11fe:	99 a5       	ldd	r25, Y+41	; 0x29
    1200:	89 2b       	or	r24, r25
    1202:	69 f7       	brne	.-38     	; 0x11de <LCD_displayChar+0x448>
    1204:	3f c0       	rjmp	.+126    	; 0x1284 <LCD_displayChar+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6c a1       	ldd	r22, Y+36	; 0x24
    1208:	7d a1       	ldd	r23, Y+37	; 0x25
    120a:	8e a1       	ldd	r24, Y+38	; 0x26
    120c:	9f a1       	ldd	r25, Y+39	; 0x27
    120e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	99 a7       	std	Y+41, r25	; 0x29
    1218:	88 a7       	std	Y+40, r24	; 0x28
    121a:	88 a5       	ldd	r24, Y+40	; 0x28
    121c:	99 a5       	ldd	r25, Y+41	; 0x29
    121e:	9d a7       	std	Y+45, r25	; 0x2d
    1220:	8c a7       	std	Y+44, r24	; 0x2c
    1222:	8c a5       	ldd	r24, Y+44	; 0x2c
    1224:	9d a5       	ldd	r25, Y+45	; 0x2d
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <LCD_displayChar+0x490>
    122a:	9d a7       	std	Y+45, r25	; 0x2d
    122c:	8c a7       	std	Y+44, r24	; 0x2c
    122e:	2a c0       	rjmp	.+84     	; 0x1284 <LCD_displayChar+0x4ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	53 e4       	ldi	r21, 0x43	; 67
    1238:	6f 89       	ldd	r22, Y+23	; 0x17
    123a:	78 8d       	ldd	r23, Y+24	; 0x18
    123c:	89 8d       	ldd	r24, Y+25	; 0x19
    123e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1240:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1244:	18 16       	cp	r1, r24
    1246:	ac f4       	brge	.+42     	; 0x1272 <LCD_displayChar+0x4dc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1248:	6b 8d       	ldd	r22, Y+27	; 0x1b
    124a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    124c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1250:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9f a7       	std	Y+47, r25	; 0x2f
    125a:	8e a7       	std	Y+46, r24	; 0x2e
    125c:	8e a5       	ldd	r24, Y+46	; 0x2e
    125e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1260:	99 ab       	std	Y+49, r25	; 0x31
    1262:	88 ab       	std	Y+48, r24	; 0x30
    1264:	88 a9       	ldd	r24, Y+48	; 0x30
    1266:	99 a9       	ldd	r25, Y+49	; 0x31
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <LCD_displayChar+0x4d2>
    126c:	99 ab       	std	Y+49, r25	; 0x31
    126e:	88 ab       	std	Y+48, r24	; 0x30
	_delay_us(100*ONE_MICRO_SECOUND);
}
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <LCD_displayChar+0x4fa>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1272:	6f 89       	ldd	r22, Y+23	; 0x17
    1274:	78 8d       	ldd	r23, Y+24	; 0x18
    1276:	89 8d       	ldd	r24, Y+25	; 0x19
    1278:	9a 8d       	ldd	r25, Y+26	; 0x1a
    127a:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	8f 8f       	std	Y+31, r24	; 0x1f
    1284:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1286:	8a ab       	std	Y+50, r24	; 0x32
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1288:	8a a9       	ldd	r24, Y+50	; 0x32
    128a:	8a 95       	dec	r24
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_displayChar+0x4f4>
    128e:	8a ab       	std	Y+50, r24	; 0x32
    1290:	00 00       	nop
    1292:	ee 96       	adiw	r28, 0x3e	; 62
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <LCD_displayString>:
void LCD_displayString(uint8 mode,uint8 str[])
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <LCD_displayString+0x6>
    12aa:	1f 92       	push	r1
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	7b 83       	std	Y+3, r23	; 0x03
    12b4:	6a 83       	std	Y+2, r22	; 0x02
	while (*str!=0)		/*send string until find NULL*/
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <LCD_displayString+0x2e>
	{	
		LCD_displayChar(mode,*str);
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	fc 01       	movw	r30, r24
    12be:	80 81       	ld	r24, Z
    12c0:	68 2f       	mov	r22, r24
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_displayChar>
		str++;
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	9b 83       	std	Y+3, r25	; 0x03
    12d0:	8a 83       	std	Y+2, r24	; 0x02
	DIO_WritePin(LCD_E,RESET);
	_delay_us(100*ONE_MICRO_SECOUND);
}
void LCD_displayString(uint8 mode,uint8 str[])
{
	while (*str!=0)		/*send string until find NULL*/
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 81       	ld	r24, Z
    12da:	88 23       	and	r24, r24
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <LCD_displayString+0x14>
	{	
		LCD_displayChar(mode,*str);
		str++;
	}
	
}
    12de:	00 00       	nop
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <LCD_gotoRowColumn>:
void LCD_gotoRowColumn(uint8 mode,uint8 Row,uint8 Column)/*row=LCD_CMD_1ST_LINE or LCD_CMD_2ND_LINE*/
{
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <LCD_gotoRowColumn+0x6>
    12f2:	1f 92       	push	r1
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	6a 83       	std	Y+2, r22	; 0x02
    12fc:	4b 83       	std	Y+3, r20	; 0x03
	
	LCD_sendCommand(mode,Row+Column);
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	89 0f       	add	r24, r25
    1304:	68 2f       	mov	r22, r24
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
	
}
    130c:	00 00       	nop
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 mode,uint8 *str,uint8 Row,uint8 Column)/*row=LCD_CMD_1ST_LINE or LCD_CMD_2ND_LINE*/
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	00 d0       	rcall	.+0      	; 0x1320 <LCD_displayStringRowColumn+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <LCD_displayStringRowColumn+0x8>
    1322:	1f 92       	push	r1
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	7b 83       	std	Y+3, r23	; 0x03
    132c:	6a 83       	std	Y+2, r22	; 0x02
    132e:	4c 83       	std	Y+4, r20	; 0x04
    1330:	2d 83       	std	Y+5, r18	; 0x05
	LCD_gotoRowColumn(mode,Row,Column);
    1332:	4d 81       	ldd	r20, Y+5	; 0x05
    1334:	6c 81       	ldd	r22, Y+4	; 0x04
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	0e 94 76 09 	call	0x12ec	; 0x12ec <LCD_gotoRowColumn>
	LCD_displayString(mode,str);
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	bc 01       	movw	r22, r24
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_displayString>
}
    1348:	00 00       	nop
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <LCD_clear>:
void LCD_clear(uint8 mode)
{
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	1f 92       	push	r1
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(mode,LCD_CMD_CLR);
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
}
    136e:	00 00       	nop
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <DRow_Custom_char>:

void DRow_Custom_char(uint8 mode,uint8 * str,uint8 num_of_char)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <DRow_Custom_char+0x6>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DRow_Custom_char+0x8>
    1380:	1f 92       	push	r1
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	7c 83       	std	Y+4, r23	; 0x04
    138a:	6b 83       	std	Y+3, r22	; 0x03
    138c:	4d 83       	std	Y+5, r20	; 0x05
	uint8 i;
	LCD_sendCommand(mode,(LCD_CMD_CGRAM_ADDRESS+EIGHT*num_of_char));
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	08 96       	adiw	r24, 0x08	; 8
    1396:	88 0f       	add	r24, r24
    1398:	88 0f       	add	r24, r24
    139a:	88 0f       	add	r24, r24
    139c:	68 2f       	mov	r22, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_sendCommand>
	for (i=0;i<8;i++)
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	10 c0       	rjmp	.+32     	; 0x13c8 <DRow_Custom_char+0x50>
	{
		LCD_displayChar(mode,str[i]);
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	2b 81       	ldd	r18, Y+3	; 0x03
    13b0:	3c 81       	ldd	r19, Y+4	; 0x04
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	fc 01       	movw	r30, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	68 2f       	mov	r22, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_displayChar>

void DRow_Custom_char(uint8 mode,uint8 * str,uint8 num_of_char)
{
	uint8 i;
	LCD_sendCommand(mode,(LCD_CMD_CGRAM_ADDRESS+EIGHT*num_of_char));
	for (i=0;i<8;i++)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	68 f3       	brcs	.-38     	; 0x13a8 <DRow_Custom_char+0x30>
	{
		LCD_displayChar(mode,str[i]);
	}
}
    13ce:	00 00       	nop
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <Disp_Custom_char>:
void Disp_Custom_char(uint8 mode,uint8 Row,uint8 Column,uint8 num_of_char)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <Disp_Custom_char+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <Disp_Custom_char+0x8>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	6a 83       	std	Y+2, r22	; 0x02
    13f0:	4b 83       	std	Y+3, r20	; 0x03
    13f2:	2c 83       	std	Y+4, r18	; 0x04
	LCD_gotoRowColumn(mode,Row,Column);
    13f4:	4b 81       	ldd	r20, Y+3	; 0x03
    13f6:	6a 81       	ldd	r22, Y+2	; 0x02
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	0e 94 76 09 	call	0x12ec	; 0x12ec <LCD_gotoRowColumn>
	LCD_displayChar(mode,num_of_char);
    13fe:	6c 81       	ldd	r22, Y+4	; 0x04
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_displayChar>
}
    1406:	00 00       	nop
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <HAPPY>:

void HAPPY(uint8 mode)
{
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	c1 54       	subi	r28, 0x41	; 65
    1420:	d1 09       	sbc	r29, r1
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	9e 01       	movw	r18, r28
    142e:	2f 5b       	subi	r18, 0xBF	; 191
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	f9 01       	movw	r30, r18
    1434:	80 83       	st	Z, r24
	const uint8 Emotion0[8]={3,4,8,16,17,18,16,16};
    1436:	28 e0       	ldi	r18, 0x08	; 8
    1438:	e0 e6       	ldi	r30, 0x60	; 96
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	dc 01       	movw	r26, r24
    1442:	01 90       	ld	r0, Z+
    1444:	0d 92       	st	X+, r0
    1446:	2a 95       	dec	r18
    1448:	e1 f7       	brne	.-8      	; 0x1442 <HAPPY+0x2c>
	const uint8 Emotion1[8]={31,0,0,0,0,16,0,0};
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	e8 e6       	ldi	r30, 0x68	; 104
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	de 01       	movw	r26, r28
    1452:	19 96       	adiw	r26, 0x09	; 9
    1454:	01 90       	ld	r0, Z+
    1456:	0d 92       	st	X+, r0
    1458:	8a 95       	dec	r24
    145a:	e1 f7       	brne	.-8      	; 0x1454 <HAPPY+0x3e>
	const uint8 Emotion2[8]={31,0,0,0,0,1,0,0};
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	e0 e7       	ldi	r30, 0x70	; 112
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	de 01       	movw	r26, r28
    1464:	51 96       	adiw	r26, 0x11	; 17
    1466:	01 90       	ld	r0, Z+
    1468:	0d 92       	st	X+, r0
    146a:	8a 95       	dec	r24
    146c:	e1 f7       	brne	.-8      	; 0x1466 <HAPPY+0x50>
	const uint8 Emotion3[8]={24,4,2,1,17,9,1,1};
    146e:	88 e0       	ldi	r24, 0x08	; 8
    1470:	e8 e7       	ldi	r30, 0x78	; 120
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	de 01       	movw	r26, r28
    1476:	59 96       	adiw	r26, 0x19	; 25
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	8a 95       	dec	r24
    147e:	e1 f7       	brne	.-8      	; 0x1478 <HAPPY+0x62>
	const uint8 Emotion4[8]={16,16,16,16,16,8,4,3};
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	e0 e8       	ldi	r30, 0x80	; 128
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	de 01       	movw	r26, r28
    1488:	91 96       	adiw	r26, 0x21	; 33
    148a:	01 90       	ld	r0, Z+
    148c:	0d 92       	st	X+, r0
    148e:	8a 95       	dec	r24
    1490:	e1 f7       	brne	.-8      	; 0x148a <HAPPY+0x74>
	const uint8 Emotion5[8]={0,0,8,4,3,0,0,31};
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	e8 e8       	ldi	r30, 0x88	; 136
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	de 01       	movw	r26, r28
    149a:	99 96       	adiw	r26, 0x29	; 41
    149c:	01 90       	ld	r0, Z+
    149e:	0d 92       	st	X+, r0
    14a0:	8a 95       	dec	r24
    14a2:	e1 f7       	brne	.-8      	; 0x149c <HAPPY+0x86>
	const uint8 Emotion6[8]={0,0,0,2,4,24,0,31};
    14a4:	88 e0       	ldi	r24, 0x08	; 8
    14a6:	e0 e9       	ldi	r30, 0x90	; 144
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	de 01       	movw	r26, r28
    14ac:	d1 96       	adiw	r26, 0x31	; 49
    14ae:	01 90       	ld	r0, Z+
    14b0:	0d 92       	st	X+, r0
    14b2:	8a 95       	dec	r24
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <HAPPY+0x98>
	const uint8 Emotion7[8]={1,1,1,1,1,2,4,24};
    14b6:	88 e0       	ldi	r24, 0x08	; 8
    14b8:	e8 e9       	ldi	r30, 0x98	; 152
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	de 01       	movw	r26, r28
    14be:	d9 96       	adiw	r26, 0x39	; 57
    14c0:	01 90       	ld	r0, Z+
    14c2:	0d 92       	st	X+, r0
    14c4:	8a 95       	dec	r24
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <HAPPY+0xaa>
	DRow_Custom_char(mode,Emotion0,ZERO);
    14c8:	ce 01       	movw	r24, r28
    14ca:	8f 5b       	subi	r24, 0xBF	; 191
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	9e 01       	movw	r18, r28
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	b9 01       	movw	r22, r18
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion1,ONE);
    14e0:	9e 01       	movw	r18, r28
    14e2:	27 5f       	subi	r18, 0xF7	; 247
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	ce 01       	movw	r24, r28
    14e8:	8f 5b       	subi	r24, 0xBF	; 191
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	b9 01       	movw	r22, r18
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion2,TWO);
    14f8:	9e 01       	movw	r18, r28
    14fa:	2f 5e       	subi	r18, 0xEF	; 239
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	ce 01       	movw	r24, r28
    1500:	8f 5b       	subi	r24, 0xBF	; 191
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	42 e0       	ldi	r20, 0x02	; 2
    1506:	b9 01       	movw	r22, r18
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion3,THREE);
    1510:	9e 01       	movw	r18, r28
    1512:	27 5e       	subi	r18, 0xE7	; 231
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	ce 01       	movw	r24, r28
    1518:	8f 5b       	subi	r24, 0xBF	; 191
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	43 e0       	ldi	r20, 0x03	; 3
    151e:	b9 01       	movw	r22, r18
    1520:	fc 01       	movw	r30, r24
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion4,FOUR);
    1528:	9e 01       	movw	r18, r28
    152a:	2f 5d       	subi	r18, 0xDF	; 223
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	ce 01       	movw	r24, r28
    1530:	8f 5b       	subi	r24, 0xBF	; 191
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	44 e0       	ldi	r20, 0x04	; 4
    1536:	b9 01       	movw	r22, r18
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion5,FIVE);
    1540:	9e 01       	movw	r18, r28
    1542:	27 5d       	subi	r18, 0xD7	; 215
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	ce 01       	movw	r24, r28
    1548:	8f 5b       	subi	r24, 0xBF	; 191
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	45 e0       	ldi	r20, 0x05	; 5
    154e:	b9 01       	movw	r22, r18
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion6,SIX);
    1558:	9e 01       	movw	r18, r28
    155a:	2f 5c       	subi	r18, 0xCF	; 207
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	ce 01       	movw	r24, r28
    1560:	8f 5b       	subi	r24, 0xBF	; 191
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	46 e0       	ldi	r20, 0x06	; 6
    1566:	b9 01       	movw	r22, r18
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion7,SEVEN);
    1570:	9e 01       	movw	r18, r28
    1572:	27 5c       	subi	r18, 0xC7	; 199
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	ce 01       	movw	r24, r28
    1578:	8f 5b       	subi	r24, 0xBF	; 191
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	47 e0       	ldi	r20, 0x07	; 7
    157e:	b9 01       	movw	r22, r18
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
}
    1588:	00 00       	nop
    158a:	cf 5b       	subi	r28, 0xBF	; 191
    158c:	df 4f       	sbci	r29, 0xFF	; 255
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <DISP_happy>:
void DISP_happy(uint8 mode)
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	2f 97       	sbiw	r28, 0x0f	; 15
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	8f 87       	std	Y+15, r24	; 0x0f
	HAPPY(mode);
    15b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HAPPY>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 ea       	ldi	r26, 0xA0	; 160
    15c0:	b0 e4       	ldi	r27, 0x40	; 64
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	ab 83       	std	Y+3, r26	; 0x03
    15c8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	69 81       	ldd	r22, Y+1	; 0x01
    15d4:	7a 81       	ldd	r23, Y+2	; 0x02
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	af 83       	std	Y+7, r26	; 0x07
    15e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	6d 81       	ldd	r22, Y+5	; 0x05
    15f4:	7e 81       	ldd	r23, Y+6	; 0x06
    15f6:	8f 81       	ldd	r24, Y+7	; 0x07
    15f8:	98 85       	ldd	r25, Y+8	; 0x08
    15fa:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <DISP_happy+0x6e>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9a 87       	std	Y+10, r25	; 0x0a
    1608:	89 87       	std	Y+9, r24	; 0x09
    160a:	3f c0       	rjmp	.+126    	; 0x168a <DISP_happy+0xec>
	else if (__tmp > 65535)
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	6d 81       	ldd	r22, Y+5	; 0x05
    1616:	7e 81       	ldd	r23, Y+6	; 0x06
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	98 85       	ldd	r25, Y+8	; 0x08
    161c:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <DISP_happy+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	69 81       	ldd	r22, Y+1	; 0x01
    162e:	7a 81       	ldd	r23, Y+2	; 0x02
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9a 87       	std	Y+10, r25	; 0x0a
    164a:	89 87       	std	Y+9, r24	; 0x09
    164c:	0f c0       	rjmp	.+30     	; 0x166c <DISP_happy+0xce>
    164e:	88 ec       	ldi	r24, 0xC8	; 200
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9c 87       	std	Y+12, r25	; 0x0c
    1654:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1656:	8b 85       	ldd	r24, Y+11	; 0x0b
    1658:	9c 85       	ldd	r25, Y+12	; 0x0c
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <DISP_happy+0xbc>
    165e:	9c 87       	std	Y+12, r25	; 0x0c
    1660:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9a 87       	std	Y+10, r25	; 0x0a
    166a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	89 2b       	or	r24, r25
    1672:	69 f7       	brne	.-38     	; 0x164e <DISP_happy+0xb0>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <DISP_happy+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	6d 81       	ldd	r22, Y+5	; 0x05
    1678:	7e 81       	ldd	r23, Y+6	; 0x06
    167a:	8f 81       	ldd	r24, Y+7	; 0x07
    167c:	98 85       	ldd	r25, Y+8	; 0x08
    167e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9a 87       	std	Y+10, r25	; 0x0a
    1688:	89 87       	std	Y+9, r24	; 0x09
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	9e 87       	std	Y+14, r25	; 0x0e
    1690:	8d 87       	std	Y+13, r24	; 0x0d
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <DISP_happy+0xf8>
    169a:	9e 87       	std	Y+14, r25	; 0x0e
    169c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,SIX,ZERO);
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	46 e0       	ldi	r20, 0x06	; 6
    16a2:	60 e8       	ldi	r22, 0x80	; 128
    16a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,SEVEN,ONE);
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	47 e0       	ldi	r20, 0x07	; 7
    16ae:	60 e8       	ldi	r22, 0x80	; 128
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,EIGHT,TWO);
    16b6:	22 e0       	ldi	r18, 0x02	; 2
    16b8:	48 e0       	ldi	r20, 0x08	; 8
    16ba:	60 e8       	ldi	r22, 0x80	; 128
    16bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16be:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,NINE,THREE);
    16c2:	23 e0       	ldi	r18, 0x03	; 3
    16c4:	49 e0       	ldi	r20, 0x09	; 9
    16c6:	60 e8       	ldi	r22, 0x80	; 128
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,SIX,FOUR);
    16ce:	24 e0       	ldi	r18, 0x04	; 4
    16d0:	46 e0       	ldi	r20, 0x06	; 6
    16d2:	60 ec       	ldi	r22, 0xC0	; 192
    16d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,SEVEN,FIVE);
    16da:	25 e0       	ldi	r18, 0x05	; 5
    16dc:	47 e0       	ldi	r20, 0x07	; 7
    16de:	60 ec       	ldi	r22, 0xC0	; 192
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,EIGHT,SIX);
    16e6:	26 e0       	ldi	r18, 0x06	; 6
    16e8:	48 e0       	ldi	r20, 0x08	; 8
    16ea:	60 ec       	ldi	r22, 0xC0	; 192
    16ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ee:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,NINE,SEVEN);
    16f2:	27 e0       	ldi	r18, 0x07	; 7
    16f4:	49 e0       	ldi	r20, 0x09	; 9
    16f6:	60 ec       	ldi	r22, 0xC0	; 192
    16f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
}
    16fe:	00 00       	nop
    1700:	2f 96       	adiw	r28, 0x0f	; 15
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <SAD>:


void SAD(uint8 mode)
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	c1 54       	subi	r28, 0x41	; 65
    171c:	d1 09       	sbc	r29, r1
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	9e 01       	movw	r18, r28
    172a:	2f 5b       	subi	r18, 0xBF	; 191
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	f9 01       	movw	r30, r18
    1730:	80 83       	st	Z, r24
	const uint8 Emotion0[EIGHT]={3,4,8,16,17,18,16,16};
    1732:	28 e0       	ldi	r18, 0x08	; 8
    1734:	e0 e6       	ldi	r30, 0x60	; 96
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	dc 01       	movw	r26, r24
    173e:	01 90       	ld	r0, Z+
    1740:	0d 92       	st	X+, r0
    1742:	2a 95       	dec	r18
    1744:	e1 f7       	brne	.-8      	; 0x173e <SAD+0x2c>
	const uint8 Emotion1[EIGHT]={31,0,0,0,0,16,0,0};
    1746:	88 e0       	ldi	r24, 0x08	; 8
    1748:	e8 e6       	ldi	r30, 0x68	; 104
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	de 01       	movw	r26, r28
    174e:	19 96       	adiw	r26, 0x09	; 9
    1750:	01 90       	ld	r0, Z+
    1752:	0d 92       	st	X+, r0
    1754:	8a 95       	dec	r24
    1756:	e1 f7       	brne	.-8      	; 0x1750 <SAD+0x3e>
	const uint8 Emotion2[EIGHT]={31,0,0,0,0,1,0,0};
    1758:	88 e0       	ldi	r24, 0x08	; 8
    175a:	e0 e7       	ldi	r30, 0x70	; 112
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	de 01       	movw	r26, r28
    1760:	51 96       	adiw	r26, 0x11	; 17
    1762:	01 90       	ld	r0, Z+
    1764:	0d 92       	st	X+, r0
    1766:	8a 95       	dec	r24
    1768:	e1 f7       	brne	.-8      	; 0x1762 <SAD+0x50>
	const uint8 Emotion3[EIGHT]={24,4,2,1,17,9,1,1};
    176a:	88 e0       	ldi	r24, 0x08	; 8
    176c:	e8 e7       	ldi	r30, 0x78	; 120
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	de 01       	movw	r26, r28
    1772:	59 96       	adiw	r26, 0x19	; 25
    1774:	01 90       	ld	r0, Z+
    1776:	0d 92       	st	X+, r0
    1778:	8a 95       	dec	r24
    177a:	e1 f7       	brne	.-8      	; 0x1774 <SAD+0x62>
	const uint8 Emotion4[EIGHT]={16,16,16,16,16,8,4,3};
    177c:	88 e0       	ldi	r24, 0x08	; 8
    177e:	e0 e8       	ldi	r30, 0x80	; 128
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	de 01       	movw	r26, r28
    1784:	91 96       	adiw	r26, 0x21	; 33
    1786:	01 90       	ld	r0, Z+
    1788:	0d 92       	st	X+, r0
    178a:	8a 95       	dec	r24
    178c:	e1 f7       	brne	.-8      	; 0x1786 <SAD+0x74>
	const uint8 Emotion5[EIGHT]={0,0,1,2,4,0,0,31};
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	e0 ea       	ldi	r30, 0xA0	; 160
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	de 01       	movw	r26, r28
    1796:	99 96       	adiw	r26, 0x29	; 41
    1798:	01 90       	ld	r0, Z+
    179a:	0d 92       	st	X+, r0
    179c:	8a 95       	dec	r24
    179e:	e1 f7       	brne	.-8      	; 0x1798 <SAD+0x86>
	const uint8 Emotion6[EIGHT]={0,0,16,8,4,0,0,31};
    17a0:	88 e0       	ldi	r24, 0x08	; 8
    17a2:	e8 ea       	ldi	r30, 0xA8	; 168
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	de 01       	movw	r26, r28
    17a8:	d1 96       	adiw	r26, 0x31	; 49
    17aa:	01 90       	ld	r0, Z+
    17ac:	0d 92       	st	X+, r0
    17ae:	8a 95       	dec	r24
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <SAD+0x98>
	const uint8 Emotion7[EIGHT]={1,1,1,1,1,2,4,24};
    17b2:	88 e0       	ldi	r24, 0x08	; 8
    17b4:	e8 e9       	ldi	r30, 0x98	; 152
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	de 01       	movw	r26, r28
    17ba:	d9 96       	adiw	r26, 0x39	; 57
    17bc:	01 90       	ld	r0, Z+
    17be:	0d 92       	st	X+, r0
    17c0:	8a 95       	dec	r24
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <SAD+0xaa>
	DRow_Custom_char(mode,Emotion0,ZERO);
    17c4:	ce 01       	movw	r24, r28
    17c6:	8f 5b       	subi	r24, 0xBF	; 191
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	9e 01       	movw	r18, r28
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	b9 01       	movw	r22, r18
    17d4:	fc 01       	movw	r30, r24
    17d6:	80 81       	ld	r24, Z
    17d8:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion1,ONE);
    17dc:	9e 01       	movw	r18, r28
    17de:	27 5f       	subi	r18, 0xF7	; 247
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	ce 01       	movw	r24, r28
    17e4:	8f 5b       	subi	r24, 0xBF	; 191
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	b9 01       	movw	r22, r18
    17ec:	fc 01       	movw	r30, r24
    17ee:	80 81       	ld	r24, Z
    17f0:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion2,TWO);
    17f4:	9e 01       	movw	r18, r28
    17f6:	2f 5e       	subi	r18, 0xEF	; 239
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	ce 01       	movw	r24, r28
    17fc:	8f 5b       	subi	r24, 0xBF	; 191
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	42 e0       	ldi	r20, 0x02	; 2
    1802:	b9 01       	movw	r22, r18
    1804:	fc 01       	movw	r30, r24
    1806:	80 81       	ld	r24, Z
    1808:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion3,THREE);
    180c:	9e 01       	movw	r18, r28
    180e:	27 5e       	subi	r18, 0xE7	; 231
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	ce 01       	movw	r24, r28
    1814:	8f 5b       	subi	r24, 0xBF	; 191
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	43 e0       	ldi	r20, 0x03	; 3
    181a:	b9 01       	movw	r22, r18
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion4,FOUR);
    1824:	9e 01       	movw	r18, r28
    1826:	2f 5d       	subi	r18, 0xDF	; 223
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	ce 01       	movw	r24, r28
    182c:	8f 5b       	subi	r24, 0xBF	; 191
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	44 e0       	ldi	r20, 0x04	; 4
    1832:	b9 01       	movw	r22, r18
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion5,FIVE);
    183c:	9e 01       	movw	r18, r28
    183e:	27 5d       	subi	r18, 0xD7	; 215
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	8f 5b       	subi	r24, 0xBF	; 191
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	45 e0       	ldi	r20, 0x05	; 5
    184a:	b9 01       	movw	r22, r18
    184c:	fc 01       	movw	r30, r24
    184e:	80 81       	ld	r24, Z
    1850:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion6,SIX);
    1854:	9e 01       	movw	r18, r28
    1856:	2f 5c       	subi	r18, 0xCF	; 207
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	ce 01       	movw	r24, r28
    185c:	8f 5b       	subi	r24, 0xBF	; 191
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	46 e0       	ldi	r20, 0x06	; 6
    1862:	b9 01       	movw	r22, r18
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
	DRow_Custom_char(mode,Emotion7,SEVEN);
    186c:	9e 01       	movw	r18, r28
    186e:	27 5c       	subi	r18, 0xC7	; 199
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	ce 01       	movw	r24, r28
    1874:	8f 5b       	subi	r24, 0xBF	; 191
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	47 e0       	ldi	r20, 0x07	; 7
    187a:	b9 01       	movw	r22, r18
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	0e 94 bc 09 	call	0x1378	; 0x1378 <DRow_Custom_char>
}
    1884:	00 00       	nop
    1886:	cf 5b       	subi	r28, 0xBF	; 191
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <DISP_SAD>:
void DISP_SAD(uint8 mode)
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	2f 97       	sbiw	r28, 0x0f	; 15
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
	SAD(mode);
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	0e 94 89 0b 	call	0x1712	; 0x1712 <SAD>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 ea       	ldi	r26, 0xA0	; 160
    18bc:	b0 e4       	ldi	r27, 0x40	; 64
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	ab 83       	std	Y+3, r26	; 0x03
    18c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	69 81       	ldd	r22, Y+1	; 0x01
    18d0:	7a 81       	ldd	r23, Y+2	; 0x02
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	af 83       	std	Y+7, r26	; 0x07
    18e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	6d 81       	ldd	r22, Y+5	; 0x05
    18f0:	7e 81       	ldd	r23, Y+6	; 0x06
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <DISP_SAD+0x6e>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9a 87       	std	Y+10, r25	; 0x0a
    1904:	89 87       	std	Y+9, r24	; 0x09
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <DISP_SAD+0xec>
	else if (__tmp > 65535)
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	6d 81       	ldd	r22, Y+5	; 0x05
    1912:	7e 81       	ldd	r23, Y+6	; 0x06
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <DISP_SAD+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	69 81       	ldd	r22, Y+1	; 0x01
    192a:	7a 81       	ldd	r23, Y+2	; 0x02
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9a 87       	std	Y+10, r25	; 0x0a
    1946:	89 87       	std	Y+9, r24	; 0x09
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <DISP_SAD+0xce>
    194a:	88 ec       	ldi	r24, 0xC8	; 200
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 87       	std	Y+12, r25	; 0x0c
    1950:	8b 87       	std	Y+11, r24	; 0x0b
    1952:	8b 85       	ldd	r24, Y+11	; 0x0b
    1954:	9c 85       	ldd	r25, Y+12	; 0x0c
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <DISP_SAD+0xbc>
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9a 87       	std	Y+10, r25	; 0x0a
    1966:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	89 2b       	or	r24, r25
    196e:	69 f7       	brne	.-38     	; 0x194a <DISP_SAD+0xb0>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <DISP_SAD+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6d 81       	ldd	r22, Y+5	; 0x05
    1974:	7e 81       	ldd	r23, Y+6	; 0x06
    1976:	8f 81       	ldd	r24, Y+7	; 0x07
    1978:	98 85       	ldd	r25, Y+8	; 0x08
    197a:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9a 87       	std	Y+10, r25	; 0x0a
    1984:	89 87       	std	Y+9, r24	; 0x09
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	9e 87       	std	Y+14, r25	; 0x0e
    198c:	8d 87       	std	Y+13, r24	; 0x0d
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <DISP_SAD+0xf8>
    1996:	9e 87       	std	Y+14, r25	; 0x0e
    1998:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5*ONE_MILE_SECOUND_ms);
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,SIX,ZERO);
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	46 e0       	ldi	r20, 0x06	; 6
    199e:	60 e8       	ldi	r22, 0x80	; 128
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,SEVEN,ONE);
    19a6:	21 e0       	ldi	r18, 0x01	; 1
    19a8:	47 e0       	ldi	r20, 0x07	; 7
    19aa:	60 e8       	ldi	r22, 0x80	; 128
    19ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ae:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,EIGHT,TWO);
    19b2:	22 e0       	ldi	r18, 0x02	; 2
    19b4:	48 e0       	ldi	r20, 0x08	; 8
    19b6:	60 e8       	ldi	r22, 0x80	; 128
    19b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ba:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_1ST_LINE,NINE,THREE);
    19be:	23 e0       	ldi	r18, 0x03	; 3
    19c0:	49 e0       	ldi	r20, 0x09	; 9
    19c2:	60 e8       	ldi	r22, 0x80	; 128
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,SIX,FOUR);
    19ca:	24 e0       	ldi	r18, 0x04	; 4
    19cc:	46 e0       	ldi	r20, 0x06	; 6
    19ce:	60 ec       	ldi	r22, 0xC0	; 192
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,SEVEN,FIVE);
    19d6:	25 e0       	ldi	r18, 0x05	; 5
    19d8:	47 e0       	ldi	r20, 0x07	; 7
    19da:	60 ec       	ldi	r22, 0xC0	; 192
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,EIGHT,SIX);
    19e2:	26 e0       	ldi	r18, 0x06	; 6
    19e4:	48 e0       	ldi	r20, 0x08	; 8
    19e6:	60 ec       	ldi	r22, 0xC0	; 192
    19e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ea:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
	Disp_Custom_char(mode,LCD_CMD_2ND_LINE,NINE,SEVEN);
    19ee:	27 e0       	ldi	r18, 0x07	; 7
    19f0:	49 e0       	ldi	r20, 0x09	; 9
    19f2:	60 ec       	ldi	r22, 0xC0	; 192
    19f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f6:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Disp_Custom_char>
}
    19fa:	00 00       	nop
    19fc:	2f 96       	adiw	r28, 0x0f	; 15
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <main>:
#include "keybad.h"
#include "LCD.h"
#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	c0 58       	subi	r28, 0x80	; 128
    1a1c:	d1 09       	sbc	r29, r1
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	
	LCD_init(FOUR_BIT_MODE);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_init>
	Keypad_init();
    1a2e:	0e 94 2d 01 	call	0x25a	; 0x25a <Keypad_init>
	uint8 i=0,count =0;
    1a32:	19 82       	std	Y+1, r1	; 0x01
    1a34:	1a 82       	std	Y+2, r1	; 0x02
	for (i=0;i<4;i++)
    1a36:	19 82       	std	Y+1, r1	; 0x01
    1a38:	f1 c0       	rjmp	.+482    	; 0x1c1c <main+0x20e>
	{
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"***WELCOME***",LCD_CMD_1ST_LINE,1);
    1a3a:	21 e0       	ldi	r18, 0x01	; 1
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	6e eb       	ldi	r22, 0xBE	; 190
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	aa e7       	ldi	r26, 0x7A	; 122
    1a4e:	b4 e4       	ldi	r27, 0x44	; 68
    1a50:	8f 83       	std	Y+7, r24	; 0x07
    1a52:	98 87       	std	Y+8, r25	; 0x08
    1a54:	a9 87       	std	Y+9, r26	; 0x09
    1a56:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a ef       	ldi	r20, 0xFA	; 250
    1a5e:	54 e4       	ldi	r21, 0x44	; 68
    1a60:	6f 81       	ldd	r22, Y+7	; 0x07
    1a62:	78 85       	ldd	r23, Y+8	; 0x08
    1a64:	89 85       	ldd	r24, Y+9	; 0x09
    1a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a68:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	89 ab       	std	Y+49, r24	; 0x31
    1a72:	9a ab       	std	Y+50, r25	; 0x32
    1a74:	ab ab       	std	Y+51, r26	; 0x33
    1a76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	69 a9       	ldd	r22, Y+49	; 0x31
    1a82:	7a a9       	ldd	r23, Y+50	; 0x32
    1a84:	8b a9       	ldd	r24, Y+51	; 0x33
    1a86:	9c a9       	ldd	r25, Y+52	; 0x34
    1a88:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <main+0x8c>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e ab       	std	Y+54, r25	; 0x36
    1a96:	8d ab       	std	Y+53, r24	; 0x35
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <main+0x10a>
	else if (__tmp > 65535)
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aaa:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e ab       	std	Y+54, r25	; 0x36
    1ad8:	8d ab       	std	Y+53, r24	; 0x35
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <main+0xec>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	98 af       	std	Y+56, r25	; 0x38
    1ae2:	8f ab       	std	Y+55, r24	; 0x37
    1ae4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <main+0xda>
    1aec:	98 af       	std	Y+56, r25	; 0x38
    1aee:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d a9       	ldd	r24, Y+53	; 0x35
    1af2:	9e a9       	ldd	r25, Y+54	; 0x36
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e ab       	std	Y+54, r25	; 0x36
    1af8:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d a9       	ldd	r24, Y+53	; 0x35
    1afc:	9e a9       	ldd	r25, Y+54	; 0x36
    1afe:	89 2b       	or	r24, r25
    1b00:	69 f7       	brne	.-38     	; 0x1adc <main+0xce>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	69 a9       	ldd	r22, Y+49	; 0x31
    1b06:	7a a9       	ldd	r23, Y+50	; 0x32
    1b08:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b0c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e ab       	std	Y+54, r25	; 0x36
    1b16:	8d ab       	std	Y+53, r24	; 0x35
    1b18:	8d a9       	ldd	r24, Y+53	; 0x35
    1b1a:	9e a9       	ldd	r25, Y+54	; 0x36
    1b1c:	9a af       	std	Y+58, r25	; 0x3a
    1b1e:	89 af       	std	Y+57, r24	; 0x39
    1b20:	89 ad       	ldd	r24, Y+57	; 0x39
    1b22:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <main+0x116>
    1b28:	9a af       	std	Y+58, r25	; 0x3a
    1b2a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(ONE_SECOUND_ms);
		LCD_clear(FOUR_BIT_MODE);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	aa e7       	ldi	r26, 0x7A	; 122
    1b38:	b4 e4       	ldi	r27, 0x44	; 68
    1b3a:	8b a3       	std	Y+35, r24	; 0x23
    1b3c:	9c a3       	std	Y+36, r25	; 0x24
    1b3e:	ad a3       	std	Y+37, r26	; 0x25
    1b40:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b50:	9e a1       	ldd	r25, Y+38	; 0x26
    1b52:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8f a3       	std	Y+39, r24	; 0x27
    1b5c:	98 a7       	std	Y+40, r25	; 0x28
    1b5e:	a9 a7       	std	Y+41, r26	; 0x29
    1b60:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b72:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <main+0x176>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9c a7       	std	Y+44, r25	; 0x2c
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <main+0x1f4>
	else if (__tmp > 65535)
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b90:	89 a5       	ldd	r24, Y+41	; 0x29
    1b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b94:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    1baa:	9e a1       	ldd	r25, Y+38	; 0x26
    1bac:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9c a7       	std	Y+44, r25	; 0x2c
    1bc2:	8b a7       	std	Y+43, r24	; 0x2b
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <main+0x1d6>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e a7       	std	Y+46, r25	; 0x2e
    1bcc:	8d a7       	std	Y+45, r24	; 0x2d
    1bce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <main+0x1c4>
    1bd6:	9e a7       	std	Y+46, r25	; 0x2e
    1bd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9c a7       	std	Y+44, r25	; 0x2c
    1be2:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be8:	89 2b       	or	r24, r25
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <main+0x1b8>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9c a7       	std	Y+44, r25	; 0x2c
    1c00:	8b a7       	std	Y+43, r24	; 0x2b
    1c02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c06:	98 ab       	std	Y+48, r25	; 0x30
    1c08:	8f a7       	std	Y+47, r24	; 0x2f
    1c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <main+0x200>
    1c12:	98 ab       	std	Y+48, r25	; 0x30
    1c14:	8f a7       	std	Y+47, r24	; 0x2f
{
	
	LCD_init(FOUR_BIT_MODE);
	Keypad_init();
	uint8 i=0,count =0;
	for (i=0;i<4;i++)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <main+0x216>
    1c22:	0b cf       	rjmp	.-490    	; 0x1a3a <main+0x2c>
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"***WELCOME***",LCD_CMD_1ST_LINE,1);
		_delay_ms(ONE_SECOUND_ms);
		LCD_clear(FOUR_BIT_MODE);
		_delay_ms(ONE_SECOUND_ms);
	}
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"lets start !",LCD_CMD_1ST_LINE,2);
    1c24:	22 e0       	ldi	r18, 0x02	; 2
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	6c ec       	ldi	r22, 0xCC	; 204
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	aa ef       	ldi	r26, 0xFA	; 250
    1c38:	b4 e4       	ldi	r27, 0x44	; 68
    1c3a:	8f 87       	std	Y+15, r24	; 0x0f
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	a9 8b       	std	Y+17, r26	; 0x11
    1c40:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	8e 01       	movw	r16, r28
    1c44:	0b 5b       	subi	r16, 0xBB	; 187
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c52:	78 89       	ldd	r23, Y+16	; 0x10
    1c54:	89 89       	ldd	r24, Y+17	; 0x11
    1c56:	9a 89       	ldd	r25, Y+18	; 0x12
    1c58:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	8b 5b       	subi	r24, 0xBB	; 187
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	fc 01       	movw	r30, r24
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	4c f4       	brge	.+18     	; 0x1c9c <main+0x28e>
		__ticks = 1;
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	87 5b       	subi	r24, 0xB7	; 183
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	fc 01       	movw	r30, r24
    1c96:	31 83       	std	Z+1, r19	; 0x01
    1c98:	20 83       	st	Z, r18
    1c9a:	69 c0       	rjmp	.+210    	; 0x1d6e <main+0x360>
	else if (__tmp > 65535)
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	8b 5b       	subi	r24, 0xBB	; 187
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	fc 01       	movw	r30, r24
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <main+0x2b0>
    1cbc:	46 c0       	rjmp	.+140    	; 0x1d4a <main+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cc8:	78 89       	ldd	r23, Y+16	; 0x10
    1cca:	89 89       	ldd	r24, Y+17	; 0x11
    1ccc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cce:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8e 01       	movw	r16, r28
    1cd8:	07 5b       	subi	r16, 0xB7	; 183
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	24 c0       	rjmp	.+72     	; 0x1d38 <main+0x32a>
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	85 5b       	subi	r24, 0xB5	; 181
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	28 ec       	ldi	r18, 0xC8	; 200
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	31 83       	std	Z+1, r19	; 0x01
    1cfe:	20 83       	st	Z, r18
    1d00:	ce 01       	movw	r24, r28
    1d02:	85 5b       	subi	r24, 0xB5	; 181
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	fc 01       	movw	r30, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <main+0x2fe>
    1d10:	9e 01       	movw	r18, r28
    1d12:	25 5b       	subi	r18, 0xB5	; 181
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	f9 01       	movw	r30, r18
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	87 5b       	subi	r24, 0xB7	; 183
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	9e 01       	movw	r18, r28
    1d24:	27 5b       	subi	r18, 0xB7	; 183
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
    1d28:	f9 01       	movw	r30, r18
    1d2a:	20 81       	ld	r18, Z
    1d2c:	31 81       	ldd	r19, Z+1	; 0x01
    1d2e:	21 50       	subi	r18, 0x01	; 1
    1d30:	31 09       	sbc	r19, r1
    1d32:	fc 01       	movw	r30, r24
    1d34:	31 83       	std	Z+1, r19	; 0x01
    1d36:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	ce 01       	movw	r24, r28
    1d3a:	87 5b       	subi	r24, 0xB7	; 183
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	fc 01       	movw	r30, r24
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	89 2b       	or	r24, r25
    1d46:	a1 f6       	brne	.-88     	; 0x1cf0 <main+0x2e2>
    1d48:	2c c0       	rjmp	.+88     	; 0x1da2 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	07 5b       	subi	r16, 0xB7	; 183
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	ce 01       	movw	r24, r28
    1d52:	8b 5b       	subi	r24, 0xBB	; 187
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	fc 01       	movw	r30, r24
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	f8 01       	movw	r30, r16
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	ce 01       	movw	r24, r28
    1d70:	83 5b       	subi	r24, 0xB3	; 179
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	9e 01       	movw	r18, r28
    1d76:	27 5b       	subi	r18, 0xB7	; 183
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	20 81       	ld	r18, Z
    1d7e:	31 81       	ldd	r19, Z+1	; 0x01
    1d80:	fc 01       	movw	r30, r24
    1d82:	31 83       	std	Z+1, r19	; 0x01
    1d84:	20 83       	st	Z, r18
    1d86:	ce 01       	movw	r24, r28
    1d88:	83 5b       	subi	r24, 0xB3	; 179
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <main+0x384>
    1d96:	9e 01       	movw	r18, r28
    1d98:	23 5b       	subi	r18, 0xB3	; 179
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
	_delay_ms(2*ONE_SECOUND_ms);
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"Your score will",LCD_CMD_1ST_LINE,1);
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	69 ed       	ldi	r22, 0xD9	; 217
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"appear on 7 seg",LCD_CMD_2ND_LINE,1);	
    1db0:	21 e0       	ldi	r18, 0x01	; 1
    1db2:	40 ec       	ldi	r20, 0xC0	; 192
    1db4:	69 ee       	ldi	r22, 0xE9	; 233
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	aa ef       	ldi	r26, 0xFA	; 250
    1dc4:	b4 e4       	ldi	r27, 0x44	; 68
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	ad 83       	std	Y+5, r26	; 0x05
    1dcc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a ef       	ldi	r20, 0xFA	; 250
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	6b 81       	ldd	r22, Y+3	; 0x03
    1dd8:	7c 81       	ldd	r23, Y+4	; 0x04
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8b af       	std	Y+59, r24	; 0x3b
    1de8:	9c af       	std	Y+60, r25	; 0x3c
    1dea:	ad af       	std	Y+61, r26	; 0x3d
    1dec:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1df8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dfe:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	44 f4       	brge	.+16     	; 0x1e16 <main+0x408>
		__ticks = 1;
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	cf 96       	adiw	r24, 0x3f	; 63
    1e0e:	fc 01       	movw	r30, r24
    1e10:	31 83       	std	Z+1, r19	; 0x01
    1e12:	20 83       	st	Z, r18
    1e14:	5f c0       	rjmp	.+190    	; 0x1ed4 <main+0x4c6>
	else if (__tmp > 65535)
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e20:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e26:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <main+0x422>
    1e2e:	44 c0       	rjmp	.+136    	; 0x1eb8 <main+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	6b 81       	ldd	r22, Y+3	; 0x03
    1e3a:	7c 81       	ldd	r23, Y+4	; 0x04
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 01       	movw	r18, r28
    1e56:	21 5c       	subi	r18, 0xC1	; 193
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	23 c0       	rjmp	.+70     	; 0x1ea8 <main+0x49a>
    1e62:	ce 01       	movw	r24, r28
    1e64:	8f 5b       	subi	r24, 0xBF	; 191
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	28 ec       	ldi	r18, 0xC8	; 200
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	31 83       	std	Z+1, r19	; 0x01
    1e70:	20 83       	st	Z, r18
    1e72:	ce 01       	movw	r24, r28
    1e74:	8f 5b       	subi	r24, 0xBF	; 191
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	fc 01       	movw	r30, r24
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <main+0x470>
    1e82:	9e 01       	movw	r18, r28
    1e84:	2f 5b       	subi	r18, 0xBF	; 191
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	f9 01       	movw	r30, r18
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	ce 01       	movw	r24, r28
    1e90:	cf 96       	adiw	r24, 0x3f	; 63
    1e92:	fc 01       	movw	r30, r24
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	9c 01       	movw	r18, r24
    1e9a:	21 50       	subi	r18, 0x01	; 1
    1e9c:	31 09       	sbc	r19, r1
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	cf 96       	adiw	r24, 0x3f	; 63
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	31 83       	std	Z+1, r19	; 0x01
    1ea6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	cf 96       	adiw	r24, 0x3f	; 63
    1eac:	fc 01       	movw	r30, r24
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	89 2b       	or	r24, r25
    1eb4:	b1 f6       	brne	.-84     	; 0x1e62 <main+0x454>
    1eb6:	28 c0       	rjmp	.+80     	; 0x1f08 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ebc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ebe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 01       	movw	r18, r28
    1eca:	21 5c       	subi	r18, 0xC1	; 193
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	f9 01       	movw	r30, r18
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	8d 5b       	subi	r24, 0xBD	; 189
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	9e 01       	movw	r18, r28
    1edc:	21 5c       	subi	r18, 0xC1	; 193
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	20 81       	ld	r18, Z
    1ee4:	31 81       	ldd	r19, Z+1	; 0x01
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	31 83       	std	Z+1, r19	; 0x01
    1eea:	20 83       	st	Z, r18
    1eec:	ce 01       	movw	r24, r28
    1eee:	8d 5b       	subi	r24, 0xBD	; 189
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <main+0x4ea>
    1efc:	9e 01       	movw	r18, r28
    1efe:	2d 5b       	subi	r18, 0xBD	; 189
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	f9 01       	movw	r30, r18
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
	_delay_ms(2*ONE_SECOUND_ms);
	BCDSevegments_init();
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <BCDSevegments_init>
	BCDSevegments_displayNo(0);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
	
	LCD_clear(FOUR_BIT_MODE);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"num of country  ",LCD_CMD_1ST_LINE,0);
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	69 ef       	ldi	r22, 0xF9	; 249
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"in Europe is 44?",LCD_CMD_2ND_LINE,0);
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	40 ec       	ldi	r20, 0xC0	; 192
    1f2c:	6a e0       	ldi	r22, 0x0A	; 10
    1f2e:	71 e0       	ldi	r23, 0x01	; 1
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	while(1)
	{
		if(Keypad_getPressedKey()==ONE)
    1f36:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	79 f4       	brne	.+30     	; 0x1f5c <main+0x54e>
		{
			LCD_clear(FOUR_BIT_MODE);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_happy(FOUR_BIT_MODE);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	0e 94 cf 0a 	call	0x159e	; 0x159e <DISP_happy>
			count++;
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	8a 83       	std	Y+2, r24	; 0x02
			BCDSevegments_displayNo(count);
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
			break;
    1f5a:	0a c0       	rjmp	.+20     	; 0x1f70 <main+0x562>
		
		}
		else if(Keypad_getPressedKey()==TWO)
    1f5c:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    1f60:	82 30       	cpi	r24, 0x02	; 2
    1f62:	49 f7       	brne	.-46     	; 0x1f36 <main+0x528>
		{
			LCD_clear(FOUR_BIT_MODE);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_SAD(FOUR_BIT_MODE);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	0e 94 4d 0c 	call	0x189a	; 0x189a <DISP_SAD>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e8       	ldi	r25, 0x80	; 128
    1f74:	ab e3       	ldi	r26, 0x3B	; 59
    1f76:	b5 e4       	ldi	r27, 0x45	; 69
    1f78:	8b 87       	std	Y+11, r24	; 0x0b
    1f7a:	9c 87       	std	Y+12, r25	; 0x0c
    1f7c:	ad 87       	std	Y+13, r26	; 0x0d
    1f7e:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	8e 01       	movw	r16, r28
    1f82:	01 5b       	subi	r16, 0xB1	; 177
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a ef       	ldi	r20, 0xFA	; 250
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	80 83       	st	Z, r24
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	a2 83       	std	Z+2, r26	; 0x02
    1fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa8:	ce 01       	movw	r24, r28
    1faa:	81 5b       	subi	r24, 0xB1	; 177
    1fac:	9f 4f       	sbci	r25, 0xFF	; 255
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	4c f4       	brge	.+18     	; 0x1fda <main+0x5cc>
		__ticks = 1;
    1fc8:	ce 01       	movw	r24, r28
    1fca:	8d 5a       	subi	r24, 0xAD	; 173
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	31 83       	std	Z+1, r19	; 0x01
    1fd6:	20 83       	st	Z, r18
    1fd8:	69 c0       	rjmp	.+210    	; 0x20ac <main+0x69e>
	else if (__tmp > 65535)
    1fda:	ce 01       	movw	r24, r28
    1fdc:	81 5b       	subi	r24, 0xB1	; 177
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	fc 01       	movw	r30, r24
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	0c f0       	brlt	.+2      	; 0x1ffc <main+0x5ee>
    1ffa:	46 c0       	rjmp	.+140    	; 0x2088 <main+0x67a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	6b 85       	ldd	r22, Y+11	; 0x0b
    2006:	7c 85       	ldd	r23, Y+12	; 0x0c
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8e 01       	movw	r16, r28
    2016:	0d 5a       	subi	r16, 0xAD	; 173
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	f8 01       	movw	r30, r16
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	80 83       	st	Z, r24
    202c:	24 c0       	rjmp	.+72     	; 0x2076 <main+0x668>
    202e:	ce 01       	movw	r24, r28
    2030:	8b 5a       	subi	r24, 0xAB	; 171
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	28 ec       	ldi	r18, 0xC8	; 200
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	fc 01       	movw	r30, r24
    203a:	31 83       	std	Z+1, r19	; 0x01
    203c:	20 83       	st	Z, r18
    203e:	ce 01       	movw	r24, r28
    2040:	8b 5a       	subi	r24, 0xAB	; 171
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	fc 01       	movw	r30, r24
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <main+0x63c>
    204e:	9e 01       	movw	r18, r28
    2050:	2b 5a       	subi	r18, 0xAB	; 171
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	f9 01       	movw	r30, r18
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	ce 01       	movw	r24, r28
    205c:	8d 5a       	subi	r24, 0xAD	; 173
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	9e 01       	movw	r18, r28
    2062:	2d 5a       	subi	r18, 0xAD	; 173
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	f9 01       	movw	r30, r18
    2068:	20 81       	ld	r18, Z
    206a:	31 81       	ldd	r19, Z+1	; 0x01
    206c:	21 50       	subi	r18, 0x01	; 1
    206e:	31 09       	sbc	r19, r1
    2070:	fc 01       	movw	r30, r24
    2072:	31 83       	std	Z+1, r19	; 0x01
    2074:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	ce 01       	movw	r24, r28
    2078:	8d 5a       	subi	r24, 0xAD	; 173
    207a:	9f 4f       	sbci	r25, 0xFF	; 255
    207c:	fc 01       	movw	r30, r24
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	89 2b       	or	r24, r25
    2084:	a1 f6       	brne	.-88     	; 0x202e <main+0x620>
    2086:	2c c0       	rjmp	.+88     	; 0x20e0 <main+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	0d 5a       	subi	r16, 0xAD	; 173
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	ce 01       	movw	r24, r28
    2090:	81 5b       	subi	r24, 0xB1	; 177
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	fc 01       	movw	r30, r24
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	ce 01       	movw	r24, r28
    20ae:	89 5a       	subi	r24, 0xA9	; 169
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	9e 01       	movw	r18, r28
    20b4:	2d 5a       	subi	r18, 0xAD	; 173
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	f9 01       	movw	r30, r18
    20ba:	20 81       	ld	r18, Z
    20bc:	31 81       	ldd	r19, Z+1	; 0x01
    20be:	fc 01       	movw	r30, r24
    20c0:	31 83       	std	Z+1, r19	; 0x01
    20c2:	20 83       	st	Z, r18
    20c4:	ce 01       	movw	r24, r28
    20c6:	89 5a       	subi	r24, 0xA9	; 169
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	fc 01       	movw	r30, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <main+0x6c2>
    20d4:	9e 01       	movw	r18, r28
    20d6:	29 5a       	subi	r18, 0xA9	; 169
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	f9 01       	movw	r30, r18
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
		}	
	}
	
	_delay_ms(3*ONE_SECOUND_ms);
	
	LCD_clear(FOUR_BIT_MODE);
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"The Capital of",LCD_CMD_1ST_LINE,0);
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	6b e1       	ldi	r22, 0x1B	; 27
    20ec:	71 e0       	ldi	r23, 0x01	; 1
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"Estonia is SAKU?",LCD_CMD_2ND_LINE,0);
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	40 ec       	ldi	r20, 0xC0	; 192
    20f8:	6a e2       	ldi	r22, 0x2A	; 42
    20fa:	71 e0       	ldi	r23, 0x01	; 1
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	while(1)
	{
		if(Keypad_getPressedKey()==TWO)
    2102:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	79 f4       	brne	.+30     	; 0x2128 <main+0x71a>
		{
			LCD_clear(FOUR_BIT_MODE);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_happy(FOUR_BIT_MODE);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	0e 94 cf 0a 	call	0x159e	; 0x159e <DISP_happy>
			count++;
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	8a 83       	std	Y+2, r24	; 0x02
			BCDSevegments_displayNo(count);
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
			break;
    2126:	0a c0       	rjmp	.+20     	; 0x213c <main+0x72e>
			
		}
		else if(Keypad_getPressedKey()==ONE)
    2128:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	49 f7       	brne	.-46     	; 0x2102 <main+0x6f4>
		{
			LCD_clear(FOUR_BIT_MODE);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_SAD(FOUR_BIT_MODE);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 4d 0c 	call	0x189a	; 0x189a <DISP_SAD>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e8       	ldi	r25, 0x80	; 128
    2140:	ab e3       	ldi	r26, 0x3B	; 59
    2142:	b5 e4       	ldi	r27, 0x45	; 69
    2144:	8b 8b       	std	Y+19, r24	; 0x13
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	ad 8b       	std	Y+21, r26	; 0x15
    214a:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    214c:	8e 01       	movw	r16, r28
    214e:	07 5a       	subi	r16, 0xA7	; 167
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a ef       	ldi	r20, 0xFA	; 250
    2158:	54 e4       	ldi	r21, 0x44	; 68
    215a:	6b 89       	ldd	r22, Y+19	; 0x13
    215c:	7c 89       	ldd	r23, Y+20	; 0x14
    215e:	8d 89       	ldd	r24, Y+21	; 0x15
    2160:	9e 89       	ldd	r25, Y+22	; 0x16
    2162:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	80 83       	st	Z, r24
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2174:	ce 01       	movw	r24, r28
    2176:	87 5a       	subi	r24, 0xA7	; 167
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	fc 01       	movw	r30, r24
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    2190:	88 23       	and	r24, r24
    2192:	4c f4       	brge	.+18     	; 0x21a6 <main+0x798>
		__ticks = 1;
    2194:	ce 01       	movw	r24, r28
    2196:	83 5a       	subi	r24, 0xA3	; 163
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	fc 01       	movw	r30, r24
    21a0:	31 83       	std	Z+1, r19	; 0x01
    21a2:	20 83       	st	Z, r18
    21a4:	69 c0       	rjmp	.+210    	; 0x2278 <main+0x86a>
	else if (__tmp > 65535)
    21a6:	ce 01       	movw	r24, r28
    21a8:	87 5a       	subi	r24, 0xA7	; 167
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	fc 01       	movw	r30, r24
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <main+0x7ba>
    21c6:	46 c0       	rjmp	.+140    	; 0x2254 <main+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	6b 89       	ldd	r22, Y+19	; 0x13
    21d2:	7c 89       	ldd	r23, Y+20	; 0x14
    21d4:	8d 89       	ldd	r24, Y+21	; 0x15
    21d6:	9e 89       	ldd	r25, Y+22	; 0x16
    21d8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8e 01       	movw	r16, r28
    21e2:	03 5a       	subi	r16, 0xA3	; 163
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	f8 01       	movw	r30, r16
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
    21f8:	24 c0       	rjmp	.+72     	; 0x2242 <main+0x834>
    21fa:	ce 01       	movw	r24, r28
    21fc:	81 5a       	subi	r24, 0xA1	; 161
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	28 ec       	ldi	r18, 0xC8	; 200
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	fc 01       	movw	r30, r24
    2206:	31 83       	std	Z+1, r19	; 0x01
    2208:	20 83       	st	Z, r18
    220a:	ce 01       	movw	r24, r28
    220c:	81 5a       	subi	r24, 0xA1	; 161
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	fc 01       	movw	r30, r24
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <main+0x808>
    221a:	9e 01       	movw	r18, r28
    221c:	21 5a       	subi	r18, 0xA1	; 161
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	f9 01       	movw	r30, r18
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	ce 01       	movw	r24, r28
    2228:	83 5a       	subi	r24, 0xA3	; 163
    222a:	9f 4f       	sbci	r25, 0xFF	; 255
    222c:	9e 01       	movw	r18, r28
    222e:	23 5a       	subi	r18, 0xA3	; 163
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	f9 01       	movw	r30, r18
    2234:	20 81       	ld	r18, Z
    2236:	31 81       	ldd	r19, Z+1	; 0x01
    2238:	21 50       	subi	r18, 0x01	; 1
    223a:	31 09       	sbc	r19, r1
    223c:	fc 01       	movw	r30, r24
    223e:	31 83       	std	Z+1, r19	; 0x01
    2240:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	ce 01       	movw	r24, r28
    2244:	83 5a       	subi	r24, 0xA3	; 163
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	89 2b       	or	r24, r25
    2250:	a1 f6       	brne	.-88     	; 0x21fa <main+0x7ec>
    2252:	2c c0       	rjmp	.+88     	; 0x22ac <main+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	8e 01       	movw	r16, r28
    2256:	03 5a       	subi	r16, 0xA3	; 163
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	ce 01       	movw	r24, r28
    225c:	87 5a       	subi	r24, 0xA7	; 167
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	fc 01       	movw	r30, r24
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	f8 01       	movw	r30, r16
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
    2278:	ce 01       	movw	r24, r28
    227a:	8f 59       	subi	r24, 0x9F	; 159
    227c:	9f 4f       	sbci	r25, 0xFF	; 255
    227e:	9e 01       	movw	r18, r28
    2280:	23 5a       	subi	r18, 0xA3	; 163
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	f9 01       	movw	r30, r18
    2286:	20 81       	ld	r18, Z
    2288:	31 81       	ldd	r19, Z+1	; 0x01
    228a:	fc 01       	movw	r30, r24
    228c:	31 83       	std	Z+1, r19	; 0x01
    228e:	20 83       	st	Z, r18
    2290:	ce 01       	movw	r24, r28
    2292:	8f 59       	subi	r24, 0x9F	; 159
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <main+0x88e>
    22a0:	9e 01       	movw	r18, r28
    22a2:	2f 59       	subi	r18, 0x9F	; 159
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	f9 01       	movw	r30, r18
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
	}
	
	
	_delay_ms(3*ONE_SECOUND_ms);
	
	LCD_clear(FOUR_BIT_MODE);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"Area of Egypt is",LCD_CMD_1ST_LINE,0);
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	6b e3       	ldi	r22, 0x3B	; 59
    22b8:	71 e0       	ldi	r23, 0x01	; 1
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"1.02million KM2?",LCD_CMD_2ND_LINE,0);
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	40 ec       	ldi	r20, 0xC0	; 192
    22c4:	6c e4       	ldi	r22, 0x4C	; 76
    22c6:	71 e0       	ldi	r23, 0x01	; 1
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	while(1)
	{
		if(Keypad_getPressedKey()==TWO)
    22ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	79 f4       	brne	.+30     	; 0x22f4 <main+0x8e6>
		{
			LCD_clear(FOUR_BIT_MODE);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_happy(FOUR_BIT_MODE);
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	0e 94 cf 0a 	call	0x159e	; 0x159e <DISP_happy>
			count++;
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	8f 5f       	subi	r24, 0xFF	; 255
    22e6:	8a 83       	std	Y+2, r24	; 0x02
			BCDSevegments_displayNo(count);
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
			break;
    22f2:	0a c0       	rjmp	.+20     	; 0x2308 <main+0x8fa>
			
		}
		else if(Keypad_getPressedKey()==ONE)
    22f4:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	49 f7       	brne	.-46     	; 0x22ce <main+0x8c0>
		{
			LCD_clear(FOUR_BIT_MODE);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_SAD(FOUR_BIT_MODE);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	0e 94 4d 0c 	call	0x189a	; 0x189a <DISP_SAD>
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e8       	ldi	r25, 0x80	; 128
    230c:	ab e3       	ldi	r26, 0x3B	; 59
    230e:	b5 e4       	ldi	r27, 0x45	; 69
    2310:	8f 8b       	std	Y+23, r24	; 0x17
    2312:	98 8f       	std	Y+24, r25	; 0x18
    2314:	a9 8f       	std	Y+25, r26	; 0x19
    2316:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2318:	8e 01       	movw	r16, r28
    231a:	0d 59       	subi	r16, 0x9D	; 157
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	6f 89       	ldd	r22, Y+23	; 0x17
    2328:	78 8d       	ldd	r23, Y+24	; 0x18
    232a:	89 8d       	ldd	r24, Y+25	; 0x19
    232c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    232e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2340:	ce 01       	movw	r24, r28
    2342:	8d 59       	subi	r24, 0x9D	; 157
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	fc 01       	movw	r30, r24
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    235c:	88 23       	and	r24, r24
    235e:	4c f4       	brge	.+18     	; 0x2372 <main+0x964>
		__ticks = 1;
    2360:	ce 01       	movw	r24, r28
    2362:	89 59       	subi	r24, 0x99	; 153
    2364:	9f 4f       	sbci	r25, 0xFF	; 255
    2366:	21 e0       	ldi	r18, 0x01	; 1
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	fc 01       	movw	r30, r24
    236c:	31 83       	std	Z+1, r19	; 0x01
    236e:	20 83       	st	Z, r18
    2370:	69 c0       	rjmp	.+210    	; 0x2444 <main+0xa36>
	else if (__tmp > 65535)
    2372:	ce 01       	movw	r24, r28
    2374:	8d 59       	subi	r24, 0x9D	; 157
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	fc 01       	movw	r30, r24
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    238e:	18 16       	cp	r1, r24
    2390:	0c f0       	brlt	.+2      	; 0x2394 <main+0x986>
    2392:	46 c0       	rjmp	.+140    	; 0x2420 <main+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	6f 89       	ldd	r22, Y+23	; 0x17
    239e:	78 8d       	ldd	r23, Y+24	; 0x18
    23a0:	89 8d       	ldd	r24, Y+25	; 0x19
    23a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23a4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8e 01       	movw	r16, r28
    23ae:	09 59       	subi	r16, 0x99	; 153
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	24 c0       	rjmp	.+72     	; 0x240e <main+0xa00>
    23c6:	ce 01       	movw	r24, r28
    23c8:	87 59       	subi	r24, 0x97	; 151
    23ca:	9f 4f       	sbci	r25, 0xFF	; 255
    23cc:	28 ec       	ldi	r18, 0xC8	; 200
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	fc 01       	movw	r30, r24
    23d2:	31 83       	std	Z+1, r19	; 0x01
    23d4:	20 83       	st	Z, r18
    23d6:	ce 01       	movw	r24, r28
    23d8:	87 59       	subi	r24, 0x97	; 151
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	fc 01       	movw	r30, r24
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <main+0x9d4>
    23e6:	9e 01       	movw	r18, r28
    23e8:	27 59       	subi	r18, 0x97	; 151
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	f9 01       	movw	r30, r18
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	ce 01       	movw	r24, r28
    23f4:	89 59       	subi	r24, 0x99	; 153
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	9e 01       	movw	r18, r28
    23fa:	29 59       	subi	r18, 0x99	; 153
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	f9 01       	movw	r30, r18
    2400:	20 81       	ld	r18, Z
    2402:	31 81       	ldd	r19, Z+1	; 0x01
    2404:	21 50       	subi	r18, 0x01	; 1
    2406:	31 09       	sbc	r19, r1
    2408:	fc 01       	movw	r30, r24
    240a:	31 83       	std	Z+1, r19	; 0x01
    240c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	ce 01       	movw	r24, r28
    2410:	89 59       	subi	r24, 0x99	; 153
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	fc 01       	movw	r30, r24
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	89 2b       	or	r24, r25
    241c:	a1 f6       	brne	.-88     	; 0x23c6 <main+0x9b8>
    241e:	2c c0       	rjmp	.+88     	; 0x2478 <main+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	8e 01       	movw	r16, r28
    2422:	09 59       	subi	r16, 0x99	; 153
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    2426:	ce 01       	movw	r24, r28
    2428:	8d 59       	subi	r24, 0x9D	; 157
    242a:	9f 4f       	sbci	r25, 0xFF	; 255
    242c:	fc 01       	movw	r30, r24
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	f8 01       	movw	r30, r16
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	ce 01       	movw	r24, r28
    2446:	85 59       	subi	r24, 0x95	; 149
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	9e 01       	movw	r18, r28
    244c:	29 59       	subi	r18, 0x99	; 153
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	f9 01       	movw	r30, r18
    2452:	20 81       	ld	r18, Z
    2454:	31 81       	ldd	r19, Z+1	; 0x01
    2456:	fc 01       	movw	r30, r24
    2458:	31 83       	std	Z+1, r19	; 0x01
    245a:	20 83       	st	Z, r18
    245c:	ce 01       	movw	r24, r28
    245e:	85 59       	subi	r24, 0x95	; 149
    2460:	9f 4f       	sbci	r25, 0xFF	; 255
    2462:	fc 01       	movw	r30, r24
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <main+0xa5a>
    246c:	9e 01       	movw	r18, r28
    246e:	25 59       	subi	r18, 0x95	; 149
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	f9 01       	movw	r30, r18
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
		}
	}
	
	_delay_ms(3*ONE_SECOUND_ms);
	
	LCD_clear(FOUR_BIT_MODE);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"The Suez channel",LCD_CMD_1ST_LINE,0);
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	6d e5       	ldi	r22, 0x5D	; 93
    2484:	71 e0       	ldi	r23, 0x01	; 1
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"opened in 1869?",LCD_CMD_2ND_LINE,0);
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	40 ec       	ldi	r20, 0xC0	; 192
    2490:	6e e6       	ldi	r22, 0x6E	; 110
    2492:	71 e0       	ldi	r23, 0x01	; 1
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	while(1)
	{
		if(Keypad_getPressedKey()==ONE)
    249a:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	79 f4       	brne	.+30     	; 0x24c0 <main+0xab2>
		{
			LCD_clear(FOUR_BIT_MODE);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_happy(FOUR_BIT_MODE);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	0e 94 cf 0a 	call	0x159e	; 0x159e <DISP_happy>
			count++;
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	8a 83       	std	Y+2, r24	; 0x02
			BCDSevegments_displayNo(count);
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
			break;
    24be:	0a c0       	rjmp	.+20     	; 0x24d4 <main+0xac6>
			
		}
		else if(Keypad_getPressedKey()==TWO)
    24c0:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	49 f7       	brne	.-46     	; 0x249a <main+0xa8c>
		{
			LCD_clear(FOUR_BIT_MODE);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_SAD(FOUR_BIT_MODE);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 4d 0c 	call	0x189a	; 0x189a <DISP_SAD>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e8       	ldi	r25, 0x80	; 128
    24d8:	ab e3       	ldi	r26, 0x3B	; 59
    24da:	b5 e4       	ldi	r27, 0x45	; 69
    24dc:	8b 8f       	std	Y+27, r24	; 0x1b
    24de:	9c 8f       	std	Y+28, r25	; 0x1c
    24e0:	ad 8f       	std	Y+29, r26	; 0x1d
    24e2:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	8e 01       	movw	r16, r28
    24e6:	03 59       	subi	r16, 0x93	; 147
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4a ef       	ldi	r20, 0xFA	; 250
    24f0:	54 e4       	ldi	r21, 0x44	; 68
    24f2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    24f4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    24f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24fa:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250c:	ce 01       	movw	r24, r28
    250e:	83 59       	subi	r24, 0x93	; 147
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	fc 01       	movw	r30, r24
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    2528:	88 23       	and	r24, r24
    252a:	4c f4       	brge	.+18     	; 0x253e <main+0xb30>
		__ticks = 1;
    252c:	ce 01       	movw	r24, r28
    252e:	8f 58       	subi	r24, 0x8F	; 143
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	21 e0       	ldi	r18, 0x01	; 1
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	fc 01       	movw	r30, r24
    2538:	31 83       	std	Z+1, r19	; 0x01
    253a:	20 83       	st	Z, r18
    253c:	69 c0       	rjmp	.+210    	; 0x2610 <main+0xc02>
	else if (__tmp > 65535)
    253e:	ce 01       	movw	r24, r28
    2540:	83 59       	subi	r24, 0x93	; 147
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	fc 01       	movw	r30, r24
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    255a:	18 16       	cp	r1, r24
    255c:	0c f0       	brlt	.+2      	; 0x2560 <main+0xb52>
    255e:	46 c0       	rjmp	.+140    	; 0x25ec <main+0xbde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	6b 8d       	ldd	r22, Y+27	; 0x1b
    256a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    256c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2570:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8e 01       	movw	r16, r28
    257a:	0f 58       	subi	r16, 0x8F	; 143
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	f8 01       	movw	r30, r16
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	24 c0       	rjmp	.+72     	; 0x25da <main+0xbcc>
    2592:	ce 01       	movw	r24, r28
    2594:	8d 58       	subi	r24, 0x8D	; 141
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	28 ec       	ldi	r18, 0xC8	; 200
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	31 83       	std	Z+1, r19	; 0x01
    25a0:	20 83       	st	Z, r18
    25a2:	ce 01       	movw	r24, r28
    25a4:	8d 58       	subi	r24, 0x8D	; 141
    25a6:	9f 4f       	sbci	r25, 0xFF	; 255
    25a8:	fc 01       	movw	r30, r24
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <main+0xba0>
    25b2:	9e 01       	movw	r18, r28
    25b4:	2d 58       	subi	r18, 0x8D	; 141
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	f9 01       	movw	r30, r18
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	ce 01       	movw	r24, r28
    25c0:	8f 58       	subi	r24, 0x8F	; 143
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	9e 01       	movw	r18, r28
    25c6:	2f 58       	subi	r18, 0x8F	; 143
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	f9 01       	movw	r30, r18
    25cc:	20 81       	ld	r18, Z
    25ce:	31 81       	ldd	r19, Z+1	; 0x01
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	31 09       	sbc	r19, r1
    25d4:	fc 01       	movw	r30, r24
    25d6:	31 83       	std	Z+1, r19	; 0x01
    25d8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	ce 01       	movw	r24, r28
    25dc:	8f 58       	subi	r24, 0x8F	; 143
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	fc 01       	movw	r30, r24
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	89 2b       	or	r24, r25
    25e8:	a1 f6       	brne	.-88     	; 0x2592 <main+0xb84>
    25ea:	2c c0       	rjmp	.+88     	; 0x2644 <main+0xc36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	8e 01       	movw	r16, r28
    25ee:	0f 58       	subi	r16, 0x8F	; 143
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	ce 01       	movw	r24, r28
    25f4:	83 59       	subi	r24, 0x93	; 147
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	fc 01       	movw	r30, r24
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	f8 01       	movw	r30, r16
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	80 83       	st	Z, r24
    2610:	ce 01       	movw	r24, r28
    2612:	8b 58       	subi	r24, 0x8B	; 139
    2614:	9f 4f       	sbci	r25, 0xFF	; 255
    2616:	9e 01       	movw	r18, r28
    2618:	2f 58       	subi	r18, 0x8F	; 143
    261a:	3f 4f       	sbci	r19, 0xFF	; 255
    261c:	f9 01       	movw	r30, r18
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
    2622:	fc 01       	movw	r30, r24
    2624:	31 83       	std	Z+1, r19	; 0x01
    2626:	20 83       	st	Z, r18
    2628:	ce 01       	movw	r24, r28
    262a:	8b 58       	subi	r24, 0x8B	; 139
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	fc 01       	movw	r30, r24
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0xc26>
    2638:	9e 01       	movw	r18, r28
    263a:	2b 58       	subi	r18, 0x8B	; 139
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	f9 01       	movw	r30, r18
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
		}
	}
	
	_delay_ms(3*ONE_SECOUND_ms);
	
	LCD_clear(FOUR_BIT_MODE);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"The Num of German",LCD_CMD_1ST_LINE,0);
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	6e e7       	ldi	r22, 0x7E	; 126
    2650:	71 e0       	ldi	r23, 0x01	; 1
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(FOUR_BIT_MODE,"letters is 29?",LCD_CMD_2ND_LINE,0);
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	40 ec       	ldi	r20, 0xC0	; 192
    265c:	60 e9       	ldi	r22, 0x90	; 144
    265e:	71 e0       	ldi	r23, 0x01	; 1
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	while(1)
	{
		if(Keypad_getPressedKey()==TWO)
    2666:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	79 f4       	brne	.+30     	; 0x268c <main+0xc7e>
		{
			LCD_clear(FOUR_BIT_MODE);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_happy(FOUR_BIT_MODE);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 cf 0a 	call	0x159e	; 0x159e <DISP_happy>
			count++;
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	8a 83       	std	Y+2, r24	; 0x02
			BCDSevegments_displayNo(count);
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 7e 00 	call	0xfc	; 0xfc <BCDSevegments_displayNo>
			break;
    268a:	0a c0       	rjmp	.+20     	; 0x26a0 <main+0xc92>
			
		}
		else if(Keypad_getPressedKey()==ONE)
    268c:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keypad_getPressedKey>
    2690:	81 30       	cpi	r24, 0x01	; 1
    2692:	49 f7       	brne	.-46     	; 0x2666 <main+0xc58>
		{
			LCD_clear(FOUR_BIT_MODE);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
			DISP_SAD(FOUR_BIT_MODE);
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	0e 94 4d 0c 	call	0x189a	; 0x189a <DISP_SAD>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e8       	ldi	r25, 0x80	; 128
    26a4:	ab e3       	ldi	r26, 0x3B	; 59
    26a6:	b5 e4       	ldi	r27, 0x45	; 69
    26a8:	8f 8f       	std	Y+31, r24	; 0x1f
    26aa:	98 a3       	std	Y+32, r25	; 0x20
    26ac:	a9 a3       	std	Y+33, r26	; 0x21
    26ae:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	8e 01       	movw	r16, r28
    26b2:	09 58       	subi	r16, 0x89	; 137
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26c0:	78 a1       	ldd	r23, Y+32	; 0x20
    26c2:	89 a1       	ldd	r24, Y+33	; 0x21
    26c4:	9a a1       	ldd	r25, Y+34	; 0x22
    26c6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	f8 01       	movw	r30, r16
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d8:	ce 01       	movw	r24, r28
    26da:	89 58       	subi	r24, 0x89	; 137
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	fc 01       	movw	r30, r24
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	0e 94 44 18 	call	0x3088	; 0x3088 <__cmpsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	4c f4       	brge	.+18     	; 0x270a <main+0xcfc>
		__ticks = 1;
    26f8:	ce 01       	movw	r24, r28
    26fa:	85 58       	subi	r24, 0x85	; 133
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	21 e0       	ldi	r18, 0x01	; 1
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	fc 01       	movw	r30, r24
    2704:	31 83       	std	Z+1, r19	; 0x01
    2706:	20 83       	st	Z, r18
    2708:	69 c0       	rjmp	.+210    	; 0x27dc <main+0xdce>
	else if (__tmp > 65535)
    270a:	ce 01       	movw	r24, r28
    270c:	89 58       	subi	r24, 0x89	; 137
    270e:	9f 4f       	sbci	r25, 0xFF	; 255
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	fc 01       	movw	r30, r24
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	0e 94 5f 19 	call	0x32be	; 0x32be <__gesf2>
    2726:	18 16       	cp	r1, r24
    2728:	0c f0       	brlt	.+2      	; 0x272c <main+0xd1e>
    272a:	46 c0       	rjmp	.+140    	; 0x27b8 <main+0xdaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2736:	78 a1       	ldd	r23, Y+32	; 0x20
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8e 01       	movw	r16, r28
    2746:	05 58       	subi	r16, 0x85	; 133
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	f8 01       	movw	r30, r16
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	24 c0       	rjmp	.+72     	; 0x27a6 <main+0xd98>
    275e:	ce 01       	movw	r24, r28
    2760:	83 58       	subi	r24, 0x83	; 131
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	28 ec       	ldi	r18, 0xC8	; 200
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	fc 01       	movw	r30, r24
    276a:	31 83       	std	Z+1, r19	; 0x01
    276c:	20 83       	st	Z, r18
    276e:	ce 01       	movw	r24, r28
    2770:	83 58       	subi	r24, 0x83	; 131
    2772:	9f 4f       	sbci	r25, 0xFF	; 255
    2774:	fc 01       	movw	r30, r24
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <main+0xd6c>
    277e:	9e 01       	movw	r18, r28
    2780:	23 58       	subi	r18, 0x83	; 131
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	f9 01       	movw	r30, r18
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	ce 01       	movw	r24, r28
    278c:	85 58       	subi	r24, 0x85	; 133
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	9e 01       	movw	r18, r28
    2792:	25 58       	subi	r18, 0x85	; 133
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	f9 01       	movw	r30, r18
    2798:	20 81       	ld	r18, Z
    279a:	31 81       	ldd	r19, Z+1	; 0x01
    279c:	21 50       	subi	r18, 0x01	; 1
    279e:	31 09       	sbc	r19, r1
    27a0:	fc 01       	movw	r30, r24
    27a2:	31 83       	std	Z+1, r19	; 0x01
    27a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	ce 01       	movw	r24, r28
    27a8:	85 58       	subi	r24, 0x85	; 133
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	fc 01       	movw	r30, r24
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	89 2b       	or	r24, r25
    27b4:	a1 f6       	brne	.-88     	; 0x275e <main+0xd50>
    27b6:	2c c0       	rjmp	.+88     	; 0x2810 <main+0xe02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b8:	8e 01       	movw	r16, r28
    27ba:	05 58       	subi	r16, 0x85	; 133
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	ce 01       	movw	r24, r28
    27c0:	89 58       	subi	r24, 0x89	; 137
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	fc 01       	movw	r30, r24
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	ce 01       	movw	r24, r28
    27de:	81 58       	subi	r24, 0x81	; 129
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	9e 01       	movw	r18, r28
    27e4:	25 58       	subi	r18, 0x85	; 133
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	f9 01       	movw	r30, r18
    27ea:	20 81       	ld	r18, Z
    27ec:	31 81       	ldd	r19, Z+1	; 0x01
    27ee:	fc 01       	movw	r30, r24
    27f0:	31 83       	std	Z+1, r19	; 0x01
    27f2:	20 83       	st	Z, r18
    27f4:	ce 01       	movw	r24, r28
    27f6:	81 58       	subi	r24, 0x81	; 129
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	fc 01       	movw	r30, r24
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0xdf2>
    2804:	9e 01       	movw	r18, r28
    2806:	21 58       	subi	r18, 0x81	; 129
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
    280a:	f9 01       	movw	r30, r18
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
	}
	
	
	_delay_ms(3*ONE_SECOUND_ms);
	
	LCD_clear(FOUR_BIT_MODE);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	0e 94 ad 09 	call	0x135a	; 0x135a <LCD_clear>
	
	if (count==FIVE)
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	85 30       	cpi	r24, 0x05	; 5
    281a:	79 f4       	brne	.+30     	; 0x283a <main+0xe2c>
	{
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"WOW ",LCD_CMD_1ST_LINE,6);
    281c:	26 e0       	ldi	r18, 0x06	; 6
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	6f e9       	ldi	r22, 0x9F	; 159
    2822:	71 e0       	ldi	r23, 0x01	; 1
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"you are genius",LCD_CMD_2ND_LINE,0);
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	40 ec       	ldi	r20, 0xC0	; 192
    282e:	64 ea       	ldi	r22, 0xA4	; 164
    2830:	71 e0       	ldi	r23, 0x01	; 1
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
    2838:	15 c0       	rjmp	.+42     	; 0x2864 <main+0xe56>
	}
	else if (count>=THREE)
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	40 f0       	brcs	.+16     	; 0x2850 <main+0xe42>
	{
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"YOU PASSED",LCD_CMD_1ST_LINE,2);
    2840:	22 e0       	ldi	r18, 0x02	; 2
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	63 eb       	ldi	r22, 0xB3	; 179
    2846:	71 e0       	ldi	r23, 0x01	; 1
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
    284e:	0a c0       	rjmp	.+20     	; 0x2864 <main+0xe56>
	}
	
	else if (count<THREE)
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	38 f4       	brcc	.+14     	; 0x2864 <main+0xe56>
	{
		LCD_displayStringRowColumn(FOUR_BIT_MODE,"YOU FAILED",LCD_CMD_1ST_LINE,2);
    2856:	22 e0       	ldi	r18, 0x02	; 2
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	6e eb       	ldi	r22, 0xBE	; 190
    285c:	71 e0       	ldi	r23, 0x01	; 1
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_displayStringRowColumn>
	}
	while (1)
	{
		;
	}
    2864:	ff cf       	rjmp	.-2      	; 0x2864 <main+0xe56>

00002866 <DIO_WritePin>:
#include "DIO_Serialized.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	00 d0       	rcall	.+0      	; 0x286c <DIO_WritePin+0x6>
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum>=0 && PinNum<=7)
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	88 30       	cpi	r24, 0x08	; 8
    2878:	a0 f5       	brcc	.+104    	; 0x28e2 <DIO_WritePin+0x7c>
	{
		switch(PinValue)
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	c1 f0       	breq	.+48     	; 0x28b4 <DIO_WritePin+0x4e>
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	09 f0       	breq	.+2      	; 0x288a <DIO_WritePin+0x24>
				*((volatile uint8*)(D+2))&=~(1<<(PinNum%8));
				break;
		}
	}
	
}
    2888:	ed c0       	rjmp	.+474    	; 0x2a64 <DIO_WritePin+0x1fe>
	if(PinNum>=0 && PinNum<=7)
	{
		switch(PinValue)
		{
			case SET:
			*((volatile uint8*)(A+2))|=(1<<PinNum);
    288a:	8b e3       	ldi	r24, 0x3B	; 59
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	2b e3       	ldi	r18, 0x3B	; 59
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	f9 01       	movw	r30, r18
    2894:	20 81       	ld	r18, Z
    2896:	62 2f       	mov	r22, r18
    2898:	29 81       	ldd	r18, Y+1	; 0x01
    289a:	42 2f       	mov	r20, r18
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	21 e0       	ldi	r18, 0x01	; 1
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <DIO_WritePin+0x42>
    28a4:	22 0f       	add	r18, r18
    28a6:	33 1f       	adc	r19, r19
    28a8:	4a 95       	dec	r20
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <DIO_WritePin+0x3e>
    28ac:	26 2b       	or	r18, r22
    28ae:	fc 01       	movw	r30, r24
    28b0:	20 83       	st	Z, r18
			break;
    28b2:	d8 c0       	rjmp	.+432    	; 0x2a64 <DIO_WritePin+0x1fe>
			case RESET:
				*((volatile uint8*)(A+2))&=~(1<<PinNum);
    28b4:	8b e3       	ldi	r24, 0x3B	; 59
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	2b e3       	ldi	r18, 0x3B	; 59
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	f9 01       	movw	r30, r18
    28be:	20 81       	ld	r18, Z
    28c0:	62 2f       	mov	r22, r18
    28c2:	29 81       	ldd	r18, Y+1	; 0x01
    28c4:	42 2f       	mov	r20, r18
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <DIO_WritePin+0x6c>
    28ce:	22 0f       	add	r18, r18
    28d0:	33 1f       	adc	r19, r19
    28d2:	4a 95       	dec	r20
    28d4:	e2 f7       	brpl	.-8      	; 0x28ce <DIO_WritePin+0x68>
    28d6:	20 95       	com	r18
    28d8:	26 23       	and	r18, r22
    28da:	fc 01       	movw	r30, r24
    28dc:	20 83       	st	Z, r18
				break;
    28de:	00 00       	nop
    28e0:	c1 c0       	rjmp	.+386    	; 0x2a64 <DIO_WritePin+0x1fe>
		}	
	}
	else if(PinNum>=8 && PinNum<=15)
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	88 30       	cpi	r24, 0x08	; 8
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <DIO_WritePin+0x84>
    28e8:	3d c0       	rjmp	.+122    	; 0x2964 <DIO_WritePin+0xfe>
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	80 31       	cpi	r24, 0x10	; 16
    28ee:	d0 f5       	brcc	.+116    	; 0x2964 <DIO_WritePin+0xfe>
	{
	 	switch(PinValue)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	88 2f       	mov	r24, r24
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	d9 f0       	breq	.+54     	; 0x2930 <DIO_WritePin+0xca>
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	09 f0       	breq	.+2      	; 0x2900 <DIO_WritePin+0x9a>
				break;
			case RESET:
				*((volatile uint8*)(B+2))&=~(1<<(PinNum%8));
				break;
		}
	}
    28fe:	b2 c0       	rjmp	.+356    	; 0x2a64 <DIO_WritePin+0x1fe>
	else if(PinNum>=8 && PinNum<=15)
	{
	 	switch(PinValue)
		{
			case SET:
				*((volatile uint8*)(B+2))|=(1<<(PinNum%8));
    2900:	88 e3       	ldi	r24, 0x38	; 56
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	28 e3       	ldi	r18, 0x38	; 56
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	f9 01       	movw	r30, r18
    290a:	20 81       	ld	r18, Z
    290c:	62 2f       	mov	r22, r18
    290e:	29 81       	ldd	r18, Y+1	; 0x01
    2910:	22 2f       	mov	r18, r18
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	a9 01       	movw	r20, r18
    2916:	47 70       	andi	r20, 0x07	; 7
    2918:	55 27       	eor	r21, r21
    291a:	21 e0       	ldi	r18, 0x01	; 1
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <DIO_WritePin+0xbe>
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	4a 95       	dec	r20
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <DIO_WritePin+0xba>
    2928:	26 2b       	or	r18, r22
    292a:	fc 01       	movw	r30, r24
    292c:	20 83       	st	Z, r18
				break;
    292e:	19 c0       	rjmp	.+50     	; 0x2962 <DIO_WritePin+0xfc>
			case RESET:
				*((volatile uint8*)(B+2))&=~(1<<(PinNum%8));
    2930:	88 e3       	ldi	r24, 0x38	; 56
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	28 e3       	ldi	r18, 0x38	; 56
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	f9 01       	movw	r30, r18
    293a:	20 81       	ld	r18, Z
    293c:	62 2f       	mov	r22, r18
    293e:	29 81       	ldd	r18, Y+1	; 0x01
    2940:	22 2f       	mov	r18, r18
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	a9 01       	movw	r20, r18
    2946:	47 70       	andi	r20, 0x07	; 7
    2948:	55 27       	eor	r21, r21
    294a:	21 e0       	ldi	r18, 0x01	; 1
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_WritePin+0xee>
    2950:	22 0f       	add	r18, r18
    2952:	33 1f       	adc	r19, r19
    2954:	4a 95       	dec	r20
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_WritePin+0xea>
    2958:	20 95       	com	r18
    295a:	26 23       	and	r18, r22
    295c:	fc 01       	movw	r30, r24
    295e:	20 83       	st	Z, r18
				break;
    2960:	00 00       	nop
		}
	}
    2962:	80 c0       	rjmp	.+256    	; 0x2a64 <DIO_WritePin+0x1fe>
	else if(PinNum>=16 && PinNum<=23)
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	80 31       	cpi	r24, 0x10	; 16
    2968:	08 f4       	brcc	.+2      	; 0x296c <DIO_WritePin+0x106>
    296a:	3d c0       	rjmp	.+122    	; 0x29e6 <DIO_WritePin+0x180>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	88 31       	cpi	r24, 0x18	; 24
    2970:	d0 f5       	brcc	.+116    	; 0x29e6 <DIO_WritePin+0x180>
	{
		switch(PinValue)
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	d9 f0       	breq	.+54     	; 0x29b2 <DIO_WritePin+0x14c>
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	09 f0       	breq	.+2      	; 0x2982 <DIO_WritePin+0x11c>
				break;
			case RESET:
				*((volatile uint8*)(C+2))&=~(1<<(PinNum%8));
				break;
		}
	}
    2980:	71 c0       	rjmp	.+226    	; 0x2a64 <DIO_WritePin+0x1fe>
	else if(PinNum>=16 && PinNum<=23)
	{
		switch(PinValue)
		{
			case SET:
				*((volatile uint8*)(C+2))|=(1<<(PinNum%8));
    2982:	85 e3       	ldi	r24, 0x35	; 53
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	25 e3       	ldi	r18, 0x35	; 53
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	f9 01       	movw	r30, r18
    298c:	20 81       	ld	r18, Z
    298e:	62 2f       	mov	r22, r18
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	22 2f       	mov	r18, r18
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	a9 01       	movw	r20, r18
    2998:	47 70       	andi	r20, 0x07	; 7
    299a:	55 27       	eor	r21, r21
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_WritePin+0x140>
    29a2:	22 0f       	add	r18, r18
    29a4:	33 1f       	adc	r19, r19
    29a6:	4a 95       	dec	r20
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_WritePin+0x13c>
    29aa:	26 2b       	or	r18, r22
    29ac:	fc 01       	movw	r30, r24
    29ae:	20 83       	st	Z, r18
				break;
    29b0:	19 c0       	rjmp	.+50     	; 0x29e4 <DIO_WritePin+0x17e>
			case RESET:
				*((volatile uint8*)(C+2))&=~(1<<(PinNum%8));
    29b2:	85 e3       	ldi	r24, 0x35	; 53
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	25 e3       	ldi	r18, 0x35	; 53
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	f9 01       	movw	r30, r18
    29bc:	20 81       	ld	r18, Z
    29be:	62 2f       	mov	r22, r18
    29c0:	29 81       	ldd	r18, Y+1	; 0x01
    29c2:	22 2f       	mov	r18, r18
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	a9 01       	movw	r20, r18
    29c8:	47 70       	andi	r20, 0x07	; 7
    29ca:	55 27       	eor	r21, r21
    29cc:	21 e0       	ldi	r18, 0x01	; 1
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <DIO_WritePin+0x170>
    29d2:	22 0f       	add	r18, r18
    29d4:	33 1f       	adc	r19, r19
    29d6:	4a 95       	dec	r20
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <DIO_WritePin+0x16c>
    29da:	20 95       	com	r18
    29dc:	26 23       	and	r18, r22
    29de:	fc 01       	movw	r30, r24
    29e0:	20 83       	st	Z, r18
				break;
    29e2:	00 00       	nop
		}
	}
    29e4:	3f c0       	rjmp	.+126    	; 0x2a64 <DIO_WritePin+0x1fe>
	else if(PinNum>=23 && PinNum<=31)
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	87 31       	cpi	r24, 0x17	; 23
    29ea:	e0 f1       	brcs	.+120    	; 0x2a64 <DIO_WritePin+0x1fe>
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	80 32       	cpi	r24, 0x20	; 32
    29f0:	c8 f5       	brcc	.+114    	; 0x2a64 <DIO_WritePin+0x1fe>
	{
		switch(PinValue)
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	d9 f0       	breq	.+54     	; 0x2a32 <DIO_WritePin+0x1cc>
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <DIO_WritePin+0x19c>
				*((volatile uint8*)(D+2))&=~(1<<(PinNum%8));
				break;
		}
	}
	
}
    2a00:	31 c0       	rjmp	.+98     	; 0x2a64 <DIO_WritePin+0x1fe>
	else if(PinNum>=23 && PinNum<=31)
	{
		switch(PinValue)
		{
			case SET:
				*((volatile uint8*)(D+2))|=(1<<(PinNum%8));
    2a02:	82 e3       	ldi	r24, 0x32	; 50
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	22 e3       	ldi	r18, 0x32	; 50
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	f9 01       	movw	r30, r18
    2a0c:	20 81       	ld	r18, Z
    2a0e:	62 2f       	mov	r22, r18
    2a10:	29 81       	ldd	r18, Y+1	; 0x01
    2a12:	22 2f       	mov	r18, r18
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	a9 01       	movw	r20, r18
    2a18:	47 70       	andi	r20, 0x07	; 7
    2a1a:	55 27       	eor	r21, r21
    2a1c:	21 e0       	ldi	r18, 0x01	; 1
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <DIO_WritePin+0x1c0>
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	4a 95       	dec	r20
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <DIO_WritePin+0x1bc>
    2a2a:	26 2b       	or	r18, r22
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
				break;
    2a30:	19 c0       	rjmp	.+50     	; 0x2a64 <DIO_WritePin+0x1fe>
			case RESET:
				*((volatile uint8*)(D+2))&=~(1<<(PinNum%8));
    2a32:	82 e3       	ldi	r24, 0x32	; 50
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	22 e3       	ldi	r18, 0x32	; 50
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	f9 01       	movw	r30, r18
    2a3c:	20 81       	ld	r18, Z
    2a3e:	62 2f       	mov	r22, r18
    2a40:	29 81       	ldd	r18, Y+1	; 0x01
    2a42:	22 2f       	mov	r18, r18
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	a9 01       	movw	r20, r18
    2a48:	47 70       	andi	r20, 0x07	; 7
    2a4a:	55 27       	eor	r21, r21
    2a4c:	21 e0       	ldi	r18, 0x01	; 1
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_WritePin+0x1f0>
    2a52:	22 0f       	add	r18, r18
    2a54:	33 1f       	adc	r19, r19
    2a56:	4a 95       	dec	r20
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <DIO_WritePin+0x1ec>
    2a5a:	20 95       	com	r18
    2a5c:	26 23       	and	r18, r22
    2a5e:	fc 01       	movw	r30, r24
    2a60:	20 83       	st	Z, r18
				break;
    2a62:	00 00       	nop
		}
	}
	
}
    2a64:	00 00       	nop
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	08 95       	ret

00002a70 <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <DIO_ReadPin+0x6>
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 val=0;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
	
	if(PinNum>=0 && PinNum<=7)
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	88 30       	cpi	r24, 0x08	; 8
    2a82:	e0 f4       	brcc	.+56     	; 0x2abc <DIO_ReadPin+0x4c>
	{
		val=(uint8)(*((volatile uint8*)(A))&(1<<PinNum))>>PinNum;
    2a84:	89 e3       	ldi	r24, 0x39	; 57
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	fc 01       	movw	r30, r24
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <DIO_ReadPin+0x2e>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	2a 95       	dec	r18
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <DIO_ReadPin+0x2a>
    2aa2:	84 23       	and	r24, r20
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    2aaa:	22 2f       	mov	r18, r18
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <DIO_ReadPin+0x44>
    2ab0:	95 95       	asr	r25
    2ab2:	87 95       	ror	r24
    2ab4:	2a 95       	dec	r18
    2ab6:	e2 f7       	brpl	.-8      	; 0x2ab0 <DIO_ReadPin+0x40>
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	74 c0       	rjmp	.+232    	; 0x2ba4 <DIO_ReadPin+0x134>
	}
	else if(PinNum>=8 && PinNum<=15)
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	88 30       	cpi	r24, 0x08	; 8
    2ac0:	20 f1       	brcs	.+72     	; 0x2b0a <DIO_ReadPin+0x9a>
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	80 31       	cpi	r24, 0x10	; 16
    2ac6:	08 f5       	brcc	.+66     	; 0x2b0a <DIO_ReadPin+0x9a>
	{
		val=(uint8)(*((volatile uint8*)(B))&(1<<(PinNum%8)))>>(PinNum%8);
    2ac8:	86 e3       	ldi	r24, 0x36	; 54
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	fc 01       	movw	r30, r24
    2ace:	80 81       	ld	r24, Z
    2ad0:	48 2f       	mov	r20, r24
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 01       	movw	r18, r24
    2ada:	27 70       	andi	r18, 0x07	; 7
    2adc:	33 27       	eor	r19, r19
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <DIO_ReadPin+0x78>
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	2a 95       	dec	r18
    2aea:	e2 f7       	brpl	.-8      	; 0x2ae4 <DIO_ReadPin+0x74>
    2aec:	84 23       	and	r24, r20
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	2a 81       	ldd	r18, Y+2	; 0x02
    2af4:	22 2f       	mov	r18, r18
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	27 70       	andi	r18, 0x07	; 7
    2afa:	33 27       	eor	r19, r19
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <DIO_ReadPin+0x92>
    2afe:	95 95       	asr	r25
    2b00:	87 95       	ror	r24
    2b02:	2a 95       	dec	r18
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <DIO_ReadPin+0x8e>
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	4d c0       	rjmp	.+154    	; 0x2ba4 <DIO_ReadPin+0x134>
	}
	else if(PinNum>=16 && PinNum<=23)
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	80 31       	cpi	r24, 0x10	; 16
    2b0e:	20 f1       	brcs	.+72     	; 0x2b58 <DIO_ReadPin+0xe8>
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	88 31       	cpi	r24, 0x18	; 24
    2b14:	08 f5       	brcc	.+66     	; 0x2b58 <DIO_ReadPin+0xe8>
	{
		val=(uint8)(*((volatile uint8*)(C))&(1<<(PinNum%8)))>>(PinNum%8);
    2b16:	83 e3       	ldi	r24, 0x33	; 51
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	80 81       	ld	r24, Z
    2b1e:	48 2f       	mov	r20, r24
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	9c 01       	movw	r18, r24
    2b28:	27 70       	andi	r18, 0x07	; 7
    2b2a:	33 27       	eor	r19, r19
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <DIO_ReadPin+0xc6>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	2a 95       	dec	r18
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <DIO_ReadPin+0xc2>
    2b3a:	84 23       	and	r24, r20
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	2a 81       	ldd	r18, Y+2	; 0x02
    2b42:	22 2f       	mov	r18, r18
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	27 70       	andi	r18, 0x07	; 7
    2b48:	33 27       	eor	r19, r19
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_ReadPin+0xe0>
    2b4c:	95 95       	asr	r25
    2b4e:	87 95       	ror	r24
    2b50:	2a 95       	dec	r18
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_ReadPin+0xdc>
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	26 c0       	rjmp	.+76     	; 0x2ba4 <DIO_ReadPin+0x134>
	}
	else if(PinNum>=23 && PinNum<=31)
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	87 31       	cpi	r24, 0x17	; 23
    2b5c:	18 f1       	brcs	.+70     	; 0x2ba4 <DIO_ReadPin+0x134>
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	80 32       	cpi	r24, 0x20	; 32
    2b62:	00 f5       	brcc	.+64     	; 0x2ba4 <DIO_ReadPin+0x134>
	{
		val=(uint8)(*((volatile uint8*)(D))&(1<<(PinNum%8)))>>(PinNum%8);
    2b64:	80 e3       	ldi	r24, 0x30	; 48
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	fc 01       	movw	r30, r24
    2b6a:	80 81       	ld	r24, Z
    2b6c:	48 2f       	mov	r20, r24
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9c 01       	movw	r18, r24
    2b76:	27 70       	andi	r18, 0x07	; 7
    2b78:	33 27       	eor	r19, r19
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <DIO_ReadPin+0x114>
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	2a 95       	dec	r18
    2b86:	e2 f7       	brpl	.-8      	; 0x2b80 <DIO_ReadPin+0x110>
    2b88:	84 23       	and	r24, r20
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b90:	22 2f       	mov	r18, r18
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	27 70       	andi	r18, 0x07	; 7
    2b96:	33 27       	eor	r19, r19
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_ReadPin+0x12e>
    2b9a:	95 95       	asr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	2a 95       	dec	r18
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_ReadPin+0x12a>
    2ba2:	89 83       	std	Y+1, r24	; 0x01
	}
	return val;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <DIO_SetPinDirection>:



void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <DIO_SetPinDirection+0x6>
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum>=0 && PinNum<=7)
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	88 30       	cpi	r24, 0x08	; 8
    2bc2:	a0 f5       	brcc	.+104    	; 0x2c2c <DIO_SetPinDirection+0x7c>
	{
		switch(PinDirection)
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	c1 f0       	breq	.+48     	; 0x2bfe <DIO_SetPinDirection+0x4e>
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <DIO_SetPinDirection+0x24>
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
			break;
		}
	}
	
}
    2bd2:	ed c0       	rjmp	.+474    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	if(PinNum>=0 && PinNum<=7)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(A+1))|=(1<<PinNum);
    2bd4:	8a e3       	ldi	r24, 0x3A	; 58
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	2a e3       	ldi	r18, 0x3A	; 58
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	f9 01       	movw	r30, r18
    2bde:	20 81       	ld	r18, Z
    2be0:	62 2f       	mov	r22, r18
    2be2:	29 81       	ldd	r18, Y+1	; 0x01
    2be4:	42 2f       	mov	r20, r18
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	21 e0       	ldi	r18, 0x01	; 1
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <DIO_SetPinDirection+0x42>
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	4a 95       	dec	r20
    2bf4:	e2 f7       	brpl	.-8      	; 0x2bee <DIO_SetPinDirection+0x3e>
    2bf6:	26 2b       	or	r18, r22
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 83       	st	Z, r18
			break;
    2bfc:	d8 c0       	rjmp	.+432    	; 0x2dae <DIO_SetPinDirection+0x1fe>
			case INPUT:
			*((volatile uint8*)(A+1))&=~(1<<PinNum);
    2bfe:	8a e3       	ldi	r24, 0x3A	; 58
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	2a e3       	ldi	r18, 0x3A	; 58
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	f9 01       	movw	r30, r18
    2c08:	20 81       	ld	r18, Z
    2c0a:	62 2f       	mov	r22, r18
    2c0c:	29 81       	ldd	r18, Y+1	; 0x01
    2c0e:	42 2f       	mov	r20, r18
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	21 e0       	ldi	r18, 0x01	; 1
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <DIO_SetPinDirection+0x6c>
    2c18:	22 0f       	add	r18, r18
    2c1a:	33 1f       	adc	r19, r19
    2c1c:	4a 95       	dec	r20
    2c1e:	e2 f7       	brpl	.-8      	; 0x2c18 <DIO_SetPinDirection+0x68>
    2c20:	20 95       	com	r18
    2c22:	26 23       	and	r18, r22
    2c24:	fc 01       	movw	r30, r24
    2c26:	20 83       	st	Z, r18
			break;
    2c28:	00 00       	nop
    2c2a:	c1 c0       	rjmp	.+386    	; 0x2dae <DIO_SetPinDirection+0x1fe>
		}
	}
	else if(PinNum>=8 && PinNum<=15)
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	88 30       	cpi	r24, 0x08	; 8
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <DIO_SetPinDirection+0x84>
    2c32:	3d c0       	rjmp	.+122    	; 0x2cae <DIO_SetPinDirection+0xfe>
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	80 31       	cpi	r24, 0x10	; 16
    2c38:	d0 f5       	brcc	.+116    	; 0x2cae <DIO_SetPinDirection+0xfe>
	{
		switch(PinDirection)
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	d9 f0       	breq	.+54     	; 0x2c7a <DIO_SetPinDirection+0xca>
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <DIO_SetPinDirection+0x9a>
			break;
			case INPUT:
			*((volatile uint8*)(B+1))&=~(1<<(PinNum%8));
			break;
		}
	}
    2c48:	b2 c0       	rjmp	.+356    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	else if(PinNum>=8 && PinNum<=15)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(B+1))|=(1<<(PinNum%8));
    2c4a:	87 e3       	ldi	r24, 0x37	; 55
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	27 e3       	ldi	r18, 0x37	; 55
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	f9 01       	movw	r30, r18
    2c54:	20 81       	ld	r18, Z
    2c56:	62 2f       	mov	r22, r18
    2c58:	29 81       	ldd	r18, Y+1	; 0x01
    2c5a:	22 2f       	mov	r18, r18
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	a9 01       	movw	r20, r18
    2c60:	47 70       	andi	r20, 0x07	; 7
    2c62:	55 27       	eor	r21, r21
    2c64:	21 e0       	ldi	r18, 0x01	; 1
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <DIO_SetPinDirection+0xbe>
    2c6a:	22 0f       	add	r18, r18
    2c6c:	33 1f       	adc	r19, r19
    2c6e:	4a 95       	dec	r20
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <DIO_SetPinDirection+0xba>
    2c72:	26 2b       	or	r18, r22
    2c74:	fc 01       	movw	r30, r24
    2c76:	20 83       	st	Z, r18
			break;
    2c78:	19 c0       	rjmp	.+50     	; 0x2cac <DIO_SetPinDirection+0xfc>
			case INPUT:
			*((volatile uint8*)(B+1))&=~(1<<(PinNum%8));
    2c7a:	87 e3       	ldi	r24, 0x37	; 55
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	27 e3       	ldi	r18, 0x37	; 55
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	f9 01       	movw	r30, r18
    2c84:	20 81       	ld	r18, Z
    2c86:	62 2f       	mov	r22, r18
    2c88:	29 81       	ldd	r18, Y+1	; 0x01
    2c8a:	22 2f       	mov	r18, r18
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	a9 01       	movw	r20, r18
    2c90:	47 70       	andi	r20, 0x07	; 7
    2c92:	55 27       	eor	r21, r21
    2c94:	21 e0       	ldi	r18, 0x01	; 1
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <DIO_SetPinDirection+0xee>
    2c9a:	22 0f       	add	r18, r18
    2c9c:	33 1f       	adc	r19, r19
    2c9e:	4a 95       	dec	r20
    2ca0:	e2 f7       	brpl	.-8      	; 0x2c9a <DIO_SetPinDirection+0xea>
    2ca2:	20 95       	com	r18
    2ca4:	26 23       	and	r18, r22
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	20 83       	st	Z, r18
			break;
    2caa:	00 00       	nop
		}
	}
    2cac:	80 c0       	rjmp	.+256    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	else if(PinNum>=16 && PinNum<=23)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	80 31       	cpi	r24, 0x10	; 16
    2cb2:	08 f4       	brcc	.+2      	; 0x2cb6 <DIO_SetPinDirection+0x106>
    2cb4:	3d c0       	rjmp	.+122    	; 0x2d30 <DIO_SetPinDirection+0x180>
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	88 31       	cpi	r24, 0x18	; 24
    2cba:	d0 f5       	brcc	.+116    	; 0x2d30 <DIO_SetPinDirection+0x180>
	{
		switch(PinDirection)
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	d9 f0       	breq	.+54     	; 0x2cfc <DIO_SetPinDirection+0x14c>
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <DIO_SetPinDirection+0x11c>
			break;
			case INPUT:
			*((volatile uint8*)(C+1))&=~(1<<(PinNum%8));
			break;
		}
	}
    2cca:	71 c0       	rjmp	.+226    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	else if(PinNum>=16 && PinNum<=23)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(C+1))|=(1<<(PinNum%8));
    2ccc:	84 e3       	ldi	r24, 0x34	; 52
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	24 e3       	ldi	r18, 0x34	; 52
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	f9 01       	movw	r30, r18
    2cd6:	20 81       	ld	r18, Z
    2cd8:	62 2f       	mov	r22, r18
    2cda:	29 81       	ldd	r18, Y+1	; 0x01
    2cdc:	22 2f       	mov	r18, r18
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	a9 01       	movw	r20, r18
    2ce2:	47 70       	andi	r20, 0x07	; 7
    2ce4:	55 27       	eor	r21, r21
    2ce6:	21 e0       	ldi	r18, 0x01	; 1
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <DIO_SetPinDirection+0x140>
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
    2cf0:	4a 95       	dec	r20
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <DIO_SetPinDirection+0x13c>
    2cf4:	26 2b       	or	r18, r22
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	20 83       	st	Z, r18
			break;
    2cfa:	19 c0       	rjmp	.+50     	; 0x2d2e <DIO_SetPinDirection+0x17e>
			case INPUT:
			*((volatile uint8*)(C+1))&=~(1<<(PinNum%8));
    2cfc:	84 e3       	ldi	r24, 0x34	; 52
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	24 e3       	ldi	r18, 0x34	; 52
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	f9 01       	movw	r30, r18
    2d06:	20 81       	ld	r18, Z
    2d08:	62 2f       	mov	r22, r18
    2d0a:	29 81       	ldd	r18, Y+1	; 0x01
    2d0c:	22 2f       	mov	r18, r18
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	a9 01       	movw	r20, r18
    2d12:	47 70       	andi	r20, 0x07	; 7
    2d14:	55 27       	eor	r21, r21
    2d16:	21 e0       	ldi	r18, 0x01	; 1
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <DIO_SetPinDirection+0x170>
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	4a 95       	dec	r20
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <DIO_SetPinDirection+0x16c>
    2d24:	20 95       	com	r18
    2d26:	26 23       	and	r18, r22
    2d28:	fc 01       	movw	r30, r24
    2d2a:	20 83       	st	Z, r18
			break;
    2d2c:	00 00       	nop
		}
	}
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	else if(PinNum>=23 && PinNum<=31)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	87 31       	cpi	r24, 0x17	; 23
    2d34:	e0 f1       	brcs	.+120    	; 0x2dae <DIO_SetPinDirection+0x1fe>
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	80 32       	cpi	r24, 0x20	; 32
    2d3a:	c8 f5       	brcc	.+114    	; 0x2dae <DIO_SetPinDirection+0x1fe>
	{
		switch(PinDirection)
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	d9 f0       	breq	.+54     	; 0x2d7c <DIO_SetPinDirection+0x1cc>
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <DIO_SetPinDirection+0x19c>
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
			break;
		}
	}
	
}
    2d4a:	31 c0       	rjmp	.+98     	; 0x2dae <DIO_SetPinDirection+0x1fe>
	else if(PinNum>=23 && PinNum<=31)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(D+1))|=(1<<(PinNum%8));
    2d4c:	81 e3       	ldi	r24, 0x31	; 49
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	21 e3       	ldi	r18, 0x31	; 49
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	f9 01       	movw	r30, r18
    2d56:	20 81       	ld	r18, Z
    2d58:	62 2f       	mov	r22, r18
    2d5a:	29 81       	ldd	r18, Y+1	; 0x01
    2d5c:	22 2f       	mov	r18, r18
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	a9 01       	movw	r20, r18
    2d62:	47 70       	andi	r20, 0x07	; 7
    2d64:	55 27       	eor	r21, r21
    2d66:	21 e0       	ldi	r18, 0x01	; 1
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <DIO_SetPinDirection+0x1c0>
    2d6c:	22 0f       	add	r18, r18
    2d6e:	33 1f       	adc	r19, r19
    2d70:	4a 95       	dec	r20
    2d72:	e2 f7       	brpl	.-8      	; 0x2d6c <DIO_SetPinDirection+0x1bc>
    2d74:	26 2b       	or	r18, r22
    2d76:	fc 01       	movw	r30, r24
    2d78:	20 83       	st	Z, r18
			break;
    2d7a:	19 c0       	rjmp	.+50     	; 0x2dae <DIO_SetPinDirection+0x1fe>
			case INPUT:
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
    2d7c:	81 e3       	ldi	r24, 0x31	; 49
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	21 e3       	ldi	r18, 0x31	; 49
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	f9 01       	movw	r30, r18
    2d86:	20 81       	ld	r18, Z
    2d88:	62 2f       	mov	r22, r18
    2d8a:	29 81       	ldd	r18, Y+1	; 0x01
    2d8c:	22 2f       	mov	r18, r18
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	a9 01       	movw	r20, r18
    2d92:	47 70       	andi	r20, 0x07	; 7
    2d94:	55 27       	eor	r21, r21
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <DIO_SetPinDirection+0x1f0>
    2d9c:	22 0f       	add	r18, r18
    2d9e:	33 1f       	adc	r19, r19
    2da0:	4a 95       	dec	r20
    2da2:	e2 f7       	brpl	.-8      	; 0x2d9c <DIO_SetPinDirection+0x1ec>
    2da4:	20 95       	com	r18
    2da6:	26 23       	and	r18, r22
    2da8:	fc 01       	movw	r30, r24
    2daa:	20 83       	st	Z, r18
			break;
    2dac:	00 00       	nop
		}
	}
	
}
    2dae:	00 00       	nop
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	08 95       	ret

00002dba <Write_pin>:
 */

#include "timer.h"

static void Write_pin(uint8 reg,uint8 pin,uint8 val)
{
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <Write_pin+0x6>
    2dc0:	1f 92       	push	r1
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	6a 83       	std	Y+2, r22	; 0x02
    2dca:	4b 83       	std	Y+3, r20	; 0x03
	if (val==SET)
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	81 30       	cpi	r24, 0x01	; 1
    2dd0:	c1 f4       	brne	.+48     	; 0x2e02 <Write_pin+0x48>
	{
		*((volatile uint8*)(reg))|=(1<<pin);
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9c 01       	movw	r18, r24
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	fc 01       	movw	r30, r24
    2de2:	80 81       	ld	r24, Z
    2de4:	68 2f       	mov	r22, r24
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	48 2f       	mov	r20, r24
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <Write_pin+0x3c>
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	4a 95       	dec	r20
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <Write_pin+0x38>
    2dfa:	86 2b       	or	r24, r22
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	80 83       	st	Z, r24
	}
	else if (val==RESET)
	{
		*((volatile uint8*)(reg))&=~(1<<pin);
	}
}
    2e00:	1b c0       	rjmp	.+54     	; 0x2e38 <Write_pin+0x7e>
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))|=(1<<pin);
	}
	else if (val==RESET)
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	88 23       	and	r24, r24
    2e06:	c1 f4       	brne	.+48     	; 0x2e38 <Write_pin+0x7e>
	{
		*((volatile uint8*)(reg))&=~(1<<pin);
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9c 01       	movw	r18, r24
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 81       	ld	r24, Z
    2e1a:	68 2f       	mov	r22, r24
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	48 2f       	mov	r20, r24
    2e20:	50 e0       	ldi	r21, 0x00	; 0
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <Write_pin+0x72>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	4a 95       	dec	r20
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <Write_pin+0x6e>
    2e30:	80 95       	com	r24
    2e32:	86 23       	and	r24, r22
    2e34:	f9 01       	movw	r30, r18
    2e36:	80 83       	st	Z, r24
	}
}
    2e38:	00 00       	nop
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <Write_Register>:

static void  Write_Register(uint8 reg,uint8 val)
{
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <Write_Register+0x6>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	6a 83       	std	Y+2, r22	; 0x02
	if (val==SET)
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	81 30       	cpi	r24, 0x01	; 1
    2e58:	39 f4       	brne	.+14     	; 0x2e68 <Write_Register+0x22>
	{
		*((volatile uint8*)(reg))=0xff;
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	88 2f       	mov	r24, r24
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	2f ef       	ldi	r18, 0xFF	; 255
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 83       	st	Z, r18
	}
	else
	{
		*((volatile uint8*)(reg))=val;
	}
}
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <Write_Register+0x40>
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))=0xff;
	}
	else if (val==RESET)
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	88 23       	and	r24, r24
    2e6c:	31 f4       	brne	.+12     	; 0x2e7a <Write_Register+0x34>
	{
		*((volatile uint8*)(reg))=0x00;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	fc 01       	movw	r30, r24
    2e76:	10 82       	st	Z, r1
	}
	else
	{
		*((volatile uint8*)(reg))=val;
	}
}
    2e78:	06 c0       	rjmp	.+12     	; 0x2e86 <Write_Register+0x40>
	{
		*((volatile uint8*)(reg))=0x00;
	}
	else
	{
		*((volatile uint8*)(reg))=val;
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	2a 81       	ldd	r18, Y+2	; 0x02
    2e82:	fc 01       	movw	r30, r24
    2e84:	20 83       	st	Z, r18
	}
}
    2e86:	00 00       	nop
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	08 95       	ret

00002e92 <Read_pin>:
static uint8 Read_pin(uint8 reg,uint8 pin)
{
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <Read_pin+0x6>
    2e98:	1f 92       	push	r1
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
    2ea0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 val;
	val=(*((volatile uint8*)(reg))&(1<<pin));
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	80 81       	ld	r24, Z
    2eac:	48 2f       	mov	r20, r24
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <Read_pin+0x2c>
    2eba:	88 0f       	add	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	2a 95       	dec	r18
    2ec0:	e2 f7       	brpl	.-8      	; 0x2eba <Read_pin+0x28>
    2ec2:	84 23       	and	r24, r20
    2ec4:	89 83       	std	Y+1, r24	; 0x01
	return val;
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <timer_init>:
void timer_init()
{
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	
	Write_pin(_TIFR,1,SET);
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	88 e5       	ldi	r24, 0x58	; 88
    2ee2:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Write_pin>
	Write_Register(_TCNT0,0);
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	82 e5       	ldi	r24, 0x52	; 82
    2eea:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Write_Register>
	Write_Register(_OCR0,249);
    2eee:	69 ef       	ldi	r22, 0xF9	; 249
    2ef0:	8c e5       	ldi	r24, 0x5C	; 92
    2ef2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Write_Register>
	
	Write_pin(_TCCR0,3,SET); //mode CTC
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	63 e0       	ldi	r22, 0x03	; 3
    2efa:	83 e5       	ldi	r24, 0x53	; 83
    2efc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Write_pin>
	Write_pin(_TCCR0,1,SET);//64 prescaler
    2f00:	41 e0       	ldi	r20, 0x01	; 1
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	83 e5       	ldi	r24, 0x53	; 83
    2f06:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Write_pin>
	Write_pin(_TCCR0,0,SET);
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	83 e5       	ldi	r24, 0x53	; 83
    2f10:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Write_pin>

	
}
    2f14:	00 00       	nop
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <timer_delay>:
void timer_delay(uint32 n) //int time with ms
{
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	28 97       	sbiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	6d 83       	std	Y+5, r22	; 0x05
    2f32:	7e 83       	std	Y+6, r23	; 0x06
    2f34:	8f 83       	std	Y+7, r24	; 0x07
    2f36:	98 87       	std	Y+8, r25	; 0x08
	uint32 i=0;
    2f38:	19 82       	std	Y+1, r1	; 0x01
    2f3a:	1a 82       	std	Y+2, r1	; 0x02
    2f3c:	1b 82       	std	Y+3, r1	; 0x03
    2f3e:	1c 82       	std	Y+4, r1	; 0x04
	Write_Register(_TCNT0,0);
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	82 e5       	ldi	r24, 0x52	; 82
    2f44:	0e 94 23 17 	call	0x2e46	; 0x2e46 <Write_Register>
	for(i=0;i<n;i++)
    2f48:	19 82       	std	Y+1, r1	; 0x01
    2f4a:	1a 82       	std	Y+2, r1	; 0x02
    2f4c:	1b 82       	std	Y+3, r1	; 0x03
    2f4e:	1c 82       	std	Y+4, r1	; 0x04
    2f50:	17 c0       	rjmp	.+46     	; 0x2f80 <timer_delay+0x64>
	{
		while(Read_pin(_TIFR,1)==0);
    2f52:	00 00       	nop
    2f54:	61 e0       	ldi	r22, 0x01	; 1
    2f56:	88 e5       	ldi	r24, 0x58	; 88
    2f58:	0e 94 49 17 	call	0x2e92	; 0x2e92 <Read_pin>
    2f5c:	88 23       	and	r24, r24
    2f5e:	d1 f3       	breq	.-12     	; 0x2f54 <timer_delay+0x38>
		Write_pin(_TIFR,1,SET);
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	88 e5       	ldi	r24, 0x58	; 88
    2f66:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Write_pin>
}
void timer_delay(uint32 n) //int time with ms
{
	uint32 i=0;
	Write_Register(_TCNT0,0);
	for(i=0;i<n;i++)
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f70:	bc 81       	ldd	r27, Y+4	; 0x04
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	a1 1d       	adc	r26, r1
    2f76:	b1 1d       	adc	r27, r1
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	ab 83       	std	Y+3, r26	; 0x03
    2f7e:	bc 83       	std	Y+4, r27	; 0x04
    2f80:	29 81       	ldd	r18, Y+1	; 0x01
    2f82:	3a 81       	ldd	r19, Y+2	; 0x02
    2f84:	4b 81       	ldd	r20, Y+3	; 0x03
    2f86:	5c 81       	ldd	r21, Y+4	; 0x04
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8c:	af 81       	ldd	r26, Y+7	; 0x07
    2f8e:	b8 85       	ldd	r27, Y+8	; 0x08
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	4a 07       	cpc	r20, r26
    2f96:	5b 07       	cpc	r21, r27
    2f98:	e0 f2       	brcs	.-72     	; 0x2f52 <timer_delay+0x36>
	{
		while(Read_pin(_TIFR,1)==0);
		Write_pin(_TIFR,1,SET);
	
	}	
    2f9a:	00 00       	nop
    2f9c:	28 96       	adiw	r28, 0x08	; 8
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	08 95       	ret

00002fae <__subsf3>:
    2fae:	50 58       	subi	r21, 0x80	; 128

00002fb0 <__addsf3>:
    2fb0:	bb 27       	eor	r27, r27
    2fb2:	aa 27       	eor	r26, r26
    2fb4:	0e 94 ef 17 	call	0x2fde	; 0x2fde <__addsf3x>
    2fb8:	0c 94 25 19 	jmp	0x324a	; 0x324a <__fp_round>
    2fbc:	0e 94 17 19 	call	0x322e	; 0x322e <__fp_pscA>
    2fc0:	38 f0       	brcs	.+14     	; 0x2fd0 <__addsf3+0x20>
    2fc2:	0e 94 1e 19 	call	0x323c	; 0x323c <__fp_pscB>
    2fc6:	20 f0       	brcs	.+8      	; 0x2fd0 <__addsf3+0x20>
    2fc8:	39 f4       	brne	.+14     	; 0x2fd8 <__addsf3+0x28>
    2fca:	9f 3f       	cpi	r25, 0xFF	; 255
    2fcc:	19 f4       	brne	.+6      	; 0x2fd4 <__addsf3+0x24>
    2fce:	26 f4       	brtc	.+8      	; 0x2fd8 <__addsf3+0x28>
    2fd0:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__fp_nan>
    2fd4:	0e f4       	brtc	.+2      	; 0x2fd8 <__addsf3+0x28>
    2fd6:	e0 95       	com	r30
    2fd8:	e7 fb       	bst	r30, 7
    2fda:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__fp_inf>

00002fde <__addsf3x>:
    2fde:	e9 2f       	mov	r30, r25
    2fe0:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_split3>
    2fe4:	58 f3       	brcs	.-42     	; 0x2fbc <__addsf3+0xc>
    2fe6:	ba 17       	cp	r27, r26
    2fe8:	62 07       	cpc	r22, r18
    2fea:	73 07       	cpc	r23, r19
    2fec:	84 07       	cpc	r24, r20
    2fee:	95 07       	cpc	r25, r21
    2ff0:	20 f0       	brcs	.+8      	; 0x2ffa <__addsf3x+0x1c>
    2ff2:	79 f4       	brne	.+30     	; 0x3012 <__addsf3x+0x34>
    2ff4:	a6 f5       	brtc	.+104    	; 0x305e <__addsf3x+0x80>
    2ff6:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__fp_zero>
    2ffa:	0e f4       	brtc	.+2      	; 0x2ffe <__addsf3x+0x20>
    2ffc:	e0 95       	com	r30
    2ffe:	0b 2e       	mov	r0, r27
    3000:	ba 2f       	mov	r27, r26
    3002:	a0 2d       	mov	r26, r0
    3004:	0b 01       	movw	r0, r22
    3006:	b9 01       	movw	r22, r18
    3008:	90 01       	movw	r18, r0
    300a:	0c 01       	movw	r0, r24
    300c:	ca 01       	movw	r24, r20
    300e:	a0 01       	movw	r20, r0
    3010:	11 24       	eor	r1, r1
    3012:	ff 27       	eor	r31, r31
    3014:	59 1b       	sub	r21, r25
    3016:	99 f0       	breq	.+38     	; 0x303e <__addsf3x+0x60>
    3018:	59 3f       	cpi	r21, 0xF9	; 249
    301a:	50 f4       	brcc	.+20     	; 0x3030 <__addsf3x+0x52>
    301c:	50 3e       	cpi	r21, 0xE0	; 224
    301e:	68 f1       	brcs	.+90     	; 0x307a <__addsf3x+0x9c>
    3020:	1a 16       	cp	r1, r26
    3022:	f0 40       	sbci	r31, 0x00	; 0
    3024:	a2 2f       	mov	r26, r18
    3026:	23 2f       	mov	r18, r19
    3028:	34 2f       	mov	r19, r20
    302a:	44 27       	eor	r20, r20
    302c:	58 5f       	subi	r21, 0xF8	; 248
    302e:	f3 cf       	rjmp	.-26     	; 0x3016 <__addsf3x+0x38>
    3030:	46 95       	lsr	r20
    3032:	37 95       	ror	r19
    3034:	27 95       	ror	r18
    3036:	a7 95       	ror	r26
    3038:	f0 40       	sbci	r31, 0x00	; 0
    303a:	53 95       	inc	r21
    303c:	c9 f7       	brne	.-14     	; 0x3030 <__addsf3x+0x52>
    303e:	7e f4       	brtc	.+30     	; 0x305e <__addsf3x+0x80>
    3040:	1f 16       	cp	r1, r31
    3042:	ba 0b       	sbc	r27, r26
    3044:	62 0b       	sbc	r22, r18
    3046:	73 0b       	sbc	r23, r19
    3048:	84 0b       	sbc	r24, r20
    304a:	ba f0       	brmi	.+46     	; 0x307a <__addsf3x+0x9c>
    304c:	91 50       	subi	r25, 0x01	; 1
    304e:	a1 f0       	breq	.+40     	; 0x3078 <__addsf3x+0x9a>
    3050:	ff 0f       	add	r31, r31
    3052:	bb 1f       	adc	r27, r27
    3054:	66 1f       	adc	r22, r22
    3056:	77 1f       	adc	r23, r23
    3058:	88 1f       	adc	r24, r24
    305a:	c2 f7       	brpl	.-16     	; 0x304c <__addsf3x+0x6e>
    305c:	0e c0       	rjmp	.+28     	; 0x307a <__addsf3x+0x9c>
    305e:	ba 0f       	add	r27, r26
    3060:	62 1f       	adc	r22, r18
    3062:	73 1f       	adc	r23, r19
    3064:	84 1f       	adc	r24, r20
    3066:	48 f4       	brcc	.+18     	; 0x307a <__addsf3x+0x9c>
    3068:	87 95       	ror	r24
    306a:	77 95       	ror	r23
    306c:	67 95       	ror	r22
    306e:	b7 95       	ror	r27
    3070:	f7 95       	ror	r31
    3072:	9e 3f       	cpi	r25, 0xFE	; 254
    3074:	08 f0       	brcs	.+2      	; 0x3078 <__addsf3x+0x9a>
    3076:	b0 cf       	rjmp	.-160    	; 0x2fd8 <__addsf3+0x28>
    3078:	93 95       	inc	r25
    307a:	88 0f       	add	r24, r24
    307c:	08 f0       	brcs	.+2      	; 0x3080 <__addsf3x+0xa2>
    307e:	99 27       	eor	r25, r25
    3080:	ee 0f       	add	r30, r30
    3082:	97 95       	ror	r25
    3084:	87 95       	ror	r24
    3086:	08 95       	ret

00003088 <__cmpsf2>:
    3088:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__fp_cmp>
    308c:	08 f4       	brcc	.+2      	; 0x3090 <__cmpsf2+0x8>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	08 95       	ret

00003092 <__divsf3>:
    3092:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divsf3x>
    3096:	0c 94 25 19 	jmp	0x324a	; 0x324a <__fp_round>
    309a:	0e 94 1e 19 	call	0x323c	; 0x323c <__fp_pscB>
    309e:	58 f0       	brcs	.+22     	; 0x30b6 <__divsf3+0x24>
    30a0:	0e 94 17 19 	call	0x322e	; 0x322e <__fp_pscA>
    30a4:	40 f0       	brcs	.+16     	; 0x30b6 <__divsf3+0x24>
    30a6:	29 f4       	brne	.+10     	; 0x30b2 <__divsf3+0x20>
    30a8:	5f 3f       	cpi	r21, 0xFF	; 255
    30aa:	29 f0       	breq	.+10     	; 0x30b6 <__divsf3+0x24>
    30ac:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__fp_inf>
    30b0:	51 11       	cpse	r21, r1
    30b2:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__fp_szero>
    30b6:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__fp_nan>

000030ba <__divsf3x>:
    30ba:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_split3>
    30be:	68 f3       	brcs	.-38     	; 0x309a <__divsf3+0x8>

000030c0 <__divsf3_pse>:
    30c0:	99 23       	and	r25, r25
    30c2:	b1 f3       	breq	.-20     	; 0x30b0 <__divsf3+0x1e>
    30c4:	55 23       	and	r21, r21
    30c6:	91 f3       	breq	.-28     	; 0x30ac <__divsf3+0x1a>
    30c8:	95 1b       	sub	r25, r21
    30ca:	55 0b       	sbc	r21, r21
    30cc:	bb 27       	eor	r27, r27
    30ce:	aa 27       	eor	r26, r26
    30d0:	62 17       	cp	r22, r18
    30d2:	73 07       	cpc	r23, r19
    30d4:	84 07       	cpc	r24, r20
    30d6:	38 f0       	brcs	.+14     	; 0x30e6 <__divsf3_pse+0x26>
    30d8:	9f 5f       	subi	r25, 0xFF	; 255
    30da:	5f 4f       	sbci	r21, 0xFF	; 255
    30dc:	22 0f       	add	r18, r18
    30de:	33 1f       	adc	r19, r19
    30e0:	44 1f       	adc	r20, r20
    30e2:	aa 1f       	adc	r26, r26
    30e4:	a9 f3       	breq	.-22     	; 0x30d0 <__divsf3_pse+0x10>
    30e6:	35 d0       	rcall	.+106    	; 0x3152 <__divsf3_pse+0x92>
    30e8:	0e 2e       	mov	r0, r30
    30ea:	3a f0       	brmi	.+14     	; 0x30fa <__divsf3_pse+0x3a>
    30ec:	e0 e8       	ldi	r30, 0x80	; 128
    30ee:	32 d0       	rcall	.+100    	; 0x3154 <__divsf3_pse+0x94>
    30f0:	91 50       	subi	r25, 0x01	; 1
    30f2:	50 40       	sbci	r21, 0x00	; 0
    30f4:	e6 95       	lsr	r30
    30f6:	00 1c       	adc	r0, r0
    30f8:	ca f7       	brpl	.-14     	; 0x30ec <__divsf3_pse+0x2c>
    30fa:	2b d0       	rcall	.+86     	; 0x3152 <__divsf3_pse+0x92>
    30fc:	fe 2f       	mov	r31, r30
    30fe:	29 d0       	rcall	.+82     	; 0x3152 <__divsf3_pse+0x92>
    3100:	66 0f       	add	r22, r22
    3102:	77 1f       	adc	r23, r23
    3104:	88 1f       	adc	r24, r24
    3106:	bb 1f       	adc	r27, r27
    3108:	26 17       	cp	r18, r22
    310a:	37 07       	cpc	r19, r23
    310c:	48 07       	cpc	r20, r24
    310e:	ab 07       	cpc	r26, r27
    3110:	b0 e8       	ldi	r27, 0x80	; 128
    3112:	09 f0       	breq	.+2      	; 0x3116 <__divsf3_pse+0x56>
    3114:	bb 0b       	sbc	r27, r27
    3116:	80 2d       	mov	r24, r0
    3118:	bf 01       	movw	r22, r30
    311a:	ff 27       	eor	r31, r31
    311c:	93 58       	subi	r25, 0x83	; 131
    311e:	5f 4f       	sbci	r21, 0xFF	; 255
    3120:	3a f0       	brmi	.+14     	; 0x3130 <__divsf3_pse+0x70>
    3122:	9e 3f       	cpi	r25, 0xFE	; 254
    3124:	51 05       	cpc	r21, r1
    3126:	78 f0       	brcs	.+30     	; 0x3146 <__divsf3_pse+0x86>
    3128:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__fp_inf>
    312c:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__fp_szero>
    3130:	5f 3f       	cpi	r21, 0xFF	; 255
    3132:	e4 f3       	brlt	.-8      	; 0x312c <__divsf3_pse+0x6c>
    3134:	98 3e       	cpi	r25, 0xE8	; 232
    3136:	d4 f3       	brlt	.-12     	; 0x312c <__divsf3_pse+0x6c>
    3138:	86 95       	lsr	r24
    313a:	77 95       	ror	r23
    313c:	67 95       	ror	r22
    313e:	b7 95       	ror	r27
    3140:	f7 95       	ror	r31
    3142:	9f 5f       	subi	r25, 0xFF	; 255
    3144:	c9 f7       	brne	.-14     	; 0x3138 <__divsf3_pse+0x78>
    3146:	88 0f       	add	r24, r24
    3148:	91 1d       	adc	r25, r1
    314a:	96 95       	lsr	r25
    314c:	87 95       	ror	r24
    314e:	97 f9       	bld	r25, 7
    3150:	08 95       	ret
    3152:	e1 e0       	ldi	r30, 0x01	; 1
    3154:	66 0f       	add	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	bb 1f       	adc	r27, r27
    315c:	62 17       	cp	r22, r18
    315e:	73 07       	cpc	r23, r19
    3160:	84 07       	cpc	r24, r20
    3162:	ba 07       	cpc	r27, r26
    3164:	20 f0       	brcs	.+8      	; 0x316e <__divsf3_pse+0xae>
    3166:	62 1b       	sub	r22, r18
    3168:	73 0b       	sbc	r23, r19
    316a:	84 0b       	sbc	r24, r20
    316c:	ba 0b       	sbc	r27, r26
    316e:	ee 1f       	adc	r30, r30
    3170:	88 f7       	brcc	.-30     	; 0x3154 <__divsf3_pse+0x94>
    3172:	e0 95       	com	r30
    3174:	08 95       	ret

00003176 <__fixunssfsi>:
    3176:	0e 94 3e 19 	call	0x327c	; 0x327c <__fp_splitA>
    317a:	88 f0       	brcs	.+34     	; 0x319e <__fixunssfsi+0x28>
    317c:	9f 57       	subi	r25, 0x7F	; 127
    317e:	98 f0       	brcs	.+38     	; 0x31a6 <__fixunssfsi+0x30>
    3180:	b9 2f       	mov	r27, r25
    3182:	99 27       	eor	r25, r25
    3184:	b7 51       	subi	r27, 0x17	; 23
    3186:	b0 f0       	brcs	.+44     	; 0x31b4 <__fixunssfsi+0x3e>
    3188:	e1 f0       	breq	.+56     	; 0x31c2 <__fixunssfsi+0x4c>
    318a:	66 0f       	add	r22, r22
    318c:	77 1f       	adc	r23, r23
    318e:	88 1f       	adc	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	1a f0       	brmi	.+6      	; 0x319a <__fixunssfsi+0x24>
    3194:	ba 95       	dec	r27
    3196:	c9 f7       	brne	.-14     	; 0x318a <__fixunssfsi+0x14>
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <__fixunssfsi+0x4c>
    319a:	b1 30       	cpi	r27, 0x01	; 1
    319c:	91 f0       	breq	.+36     	; 0x31c2 <__fixunssfsi+0x4c>
    319e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__fp_zero>
    31a2:	b1 e0       	ldi	r27, 0x01	; 1
    31a4:	08 95       	ret
    31a6:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__fp_zero>
    31aa:	67 2f       	mov	r22, r23
    31ac:	78 2f       	mov	r23, r24
    31ae:	88 27       	eor	r24, r24
    31b0:	b8 5f       	subi	r27, 0xF8	; 248
    31b2:	39 f0       	breq	.+14     	; 0x31c2 <__fixunssfsi+0x4c>
    31b4:	b9 3f       	cpi	r27, 0xF9	; 249
    31b6:	cc f3       	brlt	.-14     	; 0x31aa <__fixunssfsi+0x34>
    31b8:	86 95       	lsr	r24
    31ba:	77 95       	ror	r23
    31bc:	67 95       	ror	r22
    31be:	b3 95       	inc	r27
    31c0:	d9 f7       	brne	.-10     	; 0x31b8 <__fixunssfsi+0x42>
    31c2:	3e f4       	brtc	.+14     	; 0x31d2 <__fixunssfsi+0x5c>
    31c4:	90 95       	com	r25
    31c6:	80 95       	com	r24
    31c8:	70 95       	com	r23
    31ca:	61 95       	neg	r22
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	8f 4f       	sbci	r24, 0xFF	; 255
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	08 95       	ret

000031d4 <__fp_cmp>:
    31d4:	99 0f       	add	r25, r25
    31d6:	00 08       	sbc	r0, r0
    31d8:	55 0f       	add	r21, r21
    31da:	aa 0b       	sbc	r26, r26
    31dc:	e0 e8       	ldi	r30, 0x80	; 128
    31de:	fe ef       	ldi	r31, 0xFE	; 254
    31e0:	16 16       	cp	r1, r22
    31e2:	17 06       	cpc	r1, r23
    31e4:	e8 07       	cpc	r30, r24
    31e6:	f9 07       	cpc	r31, r25
    31e8:	c0 f0       	brcs	.+48     	; 0x321a <__fp_cmp+0x46>
    31ea:	12 16       	cp	r1, r18
    31ec:	13 06       	cpc	r1, r19
    31ee:	e4 07       	cpc	r30, r20
    31f0:	f5 07       	cpc	r31, r21
    31f2:	98 f0       	brcs	.+38     	; 0x321a <__fp_cmp+0x46>
    31f4:	62 1b       	sub	r22, r18
    31f6:	73 0b       	sbc	r23, r19
    31f8:	84 0b       	sbc	r24, r20
    31fa:	95 0b       	sbc	r25, r21
    31fc:	39 f4       	brne	.+14     	; 0x320c <__fp_cmp+0x38>
    31fe:	0a 26       	eor	r0, r26
    3200:	61 f0       	breq	.+24     	; 0x321a <__fp_cmp+0x46>
    3202:	23 2b       	or	r18, r19
    3204:	24 2b       	or	r18, r20
    3206:	25 2b       	or	r18, r21
    3208:	21 f4       	brne	.+8      	; 0x3212 <__fp_cmp+0x3e>
    320a:	08 95       	ret
    320c:	0a 26       	eor	r0, r26
    320e:	09 f4       	brne	.+2      	; 0x3212 <__fp_cmp+0x3e>
    3210:	a1 40       	sbci	r26, 0x01	; 1
    3212:	a6 95       	lsr	r26
    3214:	8f ef       	ldi	r24, 0xFF	; 255
    3216:	81 1d       	adc	r24, r1
    3218:	81 1d       	adc	r24, r1
    321a:	08 95       	ret

0000321c <__fp_inf>:
    321c:	97 f9       	bld	r25, 7
    321e:	9f 67       	ori	r25, 0x7F	; 127
    3220:	80 e8       	ldi	r24, 0x80	; 128
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	08 95       	ret

00003228 <__fp_nan>:
    3228:	9f ef       	ldi	r25, 0xFF	; 255
    322a:	80 ec       	ldi	r24, 0xC0	; 192
    322c:	08 95       	ret

0000322e <__fp_pscA>:
    322e:	00 24       	eor	r0, r0
    3230:	0a 94       	dec	r0
    3232:	16 16       	cp	r1, r22
    3234:	17 06       	cpc	r1, r23
    3236:	18 06       	cpc	r1, r24
    3238:	09 06       	cpc	r0, r25
    323a:	08 95       	ret

0000323c <__fp_pscB>:
    323c:	00 24       	eor	r0, r0
    323e:	0a 94       	dec	r0
    3240:	12 16       	cp	r1, r18
    3242:	13 06       	cpc	r1, r19
    3244:	14 06       	cpc	r1, r20
    3246:	05 06       	cpc	r0, r21
    3248:	08 95       	ret

0000324a <__fp_round>:
    324a:	09 2e       	mov	r0, r25
    324c:	03 94       	inc	r0
    324e:	00 0c       	add	r0, r0
    3250:	11 f4       	brne	.+4      	; 0x3256 <__fp_round+0xc>
    3252:	88 23       	and	r24, r24
    3254:	52 f0       	brmi	.+20     	; 0x326a <__fp_round+0x20>
    3256:	bb 0f       	add	r27, r27
    3258:	40 f4       	brcc	.+16     	; 0x326a <__fp_round+0x20>
    325a:	bf 2b       	or	r27, r31
    325c:	11 f4       	brne	.+4      	; 0x3262 <__fp_round+0x18>
    325e:	60 ff       	sbrs	r22, 0
    3260:	04 c0       	rjmp	.+8      	; 0x326a <__fp_round+0x20>
    3262:	6f 5f       	subi	r22, 0xFF	; 255
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	8f 4f       	sbci	r24, 0xFF	; 255
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	08 95       	ret

0000326c <__fp_split3>:
    326c:	57 fd       	sbrc	r21, 7
    326e:	90 58       	subi	r25, 0x80	; 128
    3270:	44 0f       	add	r20, r20
    3272:	55 1f       	adc	r21, r21
    3274:	59 f0       	breq	.+22     	; 0x328c <__fp_splitA+0x10>
    3276:	5f 3f       	cpi	r21, 0xFF	; 255
    3278:	71 f0       	breq	.+28     	; 0x3296 <__fp_splitA+0x1a>
    327a:	47 95       	ror	r20

0000327c <__fp_splitA>:
    327c:	88 0f       	add	r24, r24
    327e:	97 fb       	bst	r25, 7
    3280:	99 1f       	adc	r25, r25
    3282:	61 f0       	breq	.+24     	; 0x329c <__fp_splitA+0x20>
    3284:	9f 3f       	cpi	r25, 0xFF	; 255
    3286:	79 f0       	breq	.+30     	; 0x32a6 <__fp_splitA+0x2a>
    3288:	87 95       	ror	r24
    328a:	08 95       	ret
    328c:	12 16       	cp	r1, r18
    328e:	13 06       	cpc	r1, r19
    3290:	14 06       	cpc	r1, r20
    3292:	55 1f       	adc	r21, r21
    3294:	f2 cf       	rjmp	.-28     	; 0x327a <__fp_split3+0xe>
    3296:	46 95       	lsr	r20
    3298:	f1 df       	rcall	.-30     	; 0x327c <__fp_splitA>
    329a:	08 c0       	rjmp	.+16     	; 0x32ac <__fp_splitA+0x30>
    329c:	16 16       	cp	r1, r22
    329e:	17 06       	cpc	r1, r23
    32a0:	18 06       	cpc	r1, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	f1 cf       	rjmp	.-30     	; 0x3288 <__fp_splitA+0xc>
    32a6:	86 95       	lsr	r24
    32a8:	71 05       	cpc	r23, r1
    32aa:	61 05       	cpc	r22, r1
    32ac:	08 94       	sec
    32ae:	08 95       	ret

000032b0 <__fp_zero>:
    32b0:	e8 94       	clt

000032b2 <__fp_szero>:
    32b2:	bb 27       	eor	r27, r27
    32b4:	66 27       	eor	r22, r22
    32b6:	77 27       	eor	r23, r23
    32b8:	cb 01       	movw	r24, r22
    32ba:	97 f9       	bld	r25, 7
    32bc:	08 95       	ret

000032be <__gesf2>:
    32be:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__fp_cmp>
    32c2:	08 f4       	brcc	.+2      	; 0x32c6 <__gesf2+0x8>
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	08 95       	ret

000032c8 <__mulsf3>:
    32c8:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3x>
    32cc:	0c 94 25 19 	jmp	0x324a	; 0x324a <__fp_round>
    32d0:	0e 94 17 19 	call	0x322e	; 0x322e <__fp_pscA>
    32d4:	38 f0       	brcs	.+14     	; 0x32e4 <__mulsf3+0x1c>
    32d6:	0e 94 1e 19 	call	0x323c	; 0x323c <__fp_pscB>
    32da:	20 f0       	brcs	.+8      	; 0x32e4 <__mulsf3+0x1c>
    32dc:	95 23       	and	r25, r21
    32de:	11 f0       	breq	.+4      	; 0x32e4 <__mulsf3+0x1c>
    32e0:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__fp_inf>
    32e4:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__fp_nan>
    32e8:	11 24       	eor	r1, r1
    32ea:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__fp_szero>

000032ee <__mulsf3x>:
    32ee:	0e 94 36 19 	call	0x326c	; 0x326c <__fp_split3>
    32f2:	70 f3       	brcs	.-36     	; 0x32d0 <__mulsf3+0x8>

000032f4 <__mulsf3_pse>:
    32f4:	95 9f       	mul	r25, r21
    32f6:	c1 f3       	breq	.-16     	; 0x32e8 <__mulsf3+0x20>
    32f8:	95 0f       	add	r25, r21
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	55 1f       	adc	r21, r21
    32fe:	62 9f       	mul	r22, r18
    3300:	f0 01       	movw	r30, r0
    3302:	72 9f       	mul	r23, r18
    3304:	bb 27       	eor	r27, r27
    3306:	f0 0d       	add	r31, r0
    3308:	b1 1d       	adc	r27, r1
    330a:	63 9f       	mul	r22, r19
    330c:	aa 27       	eor	r26, r26
    330e:	f0 0d       	add	r31, r0
    3310:	b1 1d       	adc	r27, r1
    3312:	aa 1f       	adc	r26, r26
    3314:	64 9f       	mul	r22, r20
    3316:	66 27       	eor	r22, r22
    3318:	b0 0d       	add	r27, r0
    331a:	a1 1d       	adc	r26, r1
    331c:	66 1f       	adc	r22, r22
    331e:	82 9f       	mul	r24, r18
    3320:	22 27       	eor	r18, r18
    3322:	b0 0d       	add	r27, r0
    3324:	a1 1d       	adc	r26, r1
    3326:	62 1f       	adc	r22, r18
    3328:	73 9f       	mul	r23, r19
    332a:	b0 0d       	add	r27, r0
    332c:	a1 1d       	adc	r26, r1
    332e:	62 1f       	adc	r22, r18
    3330:	83 9f       	mul	r24, r19
    3332:	a0 0d       	add	r26, r0
    3334:	61 1d       	adc	r22, r1
    3336:	22 1f       	adc	r18, r18
    3338:	74 9f       	mul	r23, r20
    333a:	33 27       	eor	r19, r19
    333c:	a0 0d       	add	r26, r0
    333e:	61 1d       	adc	r22, r1
    3340:	23 1f       	adc	r18, r19
    3342:	84 9f       	mul	r24, r20
    3344:	60 0d       	add	r22, r0
    3346:	21 1d       	adc	r18, r1
    3348:	82 2f       	mov	r24, r18
    334a:	76 2f       	mov	r23, r22
    334c:	6a 2f       	mov	r22, r26
    334e:	11 24       	eor	r1, r1
    3350:	9f 57       	subi	r25, 0x7F	; 127
    3352:	50 40       	sbci	r21, 0x00	; 0
    3354:	9a f0       	brmi	.+38     	; 0x337c <__mulsf3_pse+0x88>
    3356:	f1 f0       	breq	.+60     	; 0x3394 <__mulsf3_pse+0xa0>
    3358:	88 23       	and	r24, r24
    335a:	4a f0       	brmi	.+18     	; 0x336e <__mulsf3_pse+0x7a>
    335c:	ee 0f       	add	r30, r30
    335e:	ff 1f       	adc	r31, r31
    3360:	bb 1f       	adc	r27, r27
    3362:	66 1f       	adc	r22, r22
    3364:	77 1f       	adc	r23, r23
    3366:	88 1f       	adc	r24, r24
    3368:	91 50       	subi	r25, 0x01	; 1
    336a:	50 40       	sbci	r21, 0x00	; 0
    336c:	a9 f7       	brne	.-22     	; 0x3358 <__mulsf3_pse+0x64>
    336e:	9e 3f       	cpi	r25, 0xFE	; 254
    3370:	51 05       	cpc	r21, r1
    3372:	80 f0       	brcs	.+32     	; 0x3394 <__mulsf3_pse+0xa0>
    3374:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__fp_inf>
    3378:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__fp_szero>
    337c:	5f 3f       	cpi	r21, 0xFF	; 255
    337e:	e4 f3       	brlt	.-8      	; 0x3378 <__mulsf3_pse+0x84>
    3380:	98 3e       	cpi	r25, 0xE8	; 232
    3382:	d4 f3       	brlt	.-12     	; 0x3378 <__mulsf3_pse+0x84>
    3384:	86 95       	lsr	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b7 95       	ror	r27
    338c:	f7 95       	ror	r31
    338e:	e7 95       	ror	r30
    3390:	9f 5f       	subi	r25, 0xFF	; 255
    3392:	c1 f7       	brne	.-16     	; 0x3384 <__mulsf3_pse+0x90>
    3394:	fe 2b       	or	r31, r30
    3396:	88 0f       	add	r24, r24
    3398:	91 1d       	adc	r25, r1
    339a:	96 95       	lsr	r25
    339c:	87 95       	ror	r24
    339e:	97 f9       	bld	r25, 7
    33a0:	08 95       	ret

000033a2 <__umulhisi3>:
    33a2:	a2 9f       	mul	r26, r18
    33a4:	b0 01       	movw	r22, r0
    33a6:	b3 9f       	mul	r27, r19
    33a8:	c0 01       	movw	r24, r0
    33aa:	a3 9f       	mul	r26, r19
    33ac:	70 0d       	add	r23, r0
    33ae:	81 1d       	adc	r24, r1
    33b0:	11 24       	eor	r1, r1
    33b2:	91 1d       	adc	r25, r1
    33b4:	b2 9f       	mul	r27, r18
    33b6:	70 0d       	add	r23, r0
    33b8:	81 1d       	adc	r24, r1
    33ba:	11 24       	eor	r1, r1
    33bc:	91 1d       	adc	r25, r1
    33be:	08 95       	ret

000033c0 <_exit>:
    33c0:	f8 94       	cli

000033c2 <__stop_program>:
    33c2:	ff cf       	rjmp	.-2      	; 0x33c2 <__stop_program>
