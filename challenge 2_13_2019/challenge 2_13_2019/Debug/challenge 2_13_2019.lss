
challenge 2_13_2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd3  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000651  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00002588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d8  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  64:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
	if(PinNum>=0 && PinNum<=7)
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	00 f5       	brcc	.+64     	; 0xb0 <DIO_WritePin+0x44>
	{
		switch(PinValue)
  70:	66 23       	and	r22, r22
  72:	81 f0       	breq	.+32     	; 0x94 <DIO_WritePin+0x28>
  74:	61 30       	cpi	r22, 0x01	; 1
  76:	09 f0       	breq	.+2      	; 0x7a <DIO_WritePin+0xe>
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <DIO_WritePin+0x158>
		{
			case SET:
			*((volatile uP_int8)(A+2))|=(1<<PinNum);
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	a9 01       	movw	r20, r18
  80:	02 c0       	rjmp	.+4      	; 0x86 <DIO_WritePin+0x1a>
  82:	44 0f       	add	r20, r20
  84:	55 1f       	adc	r21, r21
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <DIO_WritePin+0x16>
  8a:	ca 01       	movw	r24, r20
  8c:	9b b3       	in	r25, 0x1b	; 27
  8e:	89 2b       	or	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
			break;
  92:	08 95       	ret
			case RESET:
				*((volatile uP_int8)(A+2))&=~(1<<PinNum);
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	a9 01       	movw	r20, r18
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_WritePin+0x34>
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	8a 95       	dec	r24
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_WritePin+0x30>
  a4:	ca 01       	movw	r24, r20
  a6:	80 95       	com	r24
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	89 23       	and	r24, r25
  ac:	8b bb       	out	0x1b, r24	; 27
				break;
  ae:	08 95       	ret
		}	
	}
	else if(PinNum>=8 && PinNum<=15)
  b0:	98 ef       	ldi	r25, 0xF8	; 248
  b2:	98 0f       	add	r25, r24
  b4:	98 30       	cpi	r25, 0x08	; 8
  b6:	10 f5       	brcc	.+68     	; 0xfc <DIO_WritePin+0x90>
	{
	 	switch(PinValue)
  b8:	66 23       	and	r22, r22
  ba:	89 f0       	breq	.+34     	; 0xde <DIO_WritePin+0x72>
  bc:	61 30       	cpi	r22, 0x01	; 1
  be:	09 f0       	breq	.+2      	; 0xc2 <DIO_WritePin+0x56>
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <DIO_WritePin+0x158>
		{
			case SET:
				*((volatile uP_int8)(B+2))|=(1<<(PinNum%8));
  c2:	87 70       	andi	r24, 0x07	; 7
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	a9 01       	movw	r20, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_WritePin+0x64>
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_WritePin+0x60>
  d4:	ca 01       	movw	r24, r20
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	89 2b       	or	r24, r25
  da:	88 bb       	out	0x18, r24	; 24
				break;
  dc:	08 95       	ret
			case RESET:
				*((volatile uP_int8)(B+2))&=~(1<<(PinNum%8));
  de:	87 70       	andi	r24, 0x07	; 7
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	a9 01       	movw	r20, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_WritePin+0x80>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_WritePin+0x7c>
  f0:	ca 01       	movw	r24, r20
  f2:	80 95       	com	r24
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	89 23       	and	r24, r25
  f8:	88 bb       	out	0x18, r24	; 24
				break;
  fa:	08 95       	ret
		}
	}
	else if(PinNum>=16 && PinNum<=23)
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	10 f5       	brcc	.+68     	; 0x148 <DIO_WritePin+0xdc>
	{
		switch(PinValue)
 104:	66 23       	and	r22, r22
 106:	89 f0       	breq	.+34     	; 0x12a <DIO_WritePin+0xbe>
 108:	61 30       	cpi	r22, 0x01	; 1
 10a:	09 f0       	breq	.+2      	; 0x10e <DIO_WritePin+0xa2>
 10c:	5b c0       	rjmp	.+182    	; 0x1c4 <DIO_WritePin+0x158>
		{
			case SET:
				*((volatile uP_int8)(C+2))|=(1<<(PinNum%16));
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	a9 01       	movw	r20, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_WritePin+0xb0>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_WritePin+0xac>
 120:	ca 01       	movw	r24, r20
 122:	95 b3       	in	r25, 0x15	; 21
 124:	89 2b       	or	r24, r25
 126:	85 bb       	out	0x15, r24	; 21
				break;
 128:	08 95       	ret
			case RESET:
				*((volatile uP_int8)(C+2))&=~(1<<(PinNum%16));
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	a9 01       	movw	r20, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_WritePin+0xcc>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_WritePin+0xc8>
 13c:	ca 01       	movw	r24, r20
 13e:	80 95       	com	r24
 140:	95 b3       	in	r25, 0x15	; 21
 142:	89 23       	and	r24, r25
 144:	85 bb       	out	0x15, r24	; 21
				break;
 146:	08 95       	ret
		}
	}
	else if(PinNum>=23 && PinNum<=31)
 148:	99 ee       	ldi	r25, 0xE9	; 233
 14a:	98 0f       	add	r25, r24
 14c:	99 30       	cpi	r25, 0x09	; 9
 14e:	d0 f5       	brcc	.+116    	; 0x1c4 <DIO_WritePin+0x158>
	{
		switch(PinValue)
 150:	66 23       	and	r22, r22
 152:	e9 f0       	breq	.+58     	; 0x18e <DIO_WritePin+0x122>
 154:	61 30       	cpi	r22, 0x01	; 1
 156:	b1 f5       	brne	.+108    	; 0x1c4 <DIO_WritePin+0x158>
		{
			case SET:
				*((volatile uP_int8)(D+2))|=(1<<(PinNum%23));
 158:	95 e6       	ldi	r25, 0x65	; 101
 15a:	89 9f       	mul	r24, r25
 15c:	21 2d       	mov	r18, r1
 15e:	11 24       	eor	r1, r1
 160:	98 2f       	mov	r25, r24
 162:	92 1b       	sub	r25, r18
 164:	96 95       	lsr	r25
 166:	92 0f       	add	r25, r18
 168:	92 95       	swap	r25
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	57 e1       	ldi	r21, 0x17	; 23
 16e:	95 9f       	mul	r25, r21
 170:	80 19       	sub	r24, r0
 172:	11 24       	eor	r1, r1
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	a9 01       	movw	r20, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_WritePin+0x114>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_WritePin+0x110>
 184:	ca 01       	movw	r24, r20
 186:	92 b3       	in	r25, 0x12	; 18
 188:	89 2b       	or	r24, r25
 18a:	82 bb       	out	0x12, r24	; 18
				break;
 18c:	08 95       	ret
			case RESET:
				*((volatile uP_int8)(D+2))&=~(1<<(PinNum%23));
 18e:	95 e6       	ldi	r25, 0x65	; 101
 190:	89 9f       	mul	r24, r25
 192:	21 2d       	mov	r18, r1
 194:	11 24       	eor	r1, r1
 196:	98 2f       	mov	r25, r24
 198:	92 1b       	sub	r25, r18
 19a:	96 95       	lsr	r25
 19c:	92 0f       	add	r25, r18
 19e:	92 95       	swap	r25
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	57 e1       	ldi	r21, 0x17	; 23
 1a4:	95 9f       	mul	r25, r21
 1a6:	80 19       	sub	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	a9 01       	movw	r20, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0x14a>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0x146>
 1ba:	ca 01       	movw	r24, r20
 1bc:	80 95       	com	r24
 1be:	92 b3       	in	r25, 0x12	; 18
 1c0:	89 23       	and	r24, r25
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 val=0;
	
	if(PinNum>=0 && PinNum<=7)
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	98 f4       	brcc	.+38     	; 0x1f0 <DIO_ReadPin+0x2a>
	{
		val=(uint8)(*((volatile uP_int8)(A))&(1<<PinNum))>>PinNum;
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	08 2e       	mov	r0, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_ReadPin+0x10>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_ReadPin+0xc>
 1da:	99 b3       	in	r25, 0x19	; 25
 1dc:	29 23       	and	r18, r25
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	a9 01       	movw	r20, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_ReadPin+0x22>
 1e4:	55 95       	asr	r21
 1e6:	47 95       	ror	r20
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_ReadPin+0x1e>
 1ec:	ca 01       	movw	r24, r20
 1ee:	08 95       	ret
	}
	else if(PinNum>=8 && PinNum<=15)
 1f0:	98 ef       	ldi	r25, 0xF8	; 248
 1f2:	98 0f       	add	r25, r24
 1f4:	98 30       	cpi	r25, 0x08	; 8
 1f6:	a0 f4       	brcc	.+40     	; 0x220 <DIO_ReadPin+0x5a>
	{
		val=(uint8)(*((volatile uP_int8)(B))&(1<<(PinNum%8)))>>(PinNum%8);
 1f8:	48 2f       	mov	r20, r24
 1fa:	47 70       	andi	r20, 0x07	; 7
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	04 2e       	mov	r0, r20
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_ReadPin+0x42>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_ReadPin+0x3e>
 20c:	86 b3       	in	r24, 0x16	; 22
 20e:	28 23       	and	r18, r24
 210:	82 2f       	mov	r24, r18
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_ReadPin+0x54>
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	4a 95       	dec	r20
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_ReadPin+0x50>
 21e:	08 95       	ret
	}
	else if(PinNum>=16 && PinNum<=23)
 220:	90 ef       	ldi	r25, 0xF0	; 240
 222:	98 0f       	add	r25, r24
 224:	98 30       	cpi	r25, 0x08	; 8
 226:	a0 f4       	brcc	.+40     	; 0x250 <DIO_ReadPin+0x8a>
	{
		val=(uint8)(*((volatile uP_int8)(C))&(1<<(PinNum%16)))>>(PinNum%16);
 228:	48 2f       	mov	r20, r24
 22a:	4f 70       	andi	r20, 0x0F	; 15
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	04 2e       	mov	r0, r20
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_ReadPin+0x72>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_ReadPin+0x6e>
 23c:	83 b3       	in	r24, 0x13	; 19
 23e:	28 23       	and	r18, r24
 240:	82 2f       	mov	r24, r18
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_ReadPin+0x84>
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	4a 95       	dec	r20
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_ReadPin+0x80>
 24e:	08 95       	ret
	}
	else if(PinNum>=23 && PinNum<=31)
 250:	99 ee       	ldi	r25, 0xE9	; 233
 252:	98 0f       	add	r25, r24
 254:	99 30       	cpi	r25, 0x09	; 9
 256:	08 f5       	brcc	.+66     	; 0x29a <DIO_ReadPin+0xd4>
	{
		val=(uint8)(*((volatile uP_int8)(D))&(1<<(PinNum%23)))>>(PinNum%23);
 258:	95 e6       	ldi	r25, 0x65	; 101
 25a:	89 9f       	mul	r24, r25
 25c:	21 2d       	mov	r18, r1
 25e:	11 24       	eor	r1, r1
 260:	98 2f       	mov	r25, r24
 262:	92 1b       	sub	r25, r18
 264:	96 95       	lsr	r25
 266:	92 0f       	add	r25, r18
 268:	92 95       	swap	r25
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	48 2f       	mov	r20, r24
 26e:	57 e1       	ldi	r21, 0x17	; 23
 270:	95 9f       	mul	r25, r21
 272:	40 19       	sub	r20, r0
 274:	11 24       	eor	r1, r1
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	04 2e       	mov	r0, r20
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_ReadPin+0xbc>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_ReadPin+0xb8>
 286:	80 b3       	in	r24, 0x10	; 16
 288:	28 23       	and	r18, r24
 28a:	82 2f       	mov	r24, r18
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_ReadPin+0xce>
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	4a 95       	dec	r20
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_ReadPin+0xca>
 298:	08 95       	ret
}


uint8 DIO_ReadPin(uint8 PinNum)
{
	uint8 val=0;
 29a:	80 e0       	ldi	r24, 0x00	; 0
	else if(PinNum>=23 && PinNum<=31)
	{
		val=(uint8)(*((volatile uP_int8)(D))&(1<<(PinNum%23)))>>(PinNum%23);
	}
	return val;
}
 29c:	08 95       	ret

0000029e <DIO_SetPinDirection>:



void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinNum>=0 && PinNum<=7)
 29e:	88 30       	cpi	r24, 0x08	; 8
 2a0:	00 f5       	brcc	.+64     	; 0x2e2 <DIO_SetPinDirection+0x44>
	{
		switch(PinDirection)
 2a2:	66 23       	and	r22, r22
 2a4:	81 f0       	breq	.+32     	; 0x2c6 <DIO_SetPinDirection+0x28>
 2a6:	61 30       	cpi	r22, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_SetPinDirection+0xe>
 2aa:	a5 c0       	rjmp	.+330    	; 0x3f6 <DIO_SetPinDirection+0x158>
		{
			case OUTPUT:
			*((volatile uP_int8)(A+1))|=(1<<PinNum);
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinDirection+0x1a>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinDirection+0x16>
 2bc:	ca 01       	movw	r24, r20
 2be:	9a b3       	in	r25, 0x1a	; 26
 2c0:	89 2b       	or	r24, r25
 2c2:	8a bb       	out	0x1a, r24	; 26
			break;
 2c4:	08 95       	ret
			case INPUT:
			*((volatile uP_int8)(A+1))&=~(1<<PinNum);
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	a9 01       	movw	r20, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPinDirection+0x34>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	8a 95       	dec	r24
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPinDirection+0x30>
 2d6:	ca 01       	movw	r24, r20
 2d8:	80 95       	com	r24
 2da:	9a b3       	in	r25, 0x1a	; 26
 2dc:	89 23       	and	r24, r25
 2de:	8a bb       	out	0x1a, r24	; 26
			break;
 2e0:	08 95       	ret
		}
	}
	else if(PinNum>=8 && PinNum<=15)
 2e2:	98 ef       	ldi	r25, 0xF8	; 248
 2e4:	98 0f       	add	r25, r24
 2e6:	98 30       	cpi	r25, 0x08	; 8
 2e8:	10 f5       	brcc	.+68     	; 0x32e <DIO_SetPinDirection+0x90>
	{
		switch(PinDirection)
 2ea:	66 23       	and	r22, r22
 2ec:	89 f0       	breq	.+34     	; 0x310 <DIO_SetPinDirection+0x72>
 2ee:	61 30       	cpi	r22, 0x01	; 1
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <DIO_SetPinDirection+0x56>
 2f2:	81 c0       	rjmp	.+258    	; 0x3f6 <DIO_SetPinDirection+0x158>
		{
			case OUTPUT:
			*((volatile uP_int8)(B+1))|=(1<<(PinNum%8));
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	a9 01       	movw	r20, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_SetPinDirection+0x64>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_SetPinDirection+0x60>
 306:	ca 01       	movw	r24, r20
 308:	97 b3       	in	r25, 0x17	; 23
 30a:	89 2b       	or	r24, r25
 30c:	87 bb       	out	0x17, r24	; 23
			break;
 30e:	08 95       	ret
			case INPUT:
			*((volatile uP_int8)(B+1))&=~(1<<(PinNum%8));
 310:	87 70       	andi	r24, 0x07	; 7
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	a9 01       	movw	r20, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_SetPinDirection+0x80>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_SetPinDirection+0x7c>
 322:	ca 01       	movw	r24, r20
 324:	80 95       	com	r24
 326:	97 b3       	in	r25, 0x17	; 23
 328:	89 23       	and	r24, r25
 32a:	87 bb       	out	0x17, r24	; 23
			break;
 32c:	08 95       	ret
		}
	}
	else if(PinNum>=16 && PinNum<=23)
 32e:	90 ef       	ldi	r25, 0xF0	; 240
 330:	98 0f       	add	r25, r24
 332:	98 30       	cpi	r25, 0x08	; 8
 334:	10 f5       	brcc	.+68     	; 0x37a <DIO_SetPinDirection+0xdc>
	{
		switch(PinDirection)
 336:	66 23       	and	r22, r22
 338:	89 f0       	breq	.+34     	; 0x35c <DIO_SetPinDirection+0xbe>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <DIO_SetPinDirection+0xa2>
 33e:	5b c0       	rjmp	.+182    	; 0x3f6 <DIO_SetPinDirection+0x158>
		{
			case OUTPUT:
			*((volatile uP_int8)(C+1))|=(1<<(PinNum%16));
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	a9 01       	movw	r20, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_SetPinDirection+0xb0>
 34a:	44 0f       	add	r20, r20
 34c:	55 1f       	adc	r21, r21
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_SetPinDirection+0xac>
 352:	ca 01       	movw	r24, r20
 354:	94 b3       	in	r25, 0x14	; 20
 356:	89 2b       	or	r24, r25
 358:	84 bb       	out	0x14, r24	; 20
			break;
 35a:	08 95       	ret
			case INPUT:
			*((volatile uP_int8)(C+1))&=~(1<<(PinNum%16));
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	a9 01       	movw	r20, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_SetPinDirection+0xcc>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_SetPinDirection+0xc8>
 36e:	ca 01       	movw	r24, r20
 370:	80 95       	com	r24
 372:	94 b3       	in	r25, 0x14	; 20
 374:	89 23       	and	r24, r25
 376:	84 bb       	out	0x14, r24	; 20
			break;
 378:	08 95       	ret
		}
	}
	else if(PinNum>=23 && PinNum<=31)
 37a:	99 ee       	ldi	r25, 0xE9	; 233
 37c:	98 0f       	add	r25, r24
 37e:	99 30       	cpi	r25, 0x09	; 9
 380:	d0 f5       	brcc	.+116    	; 0x3f6 <DIO_SetPinDirection+0x158>
	{
		switch(PinDirection)
 382:	66 23       	and	r22, r22
 384:	e9 f0       	breq	.+58     	; 0x3c0 <DIO_SetPinDirection+0x122>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	b1 f5       	brne	.+108    	; 0x3f6 <DIO_SetPinDirection+0x158>
		{
			case OUTPUT:
			*((volatile uP_int8)(D+1))|=(1<<(PinNum%23));
 38a:	95 e6       	ldi	r25, 0x65	; 101
 38c:	89 9f       	mul	r24, r25
 38e:	21 2d       	mov	r18, r1
 390:	11 24       	eor	r1, r1
 392:	98 2f       	mov	r25, r24
 394:	92 1b       	sub	r25, r18
 396:	96 95       	lsr	r25
 398:	92 0f       	add	r25, r18
 39a:	92 95       	swap	r25
 39c:	9f 70       	andi	r25, 0x0F	; 15
 39e:	57 e1       	ldi	r21, 0x17	; 23
 3a0:	95 9f       	mul	r25, r21
 3a2:	80 19       	sub	r24, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	a9 01       	movw	r20, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_SetPinDirection+0x114>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	8a 95       	dec	r24
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_SetPinDirection+0x110>
 3b6:	ca 01       	movw	r24, r20
 3b8:	91 b3       	in	r25, 0x11	; 17
 3ba:	89 2b       	or	r24, r25
 3bc:	81 bb       	out	0x11, r24	; 17
			break;
 3be:	08 95       	ret
			case INPUT:
			*((volatile uP_int8)(D+1))&=~(1<<(PinNum%23));
 3c0:	95 e6       	ldi	r25, 0x65	; 101
 3c2:	89 9f       	mul	r24, r25
 3c4:	21 2d       	mov	r18, r1
 3c6:	11 24       	eor	r1, r1
 3c8:	98 2f       	mov	r25, r24
 3ca:	92 1b       	sub	r25, r18
 3cc:	96 95       	lsr	r25
 3ce:	92 0f       	add	r25, r18
 3d0:	92 95       	swap	r25
 3d2:	9f 70       	andi	r25, 0x0F	; 15
 3d4:	57 e1       	ldi	r21, 0x17	; 23
 3d6:	95 9f       	mul	r25, r21
 3d8:	80 19       	sub	r24, r0
 3da:	11 24       	eor	r1, r1
 3dc:	21 e0       	ldi	r18, 0x01	; 1
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	a9 01       	movw	r20, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_SetPinDirection+0x14a>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_SetPinDirection+0x146>
 3ec:	ca 01       	movw	r24, r20
 3ee:	80 95       	com	r24
 3f0:	91 b3       	in	r25, 0x11	; 17
 3f2:	89 23       	and	r24, r25
 3f4:	81 bb       	out	0x11, r24	; 17
 3f6:	08 95       	ret

000003f8 <main>:
#include "timer.h"

int main(void)
{
	uint8 i=0,f=0;
	timer_init();
 3f8:	0e 94 6f 03 	call	0x6de	; 0x6de <timer_init>

	DIO_SetPinDirection(10,INPUT);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPinDirection>
	DIO_SetPinDirection(13,OUTPUT);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPinDirection>
	DIO_SetPinDirection(14,OUTPUT);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	8e e0       	ldi	r24, 0x0E	; 14
 410:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPinDirection>
	DIO_SetPinDirection(15,OUTPUT);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_SetPinDirection>
	while (1)
	{
		
		f=0;
 41c:	00 e0       	ldi	r16, 0x00	; 0
				DIO_WritePin(13,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
 41e:	c0 2f       	mov	r28, r16
	DIO_SetPinDirection(15,OUTPUT);
	while (1)
	{
		
		f=0;
		DIO_WritePin(13,SET);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
 428:	d4 e1       	ldi	r29, 0x14	; 20
	DIO_SetPinDirection(14,OUTPUT);
	DIO_SetPinDirection(15,OUTPUT);
	while (1)
	{
		
		f=0;
 42a:	10 2f       	mov	r17, r16
		DIO_WritePin(13,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10)==1 && f==0)
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 436:	11 23       	and	r17, r17
 438:	49 f0       	breq	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43a:	0e c0       	rjmp	.+28     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			{
				f=1;
				while(DIO_ReadPin(10))
				{
					DIO_WritePin(15,SET);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	8f e0       	ldi	r24, 0x0F	; 15
 440:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
					DIO_WritePin(13,RESET);
 444:	6c 2f       	mov	r22, r28
 446:	8d e0       	ldi	r24, 0x0D	; 13
 448:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10)==1 && f==0)
			{
				f=1;
				while(DIO_ReadPin(10))
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 452:	81 11       	cpse	r24, r1
 454:	f3 cf       	rjmp	.-26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 456:	fb c0       	rjmp	.+502    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(13,RESET);
				}
			}
			timer_delay(50);
 458:	62 e3       	ldi	r22, 0x32	; 50
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 46a:	81 11       	cpse	r24, r1
 46c:	1f c0       	rjmp	.+62     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 46e:	11 30       	cpi	r17, 0x01	; 1
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	f9 c0       	rjmp	.+498    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
			{
				DIO_WritePin(13,RESET);
 474:	6c 2f       	mov	r22, r28
 476:	8d e0       	ldi	r24, 0x0D	; 13
 478:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(14,RESET);
 47c:	6c 2f       	mov	r22, r28
 47e:	8e e0       	ldi	r24, 0x0E	; 14
 480:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,SET);
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	8f e0       	ldi	r24, 0x0F	; 15
 488:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				f=0;
				timer_delay(1000);
 48c:	68 ee       	ldi	r22, 0xE8	; 232
 48e:	73 e0       	ldi	r23, 0x03	; 3
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
				DIO_WritePin(13,SET);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,RESET);
 4a0:	6c 2f       	mov	r22, r28
 4a2:	8f e0       	ldi	r24, 0x0F	; 15
 4a4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			if(DIO_ReadPin(10)==0 && f==1)
			{
				DIO_WritePin(13,RESET);
				DIO_WritePin(14,RESET);
				DIO_WritePin(15,SET);
				f=0;
 4a8:	1c 2f       	mov	r17, r28
 4aa:	dd c0       	rjmp	.+442    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
				timer_delay(1000);
				DIO_WritePin(13,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
 4ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	89 f4       	brne	.+34     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4b6:	11 30       	cpi	r17, 0x01	; 1
 4b8:	49 f0       	breq	.+18     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			{
				f=0;
				while(DIO_ReadPin(10))
				{
					DIO_WritePin(15,SET);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	8f e0       	ldi	r24, 0x0F	; 15
 4c0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
					DIO_WritePin(13,RESET);
 4c4:	6c 2f       	mov	r22, r28
 4c6:	8d e0       	ldi	r24, 0x0D	; 13
 4c8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
				while(DIO_ReadPin(10))
 4cc:	8a e0       	ldi	r24, 0x0A	; 10
 4ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 4d2:	81 11       	cpse	r24, r1
 4d4:	f3 cf       	rjmp	.-26     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				DIO_WritePin(13,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
 4d6:	1c 2f       	mov	r17, r28
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(13,RESET);
				}
			}
			DIO_WritePin(13,SET);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
 4e0:	d1 50       	subi	r29, 0x01	; 1
	while (1)
	{
		
		f=0;
		DIO_WritePin(13,SET);
		for (i=0;i<20;i++)
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	a3 cf       	rjmp	.-186    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				}
			}
			DIO_WritePin(13,SET);
		}
		f=0;
		DIO_WritePin(13,RESET);
 4e6:	60 2f       	mov	r22, r16
 4e8:	8d e0       	ldi	r24, 0x0D	; 13
 4ea:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
		DIO_WritePin(15,SET);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	8f e0       	ldi	r24, 0x0F	; 15
 4f2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
 4f6:	d4 e1       	ldi	r29, 0x14	; 20
					DIO_WritePin(13,RESET);
				}
			}
			DIO_WritePin(13,SET);
		}
		f=0;
 4f8:	10 2f       	mov	r17, r16
		DIO_WritePin(13,RESET);
		DIO_WritePin(15,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10) && f==0)
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 500:	88 23       	and	r24, r24
 502:	41 f0       	breq	.+16     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 504:	11 11       	cpse	r17, r1
 506:	06 c0       	rjmp	.+12     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			{
				f=1;
				while(DIO_ReadPin(10));
 508:	8a e0       	ldi	r24, 0x0A	; 10
 50a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 50e:	81 11       	cpse	r24, r1
 510:	fb cf       	rjmp	.-10     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 512:	ad c0       	rjmp	.+346    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
			}
			timer_delay(50);
 514:	62 e3       	ldi	r22, 0x32	; 50
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 520:	8a e0       	ldi	r24, 0x0A	; 10
 522:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 526:	81 11       	cpse	r24, r1
 528:	17 c0       	rjmp	.+46     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 52a:	11 30       	cpi	r17, 0x01	; 1
 52c:	09 f0       	breq	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	ab c0       	rjmp	.+342    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
			{
				DIO_WritePin(13,RESET);
 530:	6c 2f       	mov	r22, r28
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(14,RESET);
 538:	6c 2f       	mov	r22, r28
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,SET);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	8f e0       	ldi	r24, 0x0F	; 15
 544:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				f=0;
				timer_delay(1000);
 548:	68 ee       	ldi	r22, 0xE8	; 232
 54a:	73 e0       	ldi	r23, 0x03	; 3
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
			{
				DIO_WritePin(13,RESET);
				DIO_WritePin(14,RESET);
				DIO_WritePin(15,SET);
				f=0;
 554:	1c 2f       	mov	r17, r28
 556:	97 c0       	rjmp	.+302    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
				timer_delay(1000);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	41 f4       	brne	.+16     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 562:	11 30       	cpi	r17, 0x01	; 1
 564:	31 f4       	brne	.+12     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
			{
				f=0;
				while(DIO_ReadPin(10));
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 56c:	81 11       	cpse	r24, r1
 56e:	fb cf       	rjmp	.-10     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
				f=0;
				timer_delay(1000);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
 570:	1c 2f       	mov	r17, r28
 572:	d1 50       	subi	r29, 0x01	; 1
			DIO_WritePin(13,SET);
		}
		f=0;
		DIO_WritePin(13,RESET);
		DIO_WritePin(15,SET);
		for (i=0;i<20;i++)
 574:	11 f6       	brne	.-124    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				f=0;
				while(DIO_ReadPin(10));
			}
		}
		f=0;
		DIO_WritePin(15,RESET);
 576:	60 2f       	mov	r22, r16
 578:	8f e0       	ldi	r24, 0x0F	; 15
 57a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
		DIO_WritePin(14,SET);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	8e e0       	ldi	r24, 0x0E	; 14
 582:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
 586:	d4 e1       	ldi	r29, 0x14	; 20
			{
				f=0;
				while(DIO_ReadPin(10));
			}
		}
		f=0;
 588:	10 2f       	mov	r17, r16
		DIO_WritePin(15,RESET);
		DIO_WritePin(14,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10) && f==0)
 58a:	8a e0       	ldi	r24, 0x0A	; 10
 58c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 590:	88 23       	and	r24, r24
 592:	89 f0       	breq	.+34     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 594:	11 23       	and	r17, r17
 596:	49 f0       	breq	.+18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			{
				f=1;
				while(DIO_ReadPin(10))
				{
					DIO_WritePin(15,SET);
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	8f e0       	ldi	r24, 0x0F	; 15
 59e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
					DIO_WritePin(14,RESET);
 5a2:	6c 2f       	mov	r22, r28
 5a4:	8e e0       	ldi	r24, 0x0E	; 14
 5a6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10) && f==0)
			{
				f=1;
				while(DIO_ReadPin(10))
 5aa:	8a e0       	ldi	r24, 0x0A	; 10
 5ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 5b0:	81 11       	cpse	r24, r1
 5b2:	f3 cf       	rjmp	.-26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 5b4:	6c c0       	rjmp	.+216    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(14,RESET);
				}
			}
			timer_delay(50);
 5b6:	62 e3       	ldi	r22, 0x32	; 50
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 5c8:	81 11       	cpse	r24, r1
 5ca:	1f c0       	rjmp	.+62     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5cc:	11 30       	cpi	r17, 0x01	; 1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d0:	6a c0       	rjmp	.+212    	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
			{
				DIO_WritePin(13,RESET);
 5d2:	6c 2f       	mov	r22, r28
 5d4:	8d e0       	ldi	r24, 0x0D	; 13
 5d6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(14,RESET);
 5da:	6c 2f       	mov	r22, r28
 5dc:	8e e0       	ldi	r24, 0x0E	; 14
 5de:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,SET);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	8f e0       	ldi	r24, 0x0F	; 15
 5e6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				f=0;
				timer_delay(1000);
 5ea:	68 ee       	ldi	r22, 0xE8	; 232
 5ec:	73 e0       	ldi	r23, 0x03	; 3
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
				DIO_WritePin(14,SET);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	8e e0       	ldi	r24, 0x0E	; 14
 5fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,RESET);
 5fe:	6c 2f       	mov	r22, r28
 600:	8f e0       	ldi	r24, 0x0F	; 15
 602:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
			if(DIO_ReadPin(10)==0 && f==1)
			{
				DIO_WritePin(13,RESET);
				DIO_WritePin(14,RESET);
				DIO_WritePin(15,SET);
				f=0;
 606:	1c 2f       	mov	r17, r28
 608:	4e c0       	rjmp	.+156    	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
				timer_delay(1000);
				DIO_WritePin(14,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 60a:	8a e0       	ldi	r24, 0x0A	; 10
 60c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	89 f4       	brne	.+34     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 614:	11 30       	cpi	r17, 0x01	; 1
 616:	49 f0       	breq	.+18     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 618:	0e c0       	rjmp	.+28     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
			{
				f=0;
				while(DIO_ReadPin(10))
				{
					DIO_WritePin(15,SET);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	8f e0       	ldi	r24, 0x0F	; 15
 61e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
					DIO_WritePin(14,RESET);
 622:	6c 2f       	mov	r22, r28
 624:	8e e0       	ldi	r24, 0x0E	; 14
 626:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
				while(DIO_ReadPin(10))
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 630:	81 11       	cpse	r24, r1
 632:	f3 cf       	rjmp	.-26     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
				DIO_WritePin(14,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
			{
				f=0;
 634:	1c 2f       	mov	r17, r28
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(14,RESET);
				}
			}
			DIO_WritePin(14,SET);
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	8e e0       	ldi	r24, 0x0E	; 14
 63a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
 63e:	d1 50       	subi	r29, 0x01	; 1
			}
		}
		f=0;
		DIO_WritePin(15,RESET);
		DIO_WritePin(14,SET);
		for (i=0;i<20;i++)
 640:	09 f0       	breq	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	a3 cf       	rjmp	.-186    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
					DIO_WritePin(14,RESET);
				}
			}
			DIO_WritePin(14,SET);
		}
		DIO_WritePin(14,RESET);		
 644:	60 2f       	mov	r22, r16
 646:	8e e0       	ldi	r24, 0x0E	; 14
 648:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	}
 64c:	e9 ce       	rjmp	.-558    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(13,RESET);
				}
			}
			timer_delay(50);
 64e:	62 e3       	ldi	r22, 0x32	; 50
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 65a:	8a e0       	ldi	r24, 0x0A	; 10
 65c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 660:	81 11       	cpse	r24, r1
 662:	25 c0       	rjmp	.+74     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 664:	07 cf       	rjmp	.-498    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
				f=0;
				timer_delay(1000);
				DIO_WritePin(13,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 666:	8a e0       	ldi	r24, 0x0A	; 10
 668:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 66c:	35 cf       	rjmp	.-406    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			if(DIO_ReadPin(10) && f==0)
			{
				f=1;
				while(DIO_ReadPin(10));
			}
			timer_delay(50);
 66e:	62 e3       	ldi	r22, 0x32	; 50
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 680:	81 11       	cpse	r24, r1
 682:	1d c0       	rjmp	.+58     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 684:	55 cf       	rjmp	.-342    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				DIO_WritePin(14,RESET);
				DIO_WritePin(15,SET);
				f=0;
				timer_delay(1000);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 686:	8a e0       	ldi	r24, 0x0A	; 10
 688:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 68c:	72 cf       	rjmp	.-284    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
				{
					DIO_WritePin(15,SET);
					DIO_WritePin(14,RESET);
				}
			}
			timer_delay(50);
 68e:	62 e3       	ldi	r22, 0x32	; 50
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 7f 03 	call	0x6fe	; 0x6fe <timer_delay>
			if(DIO_ReadPin(10)==0 && f==1)
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 6a0:	81 11       	cpse	r24, r1
 6a2:	15 c0       	rjmp	.+42     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6a4:	96 cf       	rjmp	.-212    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
				f=0;
				timer_delay(1000);
				DIO_WritePin(14,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 6ac:	c4 cf       	rjmp	.-120    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
				f=0;
				timer_delay(1000);
				DIO_WritePin(13,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	09 f4       	brne	.+2      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b8:	09 cf       	rjmp	.-494    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		DIO_WritePin(13,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10)==1 && f==0)
			{
				f=1;
 6ba:	11 e0       	ldi	r17, 0x01	; 1
 6bc:	0d cf       	rjmp	.-486    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				DIO_WritePin(14,RESET);
				DIO_WritePin(15,SET);
				f=0;
				timer_delay(1000);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 6be:	8a e0       	ldi	r24, 0x0A	; 10
 6c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	09 f4       	brne	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c8:	4e cf       	rjmp	.-356    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
		DIO_WritePin(15,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10) && f==0)
			{
				f=1;
 6ca:	11 e0       	ldi	r17, 0x01	; 1
 6cc:	52 cf       	rjmp	.-348    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
				f=0;
				timer_delay(1000);
				DIO_WritePin(14,SET);
				DIO_WritePin(15,RESET);
			}
			if(DIO_ReadPin(10)==1 && f==1)
 6ce:	8a e0       	ldi	r24, 0x0A	; 10
 6d0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_ReadPin>
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	09 f4       	brne	.+2      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6d8:	a8 cf       	rjmp	.-176    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
		DIO_WritePin(14,SET);
		for (i=0;i<20;i++)
		{
			if(DIO_ReadPin(10) && f==0)
			{
				f=1;
 6da:	11 e0       	ldi	r17, 0x01	; 1
 6dc:	ac cf       	rjmp	.-168    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>

000006de <timer_init>:

static void Write_pin(uint8 reg,uint8 pin,uint8 val)
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))|=(1<<pin);
 6de:	88 b7       	in	r24, 0x38	; 56
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	88 bf       	out	0x38, r24	; 56
	{
		*((volatile uint8*)(reg))=0xff;
	}
	else if (val==RESET)
	{
		*((volatile uint8*)(reg))=0x00;
 6e4:	12 be       	out	0x32, r1	; 50
	}
	else
	{
		*((volatile uint8*)(reg))=val;
 6e6:	89 ef       	ldi	r24, 0xF9	; 249
 6e8:	8c bf       	out	0x3c, r24	; 60

static void Write_pin(uint8 reg,uint8 pin,uint8 val)
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))|=(1<<pin);
 6ea:	83 b7       	in	r24, 0x33	; 51
 6ec:	88 60       	ori	r24, 0x08	; 8
 6ee:	83 bf       	out	0x33, r24	; 51
 6f0:	83 b7       	in	r24, 0x33	; 51
 6f2:	82 60       	ori	r24, 0x02	; 2
 6f4:	83 bf       	out	0x33, r24	; 51
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	83 bf       	out	0x33, r24	; 51
 6fc:	08 95       	ret

000006fe <timer_delay>:
	Write_pin(_TCCR0,0,SET);

	
}
void timer_delay(uint32 n) //int time with ms
{
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	8b 01       	movw	r16, r22
 704:	9c 01       	movw	r18, r24
	{
		*((volatile uint8*)(reg))=0xff;
	}
	else if (val==RESET)
	{
		*((volatile uint8*)(reg))=0x00;
 706:	12 be       	out	0x32, r1	; 50
}
void timer_delay(uint32 n) //int time with ms
{
	uint32 i=0;
	Write_Register(_TCNT0,0);
	for(i=0;i<n;i++)
 708:	67 2b       	or	r22, r23
 70a:	68 2b       	or	r22, r24
 70c:	69 2b       	or	r22, r25
 70e:	91 f0       	breq	.+36     	; 0x734 <timer_delay+0x36>
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	ba 01       	movw	r22, r20
	{
		while(Read_pin(_TIFR,1)==0);
 716:	08 b6       	in	r0, 0x38	; 56
 718:	01 fe       	sbrs	r0, 1
 71a:	fd cf       	rjmp	.-6      	; 0x716 <timer_delay+0x18>

static void Write_pin(uint8 reg,uint8 pin,uint8 val)
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))|=(1<<pin);
 71c:	88 b7       	in	r24, 0x38	; 56
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	88 bf       	out	0x38, r24	; 56
}
void timer_delay(uint32 n) //int time with ms
{
	uint32 i=0;
	Write_Register(_TCNT0,0);
	for(i=0;i<n;i++)
 722:	4f 5f       	subi	r20, 0xFF	; 255
 724:	5f 4f       	sbci	r21, 0xFF	; 255
 726:	6f 4f       	sbci	r22, 0xFF	; 255
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	04 17       	cp	r16, r20
 72c:	15 07       	cpc	r17, r21
 72e:	26 07       	cpc	r18, r22
 730:	37 07       	cpc	r19, r23
 732:	89 f7       	brne	.-30     	; 0x716 <timer_delay+0x18>
	{
		while(Read_pin(_TIFR,1)==0);
		Write_pin(_TIFR,1,SET);
	
	}	
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
