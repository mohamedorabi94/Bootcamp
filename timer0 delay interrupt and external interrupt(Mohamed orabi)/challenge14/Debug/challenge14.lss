
challenge14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000008d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094b  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e9  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d8  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	34 c0       	rjmp	.+104    	; 0x76 <__vector_3>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	eb c3       	rjmp	.+2006   	; 0x800 <__vector_10>
  2a:	00 00       	nop
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__bad_interrupt>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	2c d0       	rcall	.+88     	; 0xca <main>
  72:	f4 c3       	rjmp	.+2024   	; 0x85c <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_3>:
#define READY	B6		/*LED2 IS SIMULATE READY SIGN*/
#define  F_CPU 8000000
 uint8 f=0;

ISR(INT2_vect)
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
	flag=ONE_SECOUND_ms;	/*if press on button ONE GO to STOP */
  92:	88 ee       	ldi	r24, 0xE8	; 232
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
  9e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <flag+0x1>
  a2:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <flag+0x2>
  a6:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <flag+0x3>
	f=1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  b0:	00 00       	nop
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	bf 91       	pop	r27
  b8:	af 91       	pop	r26
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <main>:


int main(void)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
    timer_init(F_CPU);/*initialize timer with clk 8000000 HZ*/
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	72 e1       	ldi	r23, 0x12	; 18
  d6:	8a e7       	ldi	r24, 0x7A	; 122
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	50 d3       	rcall	.+1696   	; 0x77c <timer_init>
	init_DIO_INTERRUPT();/*active rising edge interrupt push button*/	
  dc:	cc d2       	rcall	.+1432   	; 0x676 <init_DIO_INTERRUPT>
  de:	61 e0       	ldi	r22, 0x01	; 1
	DIO_SetPinDirection(GO,OUTPUT); /*detect direction of LED OUTPUT*/
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	7e d1       	rcall	.+764    	; 0x3e0 <DIO_SetPinDirection>
  e4:	61 e0       	ldi	r22, 0x01	; 1
	DIO_SetPinDirection(STOP,OUTPUT);
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	7b d1       	rcall	.+758    	; 0x3e0 <DIO_SetPinDirection>
  ea:	61 e0       	ldi	r22, 0x01	; 1
	DIO_SetPinDirection(READY,OUTPUT);
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	78 d1       	rcall	.+752    	; 0x3e0 <DIO_SetPinDirection>
  f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
    
	
	while (1) 
    {
				
		if (flag==ONE_SECOUND_ms && f==ZERO)			/*to wait 1 sec and enter the 1st state*/ 
  f4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag+0x1>
  f8:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <flag+0x2>
  fc:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <flag+0x3>
 100:	88 3e       	cpi	r24, 0xE8	; 232
 102:	93 40       	sbci	r25, 0x03	; 3
 104:	a1 05       	cpc	r26, r1
 106:	b1 05       	cpc	r27, r1
 108:	c9 f4       	brne	.+50     	; 0x13c <main+0x72>
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10e:	88 23       	and	r24, r24
 110:	a9 f4       	brne	.+42     	; 0x13c <main+0x72>
 112:	60 e0       	ldi	r22, 0x00	; 0
		{
			DIO_WritePin(STOP,RESET);
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	5f d0       	rcall	.+190    	; 0x1d6 <DIO_WritePin>
 118:	60 e0       	ldi	r22, 0x00	; 0
			DIO_WritePin(READY,RESET);
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	5c d0       	rcall	.+184    	; 0x1d6 <DIO_WritePin>
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	8d e0       	ldi	r24, 0x0D	; 13
			DIO_WritePin(GO,SET);
 122:	59 d0       	rcall	.+178    	; 0x1d6 <DIO_WritePin>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			f=ONE;						/*prepare 2nd state*/
 12a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag>
 12e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag+0x1>
			flag=ZERO;	
 132:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag+0x2>
 136:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag+0x3>
 13a:	4c c0       	rjmp	.+152    	; 0x1d4 <main+0x10a>
 13c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 140:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag+0x1>
		}
		else if (flag==ONE_SECOUND_ms && f==ONE)		/*to wait 1 sec and enter the 2nd state*/
 144:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <flag+0x2>
 148:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <flag+0x3>
 14c:	88 3e       	cpi	r24, 0xE8	; 232
 14e:	93 40       	sbci	r25, 0x03	; 3
 150:	a1 05       	cpc	r26, r1
 152:	b1 05       	cpc	r27, r1
 154:	c9 f4       	brne	.+50     	; 0x188 <main+0xbe>
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	a9 f4       	brne	.+42     	; 0x188 <main+0xbe>
 15e:	60 e0       	ldi	r22, 0x00	; 0
		{
			DIO_WritePin(READY,RESET);
 160:	8e e0       	ldi	r24, 0x0E	; 14
 162:	39 d0       	rcall	.+114    	; 0x1d6 <DIO_WritePin>
 164:	60 e0       	ldi	r22, 0x00	; 0
			DIO_WritePin(GO,RESET);
 166:	8d e0       	ldi	r24, 0x0D	; 13
 168:	36 d0       	rcall	.+108    	; 0x1d6 <DIO_WritePin>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8f e0       	ldi	r24, 0x0F	; 15
			DIO_WritePin(STOP,SET);
 16e:	33 d0       	rcall	.+102    	; 0x1d6 <DIO_WritePin>
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			f=TWO;							/*prepare 3rd state*/
 176:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag>
 17a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag+0x1>
			flag=ZERO;
 17e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag+0x2>
 182:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag+0x3>
 186:	26 c0       	rjmp	.+76     	; 0x1d4 <main+0x10a>
 188:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 18c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag+0x1>
		}
		else if (flag==ONE_SECOUND_ms && f==TWO)	/*to wait 1 sec and enter the 3rd state*/
 190:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <flag+0x2>
 194:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <flag+0x3>
 198:	88 3e       	cpi	r24, 0xE8	; 232
 19a:	93 40       	sbci	r25, 0x03	; 3
 19c:	a1 05       	cpc	r26, r1
 19e:	b1 05       	cpc	r27, r1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <main+0xda>
 1a2:	a6 cf       	rjmp	.-180    	; 0xf0 <main+0x26>
 1a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	09 f0       	breq	.+2      	; 0x1ae <main+0xe4>
 1ac:	a1 cf       	rjmp	.-190    	; 0xf0 <main+0x26>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
		{
			DIO_WritePin(READY,SET);
 1b0:	8e e0       	ldi	r24, 0x0E	; 14
 1b2:	11 d0       	rcall	.+34     	; 0x1d6 <DIO_WritePin>
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
			DIO_WritePin(GO,RESET);
 1b8:	0e d0       	rcall	.+28     	; 0x1d6 <DIO_WritePin>
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	0b d0       	rcall	.+22     	; 0x1d6 <DIO_WritePin>
			DIO_WritePin(STOP,RESET);
 1c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <flag>
			f=ZERO;						/*prepare 1st state*/
 1c8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag+0x1>
			flag=ZERO;
 1cc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <flag+0x2>
 1d0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag+0x3>
 1d4:	8d cf       	rjmp	.-230    	; 0xf0 <main+0x26>

000001d6 <DIO_WritePin>:
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <DIO_WritePin+0x6>
		}
    }
 1dc:	cd b7       	in	r28, 0x3d	; 61
	else if(PinNum>=D0 && PinNum<=D7)
	{
		val=(uint8)(*((volatile uint8*)(D))&(1<<(PinNum%8)))>>(PinNum%8);
	}
	return val;
}
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	6a 83       	std	Y+2, r22	; 0x02
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	a0 f5       	brcc	.+104    	; 0x252 <DIO_WritePin+0x7c>
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	c1 f0       	breq	.+48     	; 0x224 <DIO_WritePin+0x4e>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_WritePin+0x24>
 1f8:	ed c0       	rjmp	.+474    	; 0x3d4 <DIO_WritePin+0x1fe>
 1fa:	8b e3       	ldi	r24, 0x3B	; 59
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	2b e3       	ldi	r18, 0x3B	; 59
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	62 2f       	mov	r22, r18
 208:	29 81       	ldd	r18, Y+1	; 0x01
 20a:	42 2f       	mov	r20, r18
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_WritePin+0x42>
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	4a 95       	dec	r20
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_WritePin+0x3e>
 21c:	26 2b       	or	r18, r22
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
 222:	d8 c0       	rjmp	.+432    	; 0x3d4 <DIO_WritePin+0x1fe>
 224:	8b e3       	ldi	r24, 0x3B	; 59
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	2b e3       	ldi	r18, 0x3B	; 59
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	f9 01       	movw	r30, r18
 22e:	20 81       	ld	r18, Z
 230:	62 2f       	mov	r22, r18
 232:	29 81       	ldd	r18, Y+1	; 0x01
 234:	42 2f       	mov	r20, r18
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePin+0x6c>
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	4a 95       	dec	r20
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePin+0x68>
 246:	20 95       	com	r18
 248:	26 23       	and	r18, r22
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	00 00       	nop
 250:	c1 c0       	rjmp	.+386    	; 0x3d4 <DIO_WritePin+0x1fe>
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	08 f4       	brcc	.+2      	; 0x25a <DIO_WritePin+0x84>
 258:	3d c0       	rjmp	.+122    	; 0x2d4 <DIO_WritePin+0xfe>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	d0 f5       	brcc	.+116    	; 0x2d4 <DIO_WritePin+0xfe>
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	88 2f       	mov	r24, r24
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	d9 f0       	breq	.+54     	; 0x2a0 <DIO_WritePin+0xca>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	09 f0       	breq	.+2      	; 0x270 <DIO_WritePin+0x9a>
 26e:	b2 c0       	rjmp	.+356    	; 0x3d4 <DIO_WritePin+0x1fe>
 270:	88 e3       	ldi	r24, 0x38	; 56
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	28 e3       	ldi	r18, 0x38	; 56
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	62 2f       	mov	r22, r18
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	22 2f       	mov	r18, r18
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	a9 01       	movw	r20, r18
 286:	47 70       	andi	r20, 0x07	; 7
 288:	55 27       	eor	r21, r21
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_WritePin+0xbe>
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	4a 95       	dec	r20
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_WritePin+0xba>
 298:	26 2b       	or	r18, r22
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <DIO_WritePin+0xfc>
 2a0:	88 e3       	ldi	r24, 0x38	; 56
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	28 e3       	ldi	r18, 0x38	; 56
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	62 2f       	mov	r22, r18
 2ae:	29 81       	ldd	r18, Y+1	; 0x01
 2b0:	22 2f       	mov	r18, r18
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	a9 01       	movw	r20, r18
 2b6:	47 70       	andi	r20, 0x07	; 7
 2b8:	55 27       	eor	r21, r21
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_WritePin+0xee>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	4a 95       	dec	r20
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_WritePin+0xea>
 2c8:	20 95       	com	r18
 2ca:	26 23       	and	r18, r22
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
 2d0:	00 00       	nop
 2d2:	80 c0       	rjmp	.+256    	; 0x3d4 <DIO_WritePin+0x1fe>
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	80 31       	cpi	r24, 0x10	; 16
 2d8:	08 f4       	brcc	.+2      	; 0x2dc <DIO_WritePin+0x106>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_WritePin+0x180>
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	88 31       	cpi	r24, 0x18	; 24
 2e0:	d0 f5       	brcc	.+116    	; 0x356 <DIO_WritePin+0x180>
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	d9 f0       	breq	.+54     	; 0x322 <DIO_WritePin+0x14c>
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_WritePin+0x11c>
 2f0:	71 c0       	rjmp	.+226    	; 0x3d4 <DIO_WritePin+0x1fe>
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	25 e3       	ldi	r18, 0x35	; 53
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	20 81       	ld	r18, Z
 2fe:	62 2f       	mov	r22, r18
 300:	29 81       	ldd	r18, Y+1	; 0x01
 302:	22 2f       	mov	r18, r18
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	a9 01       	movw	r20, r18
 308:	47 70       	andi	r20, 0x07	; 7
 30a:	55 27       	eor	r21, r21
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_WritePin+0x140>
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	4a 95       	dec	r20
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_WritePin+0x13c>
 31a:	26 2b       	or	r18, r22
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 320:	19 c0       	rjmp	.+50     	; 0x354 <DIO_WritePin+0x17e>
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	25 e3       	ldi	r18, 0x35	; 53
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	f9 01       	movw	r30, r18
 32c:	20 81       	ld	r18, Z
 32e:	62 2f       	mov	r22, r18
 330:	29 81       	ldd	r18, Y+1	; 0x01
 332:	22 2f       	mov	r18, r18
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	a9 01       	movw	r20, r18
 338:	47 70       	andi	r20, 0x07	; 7
 33a:	55 27       	eor	r21, r21
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_WritePin+0x170>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	4a 95       	dec	r20
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_WritePin+0x16c>
 34a:	20 95       	com	r18
 34c:	26 23       	and	r18, r22
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	00 00       	nop
 354:	3f c0       	rjmp	.+126    	; 0x3d4 <DIO_WritePin+0x1fe>
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	88 31       	cpi	r24, 0x18	; 24
 35a:	e0 f1       	brcs	.+120    	; 0x3d4 <DIO_WritePin+0x1fe>
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	80 32       	cpi	r24, 0x20	; 32
 360:	c8 f5       	brcc	.+114    	; 0x3d4 <DIO_WritePin+0x1fe>
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	d9 f0       	breq	.+54     	; 0x3a2 <DIO_WritePin+0x1cc>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <DIO_WritePin+0x19c>
 370:	31 c0       	rjmp	.+98     	; 0x3d4 <DIO_WritePin+0x1fe>
 372:	82 e3       	ldi	r24, 0x32	; 50
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	22 e3       	ldi	r18, 0x32	; 50
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	62 2f       	mov	r22, r18
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	22 2f       	mov	r18, r18
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	a9 01       	movw	r20, r18
 388:	47 70       	andi	r20, 0x07	; 7
 38a:	55 27       	eor	r21, r21
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_WritePin+0x1c0>
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	4a 95       	dec	r20
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_WritePin+0x1bc>
 39a:	26 2b       	or	r18, r22
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
 3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <DIO_WritePin+0x1fe>
 3a2:	82 e3       	ldi	r24, 0x32	; 50
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	22 e3       	ldi	r18, 0x32	; 50
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	62 2f       	mov	r22, r18
 3b0:	29 81       	ldd	r18, Y+1	; 0x01
 3b2:	22 2f       	mov	r18, r18
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	a9 01       	movw	r20, r18
 3b8:	47 70       	andi	r20, 0x07	; 7
 3ba:	55 27       	eor	r21, r21
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_WritePin+0x1f0>
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	4a 95       	dec	r20
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_WritePin+0x1ec>
 3ca:	20 95       	com	r18
 3cc:	26 23       	and	r18, r22
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
 3d2:	00 00       	nop
 3d4:	00 00       	nop
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <DIO_SetPinDirection>:



void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <DIO_SetPinDirection+0x6>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum>=A0 && PinNum<=A7)
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 30       	cpi	r24, 0x08	; 8
 3f2:	a0 f5       	brcc	.+104    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		switch(PinDirection)
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	88 2f       	mov	r24, r24
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	c1 f0       	breq	.+48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
			break;
		}
	}
	
}
 402:	ed c0       	rjmp	.+474    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	if(PinNum>=A0 && PinNum<=A7)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(A+1))|=(1<<PinNum);
 404:	8a e3       	ldi	r24, 0x3A	; 58
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	2a e3       	ldi	r18, 0x3A	; 58
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	62 2f       	mov	r22, r18
 412:	29 81       	ldd	r18, Y+1	; 0x01
 414:	42 2f       	mov	r20, r18
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	4a 95       	dec	r20
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	26 2b       	or	r18, r22
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
			break;
 42c:	d8 c0       	rjmp	.+432    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
			case INPUT:
			*((volatile uint8*)(A+1))&=~(1<<PinNum);
 42e:	8a e3       	ldi	r24, 0x3A	; 58
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	2a e3       	ldi	r18, 0x3A	; 58
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	f9 01       	movw	r30, r18
 438:	20 81       	ld	r18, Z
 43a:	62 2f       	mov	r22, r18
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	42 2f       	mov	r20, r18
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	4a 95       	dec	r20
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	20 95       	com	r18
 452:	26 23       	and	r18, r22
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
			break;
 458:	00 00       	nop
 45a:	c1 c0       	rjmp	.+386    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
		}
	}
	else if(PinNum>=B0 && PinNum<=B7)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	08 f4       	brcc	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	3d c0       	rjmp	.+122    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	80 31       	cpi	r24, 0x10	; 16
 468:	d0 f5       	brcc	.+116    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		switch(PinDirection)
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	d9 f0       	breq	.+54     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	09 f0       	breq	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			break;
			case INPUT:
			*((volatile uint8*)(B+1))&=~(1<<(PinNum%8));
			break;
		}
	}
 478:	b2 c0       	rjmp	.+356    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	else if(PinNum>=B0 && PinNum<=B7)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(B+1))|=(1<<(PinNum%8));
 47a:	87 e3       	ldi	r24, 0x37	; 55
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	27 e3       	ldi	r18, 0x37	; 55
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	f9 01       	movw	r30, r18
 484:	20 81       	ld	r18, Z
 486:	62 2f       	mov	r22, r18
 488:	29 81       	ldd	r18, Y+1	; 0x01
 48a:	22 2f       	mov	r18, r18
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	a9 01       	movw	r20, r18
 490:	47 70       	andi	r20, 0x07	; 7
 492:	55 27       	eor	r21, r21
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	4a 95       	dec	r20
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	26 2b       	or	r18, r22
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
			break;
 4a8:	19 c0       	rjmp	.+50     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			case INPUT:
			*((volatile uint8*)(B+1))&=~(1<<(PinNum%8));
 4aa:	87 e3       	ldi	r24, 0x37	; 55
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	27 e3       	ldi	r18, 0x37	; 55
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	62 2f       	mov	r22, r18
 4b8:	29 81       	ldd	r18, Y+1	; 0x01
 4ba:	22 2f       	mov	r18, r18
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	a9 01       	movw	r20, r18
 4c0:	47 70       	andi	r20, 0x07	; 7
 4c2:	55 27       	eor	r21, r21
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	4a 95       	dec	r20
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4d2:	20 95       	com	r18
 4d4:	26 23       	and	r18, r22
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
			break;
 4da:	00 00       	nop
		}
	}
 4dc:	80 c0       	rjmp	.+256    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	else if(PinNum>=C0 && PinNum<=C7)
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	80 31       	cpi	r24, 0x10	; 16
 4e2:	08 f4       	brcc	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	3d c0       	rjmp	.+122    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	88 31       	cpi	r24, 0x18	; 24
 4ea:	d0 f5       	brcc	.+116    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	{
		switch(PinDirection)
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	d9 f0       	breq	.+54     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			break;
			case INPUT:
			*((volatile uint8*)(C+1))&=~(1<<(PinNum%8));
			break;
		}
	}
 4fa:	71 c0       	rjmp	.+226    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	else if(PinNum>=C0 && PinNum<=C7)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(C+1))|=(1<<(PinNum%8));
 4fc:	84 e3       	ldi	r24, 0x34	; 52
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	24 e3       	ldi	r18, 0x34	; 52
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	20 81       	ld	r18, Z
 508:	62 2f       	mov	r22, r18
 50a:	29 81       	ldd	r18, Y+1	; 0x01
 50c:	22 2f       	mov	r18, r18
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	a9 01       	movw	r20, r18
 512:	47 70       	andi	r20, 0x07	; 7
 514:	55 27       	eor	r21, r21
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	4a 95       	dec	r20
 522:	e2 f7       	brpl	.-8      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 524:	26 2b       	or	r18, r22
 526:	fc 01       	movw	r30, r24
 528:	20 83       	st	Z, r18
			break;
 52a:	19 c0       	rjmp	.+50     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
			case INPUT:
			*((volatile uint8*)(C+1))&=~(1<<(PinNum%8));
 52c:	84 e3       	ldi	r24, 0x34	; 52
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	24 e3       	ldi	r18, 0x34	; 52
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	62 2f       	mov	r22, r18
 53a:	29 81       	ldd	r18, Y+1	; 0x01
 53c:	22 2f       	mov	r18, r18
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	a9 01       	movw	r20, r18
 542:	47 70       	andi	r20, 0x07	; 7
 544:	55 27       	eor	r21, r21
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	4a 95       	dec	r20
 552:	e2 f7       	brpl	.-8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 554:	20 95       	com	r18
 556:	26 23       	and	r18, r22
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
			break;
 55c:	00 00       	nop
		}
	}
 55e:	3f c0       	rjmp	.+126    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	else if(PinNum>=D0 && PinNum<=D7)
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 31       	cpi	r24, 0x18	; 24
 564:	e0 f1       	brcs	.+120    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	80 32       	cpi	r24, 0x20	; 32
 56a:	c8 f5       	brcc	.+114    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	{
		switch(PinDirection)
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	d9 f0       	breq	.+54     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	09 f0       	breq	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
			break;
		}
	}
	
}
 57a:	31 c0       	rjmp	.+98     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
	else if(PinNum>=D0 && PinNum<=D7)
	{
		switch(PinDirection)
		{
			case OUTPUT:
			*((volatile uint8*)(D+1))|=(1<<(PinNum%8));
 57c:	81 e3       	ldi	r24, 0x31	; 49
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	21 e3       	ldi	r18, 0x31	; 49
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	f9 01       	movw	r30, r18
 586:	20 81       	ld	r18, Z
 588:	62 2f       	mov	r22, r18
 58a:	29 81       	ldd	r18, Y+1	; 0x01
 58c:	22 2f       	mov	r18, r18
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	a9 01       	movw	r20, r18
 592:	47 70       	andi	r20, 0x07	; 7
 594:	55 27       	eor	r21, r21
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	4a 95       	dec	r20
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5a4:	26 2b       	or	r18, r22
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
			break;
 5aa:	19 c0       	rjmp	.+50     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
			case INPUT:
			*((volatile uint8*)(D+1))&=~(1<<(PinNum%8));
 5ac:	81 e3       	ldi	r24, 0x31	; 49
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	21 e3       	ldi	r18, 0x31	; 49
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	62 2f       	mov	r22, r18
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	22 2f       	mov	r18, r18
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	a9 01       	movw	r20, r18
 5c2:	47 70       	andi	r20, 0x07	; 7
 5c4:	55 27       	eor	r21, r21
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5cc:	22 0f       	add	r18, r18
 5ce:	33 1f       	adc	r19, r19
 5d0:	4a 95       	dec	r20
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d4:	20 95       	com	r18
 5d6:	26 23       	and	r18, r22
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
			break;
 5dc:	00 00       	nop
		}
	}
	
}
 5de:	00 00       	nop
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <Write_pin>:


static void Write_pin(uint8 reg,uint8 pin,uint8 val)/*write to any pin*/
{
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <Write_pin+0x6>
 5f0:	1f 92       	push	r1
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	6a 83       	std	Y+2, r22	; 0x02
 5fa:	4b 83       	std	Y+3, r20	; 0x03
	if (val==SET)
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	c1 f4       	brne	.+48     	; 0x632 <Write_pin+0x48>
	{
		*((volatile uint8*)(reg))|=(1<<pin);
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	88 2f       	mov	r24, r24
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9c 01       	movw	r18, r24
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	80 81       	ld	r24, Z
 614:	68 2f       	mov	r22, r24
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	48 2f       	mov	r20, r24
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <Write_pin+0x3c>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	4a 95       	dec	r20
 628:	e2 f7       	brpl	.-8      	; 0x622 <Write_pin+0x38>
 62a:	86 2b       	or	r24, r22
 62c:	f9 01       	movw	r30, r18
 62e:	80 83       	st	Z, r24
	}
	else if (val==RESET)
	{
		*((volatile uint8*)(reg))&=~(1<<pin);
	}
}
 630:	1b c0       	rjmp	.+54     	; 0x668 <Write_pin+0x7e>
{
	if (val==SET)
	{
		*((volatile uint8*)(reg))|=(1<<pin);
	}
	else if (val==RESET)
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	88 23       	and	r24, r24
 636:	c1 f4       	brne	.+48     	; 0x668 <Write_pin+0x7e>
	{
		*((volatile uint8*)(reg))&=~(1<<pin);
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	9c 01       	movw	r18, r24
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	fc 01       	movw	r30, r24
 648:	80 81       	ld	r24, Z
 64a:	68 2f       	mov	r22, r24
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	48 2f       	mov	r20, r24
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <Write_pin+0x72>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	4a 95       	dec	r20
 65e:	e2 f7       	brpl	.-8      	; 0x658 <Write_pin+0x6e>
 660:	80 95       	com	r24
 662:	86 23       	and	r24, r22
 664:	f9 01       	movw	r30, r18
 666:	80 83       	st	Z, r24
	}
}
 668:	00 00       	nop
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <init_DIO_INTERRUPT>:


void init_DIO_INTERRUPT()
{
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
	Write_pin(_SREG,7,1);
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	67 e0       	ldi	r22, 0x07	; 7
 682:	8f e5       	ldi	r24, 0x5F	; 95
 684:	b2 df       	rcall	.-156    	; 0x5ea <Write_pin>
	DIO_SetPinDirection(B2,INPUT);
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	aa de       	rcall	.-684    	; 0x3e0 <DIO_SetPinDirection>
	Write_pin(_MCUCSR,6,SET);
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	66 e0       	ldi	r22, 0x06	; 6
 690:	84 e5       	ldi	r24, 0x54	; 84
 692:	ab df       	rcall	.-170    	; 0x5ea <Write_pin>
	Write_pin(_GICR,5,SET);	
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	65 e0       	ldi	r22, 0x05	; 5
 698:	8b e5       	ldi	r24, 0x5B	; 91
 69a:	a7 df       	rcall	.-178    	; 0x5ea <Write_pin>
}
 69c:	00 00       	nop
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <Write_pin>:
	{
		while(!Read_pin(_TIFR,1));/*waiting until flag set*/
		Write_pin(_TIFR,1,SET);/*clear flag*/
	
	}	
}
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <Write_pin+0x6>
 6aa:	1f 92       	push	r1
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	89 83       	std	Y+1, r24	; 0x01
 6b2:	6a 83       	std	Y+2, r22	; 0x02
 6b4:	4b 83       	std	Y+3, r20	; 0x03
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	c1 f4       	brne	.+48     	; 0x6ec <Write_pin+0x48>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	88 2f       	mov	r24, r24
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	9c 01       	movw	r18, r24
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fc 01       	movw	r30, r24
 6cc:	80 81       	ld	r24, Z
 6ce:	68 2f       	mov	r22, r24
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	48 2f       	mov	r20, r24
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Write_pin+0x3c>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	4a 95       	dec	r20
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Write_pin+0x38>
 6e4:	86 2b       	or	r24, r22
 6e6:	f9 01       	movw	r30, r18
 6e8:	80 83       	st	Z, r24
 6ea:	1b c0       	rjmp	.+54     	; 0x722 <Write_pin+0x7e>
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	88 23       	and	r24, r24
 6f0:	c1 f4       	brne	.+48     	; 0x722 <Write_pin+0x7e>
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	88 2f       	mov	r24, r24
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	9c 01       	movw	r18, r24
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
 6fc:	88 2f       	mov	r24, r24
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	fc 01       	movw	r30, r24
 702:	80 81       	ld	r24, Z
 704:	68 2f       	mov	r22, r24
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	48 2f       	mov	r20, r24
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <Write_pin+0x72>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	4a 95       	dec	r20
 718:	e2 f7       	brpl	.-8      	; 0x712 <Write_pin+0x6e>
 71a:	80 95       	com	r24
 71c:	86 23       	and	r24, r22
 71e:	f9 01       	movw	r30, r18
 720:	80 83       	st	Z, r24
 722:	00 00       	nop
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	08 95       	ret

00000730 <Write_Register>:
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	00 d0       	rcall	.+0      	; 0x736 <Write_Register+0x6>
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	6a 83       	std	Y+2, r22	; 0x02
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	39 f4       	brne	.+14     	; 0x752 <Write_Register+0x22>
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	88 2f       	mov	r24, r24
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
 750:	0f c0       	rjmp	.+30     	; 0x770 <Write_Register+0x40>
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	88 23       	and	r24, r24
 756:	31 f4       	brne	.+12     	; 0x764 <Write_Register+0x34>
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	88 2f       	mov	r24, r24
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	10 82       	st	Z, r1
 762:	06 c0       	rjmp	.+12     	; 0x770 <Write_Register+0x40>
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	88 2f       	mov	r24, r24
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	2a 81       	ldd	r18, Y+2	; 0x02
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
 770:	00 00       	nop
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <timer_init>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	00 d0       	rcall	.+0      	; 0x782 <timer_init+0x6>
 782:	00 d0       	rcall	.+0      	; 0x784 <timer_init+0x8>
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	69 83       	std	Y+1, r22	; 0x01
 78a:	7a 83       	std	Y+2, r23	; 0x02
 78c:	8b 83       	std	Y+3, r24	; 0x03
 78e:	9c 83       	std	Y+4, r25	; 0x04
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	82 e5       	ldi	r24, 0x52	; 82
 794:	cd df       	rcall	.-102    	; 0x730 <Write_Register>
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	63 e0       	ldi	r22, 0x03	; 3
 79a:	83 e5       	ldi	r24, 0x53	; 83
 79c:	83 df       	rcall	.-250    	; 0x6a4 <Write_pin>
 79e:	41 e0       	ldi	r20, 0x01	; 1
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	83 e5       	ldi	r24, 0x53	; 83
 7a4:	7f df       	rcall	.-258    	; 0x6a4 <Write_pin>
 7a6:	41 e0       	ldi	r20, 0x01	; 1
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	83 e5       	ldi	r24, 0x53	; 83
 7ac:	7b df       	rcall	.-266    	; 0x6a4 <Write_pin>
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	9a 81       	ldd	r25, Y+2	; 0x02
 7b2:	ab 81       	ldd	r26, Y+3	; 0x03
 7b4:	bc 81       	ldd	r27, Y+4	; 0x04
 7b6:	81 15       	cp	r24, r1
 7b8:	94 42       	sbci	r25, 0x24	; 36
 7ba:	a4 4f       	sbci	r26, 0xF4	; 244
 7bc:	b1 05       	cpc	r27, r1
 7be:	21 f4       	brne	.+8      	; 0x7c8 <timer_init+0x4c>
 7c0:	69 ef       	ldi	r22, 0xF9	; 249
 7c2:	8c e5       	ldi	r24, 0x5C	; 92
 7c4:	b5 df       	rcall	.-150    	; 0x730 <Write_Register>
 7c6:	0c c0       	rjmp	.+24     	; 0x7e0 <timer_init+0x64>
 7c8:	89 81       	ldd	r24, Y+1	; 0x01
 7ca:	9a 81       	ldd	r25, Y+2	; 0x02
 7cc:	ab 81       	ldd	r26, Y+3	; 0x03
 7ce:	bc 81       	ldd	r27, Y+4	; 0x04
 7d0:	81 15       	cp	r24, r1
 7d2:	92 41       	sbci	r25, 0x12	; 18
 7d4:	aa 47       	sbci	r26, 0x7A	; 122
 7d6:	b1 05       	cpc	r27, r1
 7d8:	19 f4       	brne	.+6      	; 0x7e0 <timer_init+0x64>
 7da:	6c e7       	ldi	r22, 0x7C	; 124
 7dc:	8c e5       	ldi	r24, 0x5C	; 92
 7de:	a8 df       	rcall	.-176    	; 0x730 <Write_Register>
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	67 e0       	ldi	r22, 0x07	; 7
 7e4:	8f e5       	ldi	r24, 0x5F	; 95
 7e6:	5e df       	rcall	.-324    	; 0x6a4 <Write_pin>
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	89 e5       	ldi	r24, 0x59	; 89
 7ee:	5a df       	rcall	.-332    	; 0x6a4 <Write_pin>
 7f0:	00 00       	nop
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
	flag++;
 81c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 820:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <flag+0x1>
 824:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <flag+0x2>
 828:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <flag+0x3>
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	a1 1d       	adc	r26, r1
 830:	b1 1d       	adc	r27, r1
 832:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
 836:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <flag+0x1>
 83a:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <flag+0x2>
 83e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <flag+0x3>
 842:	00 00       	nop
 844:	df 91       	pop	r29
 846:	cf 91       	pop	r28
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	0f 90       	pop	r0
 852:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
